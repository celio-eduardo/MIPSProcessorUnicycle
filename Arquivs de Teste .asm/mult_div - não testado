.data
# Array para a multiplicação
array_mult: .word 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

# Arrays para a divisão
array_div1: .word 10, 20, 30, 40, 50, 60, 70, 80, 90, 100
array_div2: .word 10, 20, 30, 40, 50, 60, 70, 80, 90, 100

# Arrays para armazenar os resultados da divisão
array_div_int_part: .space 40  # 10 palavras (10 * 4 bytes)
array_div_remainder: .space 40  # 10 palavras (10 * 4 bytes)

.text
.globl main

main:
    # Multiplicação
    la $t0, array_mult   # Carrega o endereço base do array_mult em $t0
    li $t3, 10           # Define o tamanho do array
    li $t4, 2            # Valor para multiplicar (2)
    
    mult_loop:
        lw $t1, 0($t0)   # Carrega o valor atual do array em $t1
        mul $t2, $t1, $t4 # Multiplica $t1 por 2 e armazena o resultado em $t2
        sw $t2, 0($t0)   # Salva o resultado no array original
        addi $t0, $t0, 4 # Incrementa o ponteiro do array
        subi $t3, $t3, 1 # Decrementa o contador do loop
        bgtz $t3, mult_loop # Se o contador ainda for maior que zero, repete o loop

    # Divisão
    la $t0, array_div1       # Carrega o endereço base do array_div1 em $t0
    la $t5, array_div_int_part # Carrega o endereço base do array_div_int_part em $t5
    la $t6, array_div_remainder # Carrega o endereço base do array_div_remainder em $t6
    li $t3, 10               # Define o tamanho do array
    li $t4, 2                # Divisor (2)
    
    div_loop1:
        lw $t1, 0($t0)       # Carrega o valor atual do array_div1 em $t1
        div $t1, $t4         # Divide $t1 por 2
        mflo $t2             # Move a parte inteira do resultado para $t2
        mfhi $t7             # Move o resto do resultado para $t7
        sw $t2, 0($t5)       # Salva a parte inteira no array_div_int_part
        sw $t7, 0($t6)       # Salva o resto no array_div_remainder
        addi $t0, $t0, 4     # Incrementa o ponteiro do array_div1
        addi $t5, $t5, 4     # Incrementa o ponteiro do array_div_int_part
        addi $t6, $t6, 4     # Incrementa o ponteiro do array_div_remainder
        subi $t3, $t3, 1     # Decrementa o contador do loop
        bgtz $t3, div_loop1  # Se o contador ainda for maior que zero, repete o loop
    
    # Divisão por 3
    la $t0, array_div2       # Carrega o endereço base do array_div2 em $t0
    la $t5, array_div_int_part # Carrega o endereço base do array_div_int_part em $t5
    la $t6, array_div_remainder # Carrega o endereço base do array_div_remainder em $t6
    li $t3, 10               # Define o tamanho do array
    li $t4, 3                # Divisor (3)
    
    div_loop2:
        lw $t1, 0($t0)       # Carrega o valor atual do array_div2 em $t1
        div $t1, $t4         # Divide $t1 por 3
        mflo $t2             # Move a parte inteira do resultado para $t2
        mfhi $t7             # Move o resto do resultado para $t7
        sw $t2, 0($t5)       # Salva a parte inteira no array_div_int_part
        sw $t7, 0($t6)       # Salva o resto no array_div_remainder
        addi $t0, $t0, 4     # Incrementa o ponteiro do array_div2
        addi $t5, $t5, 4     # Incrementa o ponteiro do array_div_int_part
        addi $t6, $t6, 4     # Incrementa o ponteiro do array_div_remainder
        subi $t3, $t3, 1     # Decrementa o contador do loop
        bgtz $t3, div_loop2  # Se o contador ainda for maior que zero, repete o loop

    # Finaliza o programa
    li $v0, 10               # Chamada de syscall para terminar o programa
    syscall