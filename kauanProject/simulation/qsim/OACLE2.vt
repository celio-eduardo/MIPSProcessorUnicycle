// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/09/2025 15:46:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_sample_tst(
	MiniCLOCK,
	sampler_tx
);
input  MiniCLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(MiniCLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module main_vlg_check_tst (
	at,
	Clock,
	CONVERTEDADDR,
	INSTRUCAO,
	IROUTPUT,
	JR,
	Jump,
	OVERFLOW,
	PC,
	ra,
	RULA,
	t0,
	t1,
	t2,
	t3,
	t4,
	ULAA,
	ULAB,
	ULAOPCODE,
	UnknownOpcode,
	zero,
	sampler_rx
);
input [31:0] at;
input  Clock;
input [13:0] CONVERTEDADDR;
input [31:0] INSTRUCAO;
input [31:0] IROUTPUT;
input  JR;
input  Jump;
input  OVERFLOW;
input [31:0] PC;
input [31:0] ra;
input [31:0] RULA;
input [31:0] t0;
input [31:0] t1;
input [31:0] t2;
input [31:0] t3;
input [31:0] t4;
input [31:0] ULAA;
input [31:0] ULAB;
input [3:0] ULAOPCODE;
input  UnknownOpcode;
input [31:0] zero;
input sampler_rx;

reg [31:0] at_expected;
reg  Clock_expected;
reg [13:0] CONVERTEDADDR_expected;
reg [31:0] INSTRUCAO_expected;
reg [31:0] IROUTPUT_expected;
reg  JR_expected;
reg  Jump_expected;
reg  OVERFLOW_expected;
reg [31:0] PC_expected;
reg [31:0] ra_expected;
reg [31:0] RULA_expected;
reg [31:0] t0_expected;
reg [31:0] t1_expected;
reg [31:0] t2_expected;
reg [31:0] t3_expected;
reg [31:0] t4_expected;
reg [31:0] ULAA_expected;
reg [31:0] ULAB_expected;
reg [3:0] ULAOPCODE_expected;
reg  UnknownOpcode_expected;
reg [31:0] zero_expected;

reg [31:0] at_prev;
reg  Clock_prev;
reg [13:0] CONVERTEDADDR_prev;
reg [31:0] INSTRUCAO_prev;
reg [31:0] IROUTPUT_prev;
reg  JR_prev;
reg  Jump_prev;
reg  OVERFLOW_prev;
reg [31:0] PC_prev;
reg [31:0] ra_prev;
reg [31:0] RULA_prev;
reg [31:0] t0_prev;
reg [31:0] t1_prev;
reg [31:0] t2_prev;
reg [31:0] t3_prev;
reg [31:0] t4_prev;
reg [31:0] ULAA_prev;
reg [31:0] ULAB_prev;
reg [3:0] ULAOPCODE_prev;
reg  UnknownOpcode_prev;
reg [31:0] zero_prev;

reg [31:0] at_expected_prev;
reg  Clock_expected_prev;
reg [13:0] CONVERTEDADDR_expected_prev;
reg [31:0] INSTRUCAO_expected_prev;
reg [31:0] IROUTPUT_expected_prev;
reg  JR_expected_prev;
reg  Jump_expected_prev;
reg  OVERFLOW_expected_prev;
reg [31:0] PC_expected_prev;
reg [31:0] ra_expected_prev;
reg [31:0] RULA_expected_prev;
reg [31:0] t0_expected_prev;
reg [31:0] t1_expected_prev;
reg [31:0] t2_expected_prev;
reg [31:0] t3_expected_prev;
reg [31:0] t4_expected_prev;
reg [31:0] ULAA_expected_prev;
reg [31:0] ULAB_expected_prev;
reg [3:0] ULAOPCODE_expected_prev;
reg  UnknownOpcode_expected_prev;
reg [31:0] zero_expected_prev;

reg [31:0] last_at_exp;
reg  last_Clock_exp;
reg [13:0] last_CONVERTEDADDR_exp;
reg [31:0] last_INSTRUCAO_exp;
reg [31:0] last_IROUTPUT_exp;
reg  last_JR_exp;
reg  last_Jump_exp;
reg  last_OVERFLOW_exp;
reg [31:0] last_PC_exp;
reg [31:0] last_ra_exp;
reg [31:0] last_RULA_exp;
reg [31:0] last_t0_exp;
reg [31:0] last_t1_exp;
reg [31:0] last_t2_exp;
reg [31:0] last_t3_exp;
reg [31:0] last_t4_exp;
reg [31:0] last_ULAA_exp;
reg [31:0] last_ULAB_exp;
reg [3:0] last_ULAOPCODE_exp;
reg  last_UnknownOpcode_exp;
reg [31:0] last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	at_prev = at;
	Clock_prev = Clock;
	CONVERTEDADDR_prev = CONVERTEDADDR;
	INSTRUCAO_prev = INSTRUCAO;
	IROUTPUT_prev = IROUTPUT;
	JR_prev = JR;
	Jump_prev = Jump;
	OVERFLOW_prev = OVERFLOW;
	PC_prev = PC;
	ra_prev = ra;
	RULA_prev = RULA;
	t0_prev = t0;
	t1_prev = t1;
	t2_prev = t2;
	t3_prev = t3;
	t4_prev = t4;
	ULAA_prev = ULAA;
	ULAB_prev = ULAB;
	ULAOPCODE_prev = ULAOPCODE;
	UnknownOpcode_prev = UnknownOpcode;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	at_expected_prev = at_expected;
	Clock_expected_prev = Clock_expected;
	CONVERTEDADDR_expected_prev = CONVERTEDADDR_expected;
	INSTRUCAO_expected_prev = INSTRUCAO_expected;
	IROUTPUT_expected_prev = IROUTPUT_expected;
	JR_expected_prev = JR_expected;
	Jump_expected_prev = Jump_expected;
	OVERFLOW_expected_prev = OVERFLOW_expected;
	PC_expected_prev = PC_expected;
	ra_expected_prev = ra_expected;
	RULA_expected_prev = RULA_expected;
	t0_expected_prev = t0_expected;
	t1_expected_prev = t1_expected;
	t2_expected_prev = t2_expected;
	t3_expected_prev = t3_expected;
	t4_expected_prev = t4_expected;
	ULAA_expected_prev = ULAA_expected;
	ULAB_expected_prev = ULAB_expected;
	ULAOPCODE_expected_prev = ULAOPCODE_expected;
	UnknownOpcode_expected_prev = UnknownOpcode_expected;
	zero_expected_prev = zero_expected;
end


// expected at[ 31 ]
initial
begin
	at_expected[31] = 1'bX;
end 
// expected at[ 30 ]
initial
begin
	at_expected[30] = 1'bX;
end 
// expected at[ 29 ]
initial
begin
	at_expected[29] = 1'bX;
end 
// expected at[ 28 ]
initial
begin
	at_expected[28] = 1'bX;
end 
// expected at[ 27 ]
initial
begin
	at_expected[27] = 1'bX;
end 
// expected at[ 26 ]
initial
begin
	at_expected[26] = 1'bX;
end 
// expected at[ 25 ]
initial
begin
	at_expected[25] = 1'bX;
end 
// expected at[ 24 ]
initial
begin
	at_expected[24] = 1'bX;
end 
// expected at[ 23 ]
initial
begin
	at_expected[23] = 1'bX;
end 
// expected at[ 22 ]
initial
begin
	at_expected[22] = 1'bX;
end 
// expected at[ 21 ]
initial
begin
	at_expected[21] = 1'bX;
end 
// expected at[ 20 ]
initial
begin
	at_expected[20] = 1'bX;
end 
// expected at[ 19 ]
initial
begin
	at_expected[19] = 1'bX;
end 
// expected at[ 18 ]
initial
begin
	at_expected[18] = 1'bX;
end 
// expected at[ 17 ]
initial
begin
	at_expected[17] = 1'bX;
end 
// expected at[ 16 ]
initial
begin
	at_expected[16] = 1'bX;
end 
// expected at[ 15 ]
initial
begin
	at_expected[15] = 1'bX;
end 
// expected at[ 14 ]
initial
begin
	at_expected[14] = 1'bX;
end 
// expected at[ 13 ]
initial
begin
	at_expected[13] = 1'bX;
end 
// expected at[ 12 ]
initial
begin
	at_expected[12] = 1'bX;
end 
// expected at[ 11 ]
initial
begin
	at_expected[11] = 1'bX;
end 
// expected at[ 10 ]
initial
begin
	at_expected[10] = 1'bX;
end 
// expected at[ 9 ]
initial
begin
	at_expected[9] = 1'bX;
end 
// expected at[ 8 ]
initial
begin
	at_expected[8] = 1'bX;
end 
// expected at[ 7 ]
initial
begin
	at_expected[7] = 1'bX;
end 
// expected at[ 6 ]
initial
begin
	at_expected[6] = 1'bX;
end 
// expected at[ 5 ]
initial
begin
	at_expected[5] = 1'bX;
end 
// expected at[ 4 ]
initial
begin
	at_expected[4] = 1'bX;
end 
// expected at[ 3 ]
initial
begin
	at_expected[3] = 1'bX;
end 
// expected at[ 2 ]
initial
begin
	at_expected[2] = 1'bX;
end 
// expected at[ 1 ]
initial
begin
	at_expected[1] = 1'bX;
end 
// expected at[ 0 ]
initial
begin
	at_expected[0] = 1'bX;
end 

// expected Clock
initial
begin
	Clock_expected = 1'bX;
end 
// expected CONVERTEDADDR[ 13 ]
initial
begin
	CONVERTEDADDR_expected[13] = 1'bX;
end 
// expected CONVERTEDADDR[ 12 ]
initial
begin
	CONVERTEDADDR_expected[12] = 1'bX;
end 
// expected CONVERTEDADDR[ 11 ]
initial
begin
	CONVERTEDADDR_expected[11] = 1'bX;
end 
// expected CONVERTEDADDR[ 10 ]
initial
begin
	CONVERTEDADDR_expected[10] = 1'bX;
end 
// expected CONVERTEDADDR[ 9 ]
initial
begin
	CONVERTEDADDR_expected[9] = 1'bX;
end 
// expected CONVERTEDADDR[ 8 ]
initial
begin
	CONVERTEDADDR_expected[8] = 1'bX;
end 
// expected CONVERTEDADDR[ 7 ]
initial
begin
	CONVERTEDADDR_expected[7] = 1'bX;
end 
// expected CONVERTEDADDR[ 6 ]
initial
begin
	CONVERTEDADDR_expected[6] = 1'bX;
end 
// expected CONVERTEDADDR[ 5 ]
initial
begin
	CONVERTEDADDR_expected[5] = 1'bX;
end 
// expected CONVERTEDADDR[ 4 ]
initial
begin
	CONVERTEDADDR_expected[4] = 1'bX;
end 
// expected CONVERTEDADDR[ 3 ]
initial
begin
	CONVERTEDADDR_expected[3] = 1'bX;
end 
// expected CONVERTEDADDR[ 2 ]
initial
begin
	CONVERTEDADDR_expected[2] = 1'bX;
end 
// expected CONVERTEDADDR[ 1 ]
initial
begin
	CONVERTEDADDR_expected[1] = 1'bX;
end 
// expected CONVERTEDADDR[ 0 ]
initial
begin
	CONVERTEDADDR_expected[0] = 1'bX;
end 
// expected INSTRUCAO[ 31 ]
initial
begin
	INSTRUCAO_expected[31] = 1'bX;
end 
// expected INSTRUCAO[ 30 ]
initial
begin
	INSTRUCAO_expected[30] = 1'bX;
end 
// expected INSTRUCAO[ 29 ]
initial
begin
	INSTRUCAO_expected[29] = 1'bX;
end 
// expected INSTRUCAO[ 28 ]
initial
begin
	INSTRUCAO_expected[28] = 1'bX;
end 
// expected INSTRUCAO[ 27 ]
initial
begin
	INSTRUCAO_expected[27] = 1'bX;
end 
// expected INSTRUCAO[ 26 ]
initial
begin
	INSTRUCAO_expected[26] = 1'bX;
end 
// expected INSTRUCAO[ 25 ]
initial
begin
	INSTRUCAO_expected[25] = 1'bX;
end 
// expected INSTRUCAO[ 24 ]
initial
begin
	INSTRUCAO_expected[24] = 1'bX;
end 
// expected INSTRUCAO[ 23 ]
initial
begin
	INSTRUCAO_expected[23] = 1'bX;
end 
// expected INSTRUCAO[ 22 ]
initial
begin
	INSTRUCAO_expected[22] = 1'bX;
end 
// expected INSTRUCAO[ 21 ]
initial
begin
	INSTRUCAO_expected[21] = 1'bX;
end 
// expected INSTRUCAO[ 20 ]
initial
begin
	INSTRUCAO_expected[20] = 1'bX;
end 
// expected INSTRUCAO[ 19 ]
initial
begin
	INSTRUCAO_expected[19] = 1'bX;
end 
// expected INSTRUCAO[ 18 ]
initial
begin
	INSTRUCAO_expected[18] = 1'bX;
end 
// expected INSTRUCAO[ 17 ]
initial
begin
	INSTRUCAO_expected[17] = 1'bX;
end 
// expected INSTRUCAO[ 16 ]
initial
begin
	INSTRUCAO_expected[16] = 1'bX;
end 
// expected INSTRUCAO[ 15 ]
initial
begin
	INSTRUCAO_expected[15] = 1'bX;
end 
// expected INSTRUCAO[ 14 ]
initial
begin
	INSTRUCAO_expected[14] = 1'bX;
end 
// expected INSTRUCAO[ 13 ]
initial
begin
	INSTRUCAO_expected[13] = 1'bX;
end 
// expected INSTRUCAO[ 12 ]
initial
begin
	INSTRUCAO_expected[12] = 1'bX;
end 
// expected INSTRUCAO[ 11 ]
initial
begin
	INSTRUCAO_expected[11] = 1'bX;
end 
// expected INSTRUCAO[ 10 ]
initial
begin
	INSTRUCAO_expected[10] = 1'bX;
end 
// expected INSTRUCAO[ 9 ]
initial
begin
	INSTRUCAO_expected[9] = 1'bX;
end 
// expected INSTRUCAO[ 8 ]
initial
begin
	INSTRUCAO_expected[8] = 1'bX;
end 
// expected INSTRUCAO[ 7 ]
initial
begin
	INSTRUCAO_expected[7] = 1'bX;
end 
// expected INSTRUCAO[ 6 ]
initial
begin
	INSTRUCAO_expected[6] = 1'bX;
end 
// expected INSTRUCAO[ 5 ]
initial
begin
	INSTRUCAO_expected[5] = 1'bX;
end 
// expected INSTRUCAO[ 4 ]
initial
begin
	INSTRUCAO_expected[4] = 1'bX;
end 
// expected INSTRUCAO[ 3 ]
initial
begin
	INSTRUCAO_expected[3] = 1'bX;
end 
// expected INSTRUCAO[ 2 ]
initial
begin
	INSTRUCAO_expected[2] = 1'bX;
end 
// expected INSTRUCAO[ 1 ]
initial
begin
	INSTRUCAO_expected[1] = 1'bX;
end 
// expected INSTRUCAO[ 0 ]
initial
begin
	INSTRUCAO_expected[0] = 1'bX;
end 
// expected IROUTPUT[ 31 ]
initial
begin
	IROUTPUT_expected[31] = 1'bX;
end 
// expected IROUTPUT[ 30 ]
initial
begin
	IROUTPUT_expected[30] = 1'bX;
end 
// expected IROUTPUT[ 29 ]
initial
begin
	IROUTPUT_expected[29] = 1'bX;
end 
// expected IROUTPUT[ 28 ]
initial
begin
	IROUTPUT_expected[28] = 1'bX;
end 
// expected IROUTPUT[ 27 ]
initial
begin
	IROUTPUT_expected[27] = 1'bX;
end 
// expected IROUTPUT[ 26 ]
initial
begin
	IROUTPUT_expected[26] = 1'bX;
end 
// expected IROUTPUT[ 25 ]
initial
begin
	IROUTPUT_expected[25] = 1'bX;
end 
// expected IROUTPUT[ 24 ]
initial
begin
	IROUTPUT_expected[24] = 1'bX;
end 
// expected IROUTPUT[ 23 ]
initial
begin
	IROUTPUT_expected[23] = 1'bX;
end 
// expected IROUTPUT[ 22 ]
initial
begin
	IROUTPUT_expected[22] = 1'bX;
end 
// expected IROUTPUT[ 21 ]
initial
begin
	IROUTPUT_expected[21] = 1'bX;
end 
// expected IROUTPUT[ 20 ]
initial
begin
	IROUTPUT_expected[20] = 1'bX;
end 
// expected IROUTPUT[ 19 ]
initial
begin
	IROUTPUT_expected[19] = 1'bX;
end 
// expected IROUTPUT[ 18 ]
initial
begin
	IROUTPUT_expected[18] = 1'bX;
end 
// expected IROUTPUT[ 17 ]
initial
begin
	IROUTPUT_expected[17] = 1'bX;
end 
// expected IROUTPUT[ 16 ]
initial
begin
	IROUTPUT_expected[16] = 1'bX;
end 
// expected IROUTPUT[ 15 ]
initial
begin
	IROUTPUT_expected[15] = 1'bX;
end 
// expected IROUTPUT[ 14 ]
initial
begin
	IROUTPUT_expected[14] = 1'bX;
end 
// expected IROUTPUT[ 13 ]
initial
begin
	IROUTPUT_expected[13] = 1'bX;
end 
// expected IROUTPUT[ 12 ]
initial
begin
	IROUTPUT_expected[12] = 1'bX;
end 
// expected IROUTPUT[ 11 ]
initial
begin
	IROUTPUT_expected[11] = 1'bX;
end 
// expected IROUTPUT[ 10 ]
initial
begin
	IROUTPUT_expected[10] = 1'bX;
end 
// expected IROUTPUT[ 9 ]
initial
begin
	IROUTPUT_expected[9] = 1'bX;
end 
// expected IROUTPUT[ 8 ]
initial
begin
	IROUTPUT_expected[8] = 1'bX;
end 
// expected IROUTPUT[ 7 ]
initial
begin
	IROUTPUT_expected[7] = 1'bX;
end 
// expected IROUTPUT[ 6 ]
initial
begin
	IROUTPUT_expected[6] = 1'bX;
end 
// expected IROUTPUT[ 5 ]
initial
begin
	IROUTPUT_expected[5] = 1'bX;
end 
// expected IROUTPUT[ 4 ]
initial
begin
	IROUTPUT_expected[4] = 1'bX;
end 
// expected IROUTPUT[ 3 ]
initial
begin
	IROUTPUT_expected[3] = 1'bX;
end 
// expected IROUTPUT[ 2 ]
initial
begin
	IROUTPUT_expected[2] = 1'bX;
end 
// expected IROUTPUT[ 1 ]
initial
begin
	IROUTPUT_expected[1] = 1'bX;
end 
// expected IROUTPUT[ 0 ]
initial
begin
	IROUTPUT_expected[0] = 1'bX;
end 

// expected JR
initial
begin
	JR_expected = 1'bX;
end 

// expected Jump
initial
begin
	Jump_expected = 1'bX;
end 

// expected OVERFLOW
initial
begin
	OVERFLOW_expected = 1'bX;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected ra[ 31 ]
initial
begin
	ra_expected[31] = 1'bX;
end 
// expected ra[ 30 ]
initial
begin
	ra_expected[30] = 1'bX;
end 
// expected ra[ 29 ]
initial
begin
	ra_expected[29] = 1'bX;
end 
// expected ra[ 28 ]
initial
begin
	ra_expected[28] = 1'bX;
end 
// expected ra[ 27 ]
initial
begin
	ra_expected[27] = 1'bX;
end 
// expected ra[ 26 ]
initial
begin
	ra_expected[26] = 1'bX;
end 
// expected ra[ 25 ]
initial
begin
	ra_expected[25] = 1'bX;
end 
// expected ra[ 24 ]
initial
begin
	ra_expected[24] = 1'bX;
end 
// expected ra[ 23 ]
initial
begin
	ra_expected[23] = 1'bX;
end 
// expected ra[ 22 ]
initial
begin
	ra_expected[22] = 1'bX;
end 
// expected ra[ 21 ]
initial
begin
	ra_expected[21] = 1'bX;
end 
// expected ra[ 20 ]
initial
begin
	ra_expected[20] = 1'bX;
end 
// expected ra[ 19 ]
initial
begin
	ra_expected[19] = 1'bX;
end 
// expected ra[ 18 ]
initial
begin
	ra_expected[18] = 1'bX;
end 
// expected ra[ 17 ]
initial
begin
	ra_expected[17] = 1'bX;
end 
// expected ra[ 16 ]
initial
begin
	ra_expected[16] = 1'bX;
end 
// expected ra[ 15 ]
initial
begin
	ra_expected[15] = 1'bX;
end 
// expected ra[ 14 ]
initial
begin
	ra_expected[14] = 1'bX;
end 
// expected ra[ 13 ]
initial
begin
	ra_expected[13] = 1'bX;
end 
// expected ra[ 12 ]
initial
begin
	ra_expected[12] = 1'bX;
end 
// expected ra[ 11 ]
initial
begin
	ra_expected[11] = 1'bX;
end 
// expected ra[ 10 ]
initial
begin
	ra_expected[10] = 1'bX;
end 
// expected ra[ 9 ]
initial
begin
	ra_expected[9] = 1'bX;
end 
// expected ra[ 8 ]
initial
begin
	ra_expected[8] = 1'bX;
end 
// expected ra[ 7 ]
initial
begin
	ra_expected[7] = 1'bX;
end 
// expected ra[ 6 ]
initial
begin
	ra_expected[6] = 1'bX;
end 
// expected ra[ 5 ]
initial
begin
	ra_expected[5] = 1'bX;
end 
// expected ra[ 4 ]
initial
begin
	ra_expected[4] = 1'bX;
end 
// expected ra[ 3 ]
initial
begin
	ra_expected[3] = 1'bX;
end 
// expected ra[ 2 ]
initial
begin
	ra_expected[2] = 1'bX;
end 
// expected ra[ 1 ]
initial
begin
	ra_expected[1] = 1'bX;
end 
// expected ra[ 0 ]
initial
begin
	ra_expected[0] = 1'bX;
end 
// expected RULA[ 31 ]
initial
begin
	RULA_expected[31] = 1'bX;
end 
// expected RULA[ 30 ]
initial
begin
	RULA_expected[30] = 1'bX;
end 
// expected RULA[ 29 ]
initial
begin
	RULA_expected[29] = 1'bX;
end 
// expected RULA[ 28 ]
initial
begin
	RULA_expected[28] = 1'bX;
end 
// expected RULA[ 27 ]
initial
begin
	RULA_expected[27] = 1'bX;
end 
// expected RULA[ 26 ]
initial
begin
	RULA_expected[26] = 1'bX;
end 
// expected RULA[ 25 ]
initial
begin
	RULA_expected[25] = 1'bX;
end 
// expected RULA[ 24 ]
initial
begin
	RULA_expected[24] = 1'bX;
end 
// expected RULA[ 23 ]
initial
begin
	RULA_expected[23] = 1'bX;
end 
// expected RULA[ 22 ]
initial
begin
	RULA_expected[22] = 1'bX;
end 
// expected RULA[ 21 ]
initial
begin
	RULA_expected[21] = 1'bX;
end 
// expected RULA[ 20 ]
initial
begin
	RULA_expected[20] = 1'bX;
end 
// expected RULA[ 19 ]
initial
begin
	RULA_expected[19] = 1'bX;
end 
// expected RULA[ 18 ]
initial
begin
	RULA_expected[18] = 1'bX;
end 
// expected RULA[ 17 ]
initial
begin
	RULA_expected[17] = 1'bX;
end 
// expected RULA[ 16 ]
initial
begin
	RULA_expected[16] = 1'bX;
end 
// expected RULA[ 15 ]
initial
begin
	RULA_expected[15] = 1'bX;
end 
// expected RULA[ 14 ]
initial
begin
	RULA_expected[14] = 1'bX;
end 
// expected RULA[ 13 ]
initial
begin
	RULA_expected[13] = 1'bX;
end 
// expected RULA[ 12 ]
initial
begin
	RULA_expected[12] = 1'bX;
end 
// expected RULA[ 11 ]
initial
begin
	RULA_expected[11] = 1'bX;
end 
// expected RULA[ 10 ]
initial
begin
	RULA_expected[10] = 1'bX;
end 
// expected RULA[ 9 ]
initial
begin
	RULA_expected[9] = 1'bX;
end 
// expected RULA[ 8 ]
initial
begin
	RULA_expected[8] = 1'bX;
end 
// expected RULA[ 7 ]
initial
begin
	RULA_expected[7] = 1'bX;
end 
// expected RULA[ 6 ]
initial
begin
	RULA_expected[6] = 1'bX;
end 
// expected RULA[ 5 ]
initial
begin
	RULA_expected[5] = 1'bX;
end 
// expected RULA[ 4 ]
initial
begin
	RULA_expected[4] = 1'bX;
end 
// expected RULA[ 3 ]
initial
begin
	RULA_expected[3] = 1'bX;
end 
// expected RULA[ 2 ]
initial
begin
	RULA_expected[2] = 1'bX;
end 
// expected RULA[ 1 ]
initial
begin
	RULA_expected[1] = 1'bX;
end 
// expected RULA[ 0 ]
initial
begin
	RULA_expected[0] = 1'bX;
end 
// expected t0[ 31 ]
initial
begin
	t0_expected[31] = 1'bX;
end 
// expected t0[ 30 ]
initial
begin
	t0_expected[30] = 1'bX;
end 
// expected t0[ 29 ]
initial
begin
	t0_expected[29] = 1'bX;
end 
// expected t0[ 28 ]
initial
begin
	t0_expected[28] = 1'bX;
end 
// expected t0[ 27 ]
initial
begin
	t0_expected[27] = 1'bX;
end 
// expected t0[ 26 ]
initial
begin
	t0_expected[26] = 1'bX;
end 
// expected t0[ 25 ]
initial
begin
	t0_expected[25] = 1'bX;
end 
// expected t0[ 24 ]
initial
begin
	t0_expected[24] = 1'bX;
end 
// expected t0[ 23 ]
initial
begin
	t0_expected[23] = 1'bX;
end 
// expected t0[ 22 ]
initial
begin
	t0_expected[22] = 1'bX;
end 
// expected t0[ 21 ]
initial
begin
	t0_expected[21] = 1'bX;
end 
// expected t0[ 20 ]
initial
begin
	t0_expected[20] = 1'bX;
end 
// expected t0[ 19 ]
initial
begin
	t0_expected[19] = 1'bX;
end 
// expected t0[ 18 ]
initial
begin
	t0_expected[18] = 1'bX;
end 
// expected t0[ 17 ]
initial
begin
	t0_expected[17] = 1'bX;
end 
// expected t0[ 16 ]
initial
begin
	t0_expected[16] = 1'bX;
end 
// expected t0[ 15 ]
initial
begin
	t0_expected[15] = 1'bX;
end 
// expected t0[ 14 ]
initial
begin
	t0_expected[14] = 1'bX;
end 
// expected t0[ 13 ]
initial
begin
	t0_expected[13] = 1'bX;
end 
// expected t0[ 12 ]
initial
begin
	t0_expected[12] = 1'bX;
end 
// expected t0[ 11 ]
initial
begin
	t0_expected[11] = 1'bX;
end 
// expected t0[ 10 ]
initial
begin
	t0_expected[10] = 1'bX;
end 
// expected t0[ 9 ]
initial
begin
	t0_expected[9] = 1'bX;
end 
// expected t0[ 8 ]
initial
begin
	t0_expected[8] = 1'bX;
end 
// expected t0[ 7 ]
initial
begin
	t0_expected[7] = 1'bX;
end 
// expected t0[ 6 ]
initial
begin
	t0_expected[6] = 1'bX;
end 
// expected t0[ 5 ]
initial
begin
	t0_expected[5] = 1'bX;
end 
// expected t0[ 4 ]
initial
begin
	t0_expected[4] = 1'bX;
end 
// expected t0[ 3 ]
initial
begin
	t0_expected[3] = 1'bX;
end 
// expected t0[ 2 ]
initial
begin
	t0_expected[2] = 1'bX;
end 
// expected t0[ 1 ]
initial
begin
	t0_expected[1] = 1'bX;
end 
// expected t0[ 0 ]
initial
begin
	t0_expected[0] = 1'bX;
end 
// expected t1[ 31 ]
initial
begin
	t1_expected[31] = 1'bX;
end 
// expected t1[ 30 ]
initial
begin
	t1_expected[30] = 1'bX;
end 
// expected t1[ 29 ]
initial
begin
	t1_expected[29] = 1'bX;
end 
// expected t1[ 28 ]
initial
begin
	t1_expected[28] = 1'bX;
end 
// expected t1[ 27 ]
initial
begin
	t1_expected[27] = 1'bX;
end 
// expected t1[ 26 ]
initial
begin
	t1_expected[26] = 1'bX;
end 
// expected t1[ 25 ]
initial
begin
	t1_expected[25] = 1'bX;
end 
// expected t1[ 24 ]
initial
begin
	t1_expected[24] = 1'bX;
end 
// expected t1[ 23 ]
initial
begin
	t1_expected[23] = 1'bX;
end 
// expected t1[ 22 ]
initial
begin
	t1_expected[22] = 1'bX;
end 
// expected t1[ 21 ]
initial
begin
	t1_expected[21] = 1'bX;
end 
// expected t1[ 20 ]
initial
begin
	t1_expected[20] = 1'bX;
end 
// expected t1[ 19 ]
initial
begin
	t1_expected[19] = 1'bX;
end 
// expected t1[ 18 ]
initial
begin
	t1_expected[18] = 1'bX;
end 
// expected t1[ 17 ]
initial
begin
	t1_expected[17] = 1'bX;
end 
// expected t1[ 16 ]
initial
begin
	t1_expected[16] = 1'bX;
end 
// expected t1[ 15 ]
initial
begin
	t1_expected[15] = 1'bX;
end 
// expected t1[ 14 ]
initial
begin
	t1_expected[14] = 1'bX;
end 
// expected t1[ 13 ]
initial
begin
	t1_expected[13] = 1'bX;
end 
// expected t1[ 12 ]
initial
begin
	t1_expected[12] = 1'bX;
end 
// expected t1[ 11 ]
initial
begin
	t1_expected[11] = 1'bX;
end 
// expected t1[ 10 ]
initial
begin
	t1_expected[10] = 1'bX;
end 
// expected t1[ 9 ]
initial
begin
	t1_expected[9] = 1'bX;
end 
// expected t1[ 8 ]
initial
begin
	t1_expected[8] = 1'bX;
end 
// expected t1[ 7 ]
initial
begin
	t1_expected[7] = 1'bX;
end 
// expected t1[ 6 ]
initial
begin
	t1_expected[6] = 1'bX;
end 
// expected t1[ 5 ]
initial
begin
	t1_expected[5] = 1'bX;
end 
// expected t1[ 4 ]
initial
begin
	t1_expected[4] = 1'bX;
end 
// expected t1[ 3 ]
initial
begin
	t1_expected[3] = 1'bX;
end 
// expected t1[ 2 ]
initial
begin
	t1_expected[2] = 1'bX;
end 
// expected t1[ 1 ]
initial
begin
	t1_expected[1] = 1'bX;
end 
// expected t1[ 0 ]
initial
begin
	t1_expected[0] = 1'bX;
end 
// expected t2[ 31 ]
initial
begin
	t2_expected[31] = 1'bX;
end 
// expected t2[ 30 ]
initial
begin
	t2_expected[30] = 1'bX;
end 
// expected t2[ 29 ]
initial
begin
	t2_expected[29] = 1'bX;
end 
// expected t2[ 28 ]
initial
begin
	t2_expected[28] = 1'bX;
end 
// expected t2[ 27 ]
initial
begin
	t2_expected[27] = 1'bX;
end 
// expected t2[ 26 ]
initial
begin
	t2_expected[26] = 1'bX;
end 
// expected t2[ 25 ]
initial
begin
	t2_expected[25] = 1'bX;
end 
// expected t2[ 24 ]
initial
begin
	t2_expected[24] = 1'bX;
end 
// expected t2[ 23 ]
initial
begin
	t2_expected[23] = 1'bX;
end 
// expected t2[ 22 ]
initial
begin
	t2_expected[22] = 1'bX;
end 
// expected t2[ 21 ]
initial
begin
	t2_expected[21] = 1'bX;
end 
// expected t2[ 20 ]
initial
begin
	t2_expected[20] = 1'bX;
end 
// expected t2[ 19 ]
initial
begin
	t2_expected[19] = 1'bX;
end 
// expected t2[ 18 ]
initial
begin
	t2_expected[18] = 1'bX;
end 
// expected t2[ 17 ]
initial
begin
	t2_expected[17] = 1'bX;
end 
// expected t2[ 16 ]
initial
begin
	t2_expected[16] = 1'bX;
end 
// expected t2[ 15 ]
initial
begin
	t2_expected[15] = 1'bX;
end 
// expected t2[ 14 ]
initial
begin
	t2_expected[14] = 1'bX;
end 
// expected t2[ 13 ]
initial
begin
	t2_expected[13] = 1'bX;
end 
// expected t2[ 12 ]
initial
begin
	t2_expected[12] = 1'bX;
end 
// expected t2[ 11 ]
initial
begin
	t2_expected[11] = 1'bX;
end 
// expected t2[ 10 ]
initial
begin
	t2_expected[10] = 1'bX;
end 
// expected t2[ 9 ]
initial
begin
	t2_expected[9] = 1'bX;
end 
// expected t2[ 8 ]
initial
begin
	t2_expected[8] = 1'bX;
end 
// expected t2[ 7 ]
initial
begin
	t2_expected[7] = 1'bX;
end 
// expected t2[ 6 ]
initial
begin
	t2_expected[6] = 1'bX;
end 
// expected t2[ 5 ]
initial
begin
	t2_expected[5] = 1'bX;
end 
// expected t2[ 4 ]
initial
begin
	t2_expected[4] = 1'bX;
end 
// expected t2[ 3 ]
initial
begin
	t2_expected[3] = 1'bX;
end 
// expected t2[ 2 ]
initial
begin
	t2_expected[2] = 1'bX;
end 
// expected t2[ 1 ]
initial
begin
	t2_expected[1] = 1'bX;
end 
// expected t2[ 0 ]
initial
begin
	t2_expected[0] = 1'bX;
end 
// expected t3[ 31 ]
initial
begin
	t3_expected[31] = 1'bX;
end 
// expected t3[ 30 ]
initial
begin
	t3_expected[30] = 1'bX;
end 
// expected t3[ 29 ]
initial
begin
	t3_expected[29] = 1'bX;
end 
// expected t3[ 28 ]
initial
begin
	t3_expected[28] = 1'bX;
end 
// expected t3[ 27 ]
initial
begin
	t3_expected[27] = 1'bX;
end 
// expected t3[ 26 ]
initial
begin
	t3_expected[26] = 1'bX;
end 
// expected t3[ 25 ]
initial
begin
	t3_expected[25] = 1'bX;
end 
// expected t3[ 24 ]
initial
begin
	t3_expected[24] = 1'bX;
end 
// expected t3[ 23 ]
initial
begin
	t3_expected[23] = 1'bX;
end 
// expected t3[ 22 ]
initial
begin
	t3_expected[22] = 1'bX;
end 
// expected t3[ 21 ]
initial
begin
	t3_expected[21] = 1'bX;
end 
// expected t3[ 20 ]
initial
begin
	t3_expected[20] = 1'bX;
end 
// expected t3[ 19 ]
initial
begin
	t3_expected[19] = 1'bX;
end 
// expected t3[ 18 ]
initial
begin
	t3_expected[18] = 1'bX;
end 
// expected t3[ 17 ]
initial
begin
	t3_expected[17] = 1'bX;
end 
// expected t3[ 16 ]
initial
begin
	t3_expected[16] = 1'bX;
end 
// expected t3[ 15 ]
initial
begin
	t3_expected[15] = 1'bX;
end 
// expected t3[ 14 ]
initial
begin
	t3_expected[14] = 1'bX;
end 
// expected t3[ 13 ]
initial
begin
	t3_expected[13] = 1'bX;
end 
// expected t3[ 12 ]
initial
begin
	t3_expected[12] = 1'bX;
end 
// expected t3[ 11 ]
initial
begin
	t3_expected[11] = 1'bX;
end 
// expected t3[ 10 ]
initial
begin
	t3_expected[10] = 1'bX;
end 
// expected t3[ 9 ]
initial
begin
	t3_expected[9] = 1'bX;
end 
// expected t3[ 8 ]
initial
begin
	t3_expected[8] = 1'bX;
end 
// expected t3[ 7 ]
initial
begin
	t3_expected[7] = 1'bX;
end 
// expected t3[ 6 ]
initial
begin
	t3_expected[6] = 1'bX;
end 
// expected t3[ 5 ]
initial
begin
	t3_expected[5] = 1'bX;
end 
// expected t3[ 4 ]
initial
begin
	t3_expected[4] = 1'bX;
end 
// expected t3[ 3 ]
initial
begin
	t3_expected[3] = 1'bX;
end 
// expected t3[ 2 ]
initial
begin
	t3_expected[2] = 1'bX;
end 
// expected t3[ 1 ]
initial
begin
	t3_expected[1] = 1'bX;
end 
// expected t3[ 0 ]
initial
begin
	t3_expected[0] = 1'bX;
end 
// expected t4[ 31 ]
initial
begin
	t4_expected[31] = 1'bX;
end 
// expected t4[ 30 ]
initial
begin
	t4_expected[30] = 1'bX;
end 
// expected t4[ 29 ]
initial
begin
	t4_expected[29] = 1'bX;
end 
// expected t4[ 28 ]
initial
begin
	t4_expected[28] = 1'bX;
end 
// expected t4[ 27 ]
initial
begin
	t4_expected[27] = 1'bX;
end 
// expected t4[ 26 ]
initial
begin
	t4_expected[26] = 1'bX;
end 
// expected t4[ 25 ]
initial
begin
	t4_expected[25] = 1'bX;
end 
// expected t4[ 24 ]
initial
begin
	t4_expected[24] = 1'bX;
end 
// expected t4[ 23 ]
initial
begin
	t4_expected[23] = 1'bX;
end 
// expected t4[ 22 ]
initial
begin
	t4_expected[22] = 1'bX;
end 
// expected t4[ 21 ]
initial
begin
	t4_expected[21] = 1'bX;
end 
// expected t4[ 20 ]
initial
begin
	t4_expected[20] = 1'bX;
end 
// expected t4[ 19 ]
initial
begin
	t4_expected[19] = 1'bX;
end 
// expected t4[ 18 ]
initial
begin
	t4_expected[18] = 1'bX;
end 
// expected t4[ 17 ]
initial
begin
	t4_expected[17] = 1'bX;
end 
// expected t4[ 16 ]
initial
begin
	t4_expected[16] = 1'bX;
end 
// expected t4[ 15 ]
initial
begin
	t4_expected[15] = 1'bX;
end 
// expected t4[ 14 ]
initial
begin
	t4_expected[14] = 1'bX;
end 
// expected t4[ 13 ]
initial
begin
	t4_expected[13] = 1'bX;
end 
// expected t4[ 12 ]
initial
begin
	t4_expected[12] = 1'bX;
end 
// expected t4[ 11 ]
initial
begin
	t4_expected[11] = 1'bX;
end 
// expected t4[ 10 ]
initial
begin
	t4_expected[10] = 1'bX;
end 
// expected t4[ 9 ]
initial
begin
	t4_expected[9] = 1'bX;
end 
// expected t4[ 8 ]
initial
begin
	t4_expected[8] = 1'bX;
end 
// expected t4[ 7 ]
initial
begin
	t4_expected[7] = 1'bX;
end 
// expected t4[ 6 ]
initial
begin
	t4_expected[6] = 1'bX;
end 
// expected t4[ 5 ]
initial
begin
	t4_expected[5] = 1'bX;
end 
// expected t4[ 4 ]
initial
begin
	t4_expected[4] = 1'bX;
end 
// expected t4[ 3 ]
initial
begin
	t4_expected[3] = 1'bX;
end 
// expected t4[ 2 ]
initial
begin
	t4_expected[2] = 1'bX;
end 
// expected t4[ 1 ]
initial
begin
	t4_expected[1] = 1'bX;
end 
// expected t4[ 0 ]
initial
begin
	t4_expected[0] = 1'bX;
end 
// expected ULAA[ 31 ]
initial
begin
	ULAA_expected[31] = 1'bX;
end 
// expected ULAA[ 30 ]
initial
begin
	ULAA_expected[30] = 1'bX;
end 
// expected ULAA[ 29 ]
initial
begin
	ULAA_expected[29] = 1'bX;
end 
// expected ULAA[ 28 ]
initial
begin
	ULAA_expected[28] = 1'bX;
end 
// expected ULAA[ 27 ]
initial
begin
	ULAA_expected[27] = 1'bX;
end 
// expected ULAA[ 26 ]
initial
begin
	ULAA_expected[26] = 1'bX;
end 
// expected ULAA[ 25 ]
initial
begin
	ULAA_expected[25] = 1'bX;
end 
// expected ULAA[ 24 ]
initial
begin
	ULAA_expected[24] = 1'bX;
end 
// expected ULAA[ 23 ]
initial
begin
	ULAA_expected[23] = 1'bX;
end 
// expected ULAA[ 22 ]
initial
begin
	ULAA_expected[22] = 1'bX;
end 
// expected ULAA[ 21 ]
initial
begin
	ULAA_expected[21] = 1'bX;
end 
// expected ULAA[ 20 ]
initial
begin
	ULAA_expected[20] = 1'bX;
end 
// expected ULAA[ 19 ]
initial
begin
	ULAA_expected[19] = 1'bX;
end 
// expected ULAA[ 18 ]
initial
begin
	ULAA_expected[18] = 1'bX;
end 
// expected ULAA[ 17 ]
initial
begin
	ULAA_expected[17] = 1'bX;
end 
// expected ULAA[ 16 ]
initial
begin
	ULAA_expected[16] = 1'bX;
end 
// expected ULAA[ 15 ]
initial
begin
	ULAA_expected[15] = 1'bX;
end 
// expected ULAA[ 14 ]
initial
begin
	ULAA_expected[14] = 1'bX;
end 
// expected ULAA[ 13 ]
initial
begin
	ULAA_expected[13] = 1'bX;
end 
// expected ULAA[ 12 ]
initial
begin
	ULAA_expected[12] = 1'bX;
end 
// expected ULAA[ 11 ]
initial
begin
	ULAA_expected[11] = 1'bX;
end 
// expected ULAA[ 10 ]
initial
begin
	ULAA_expected[10] = 1'bX;
end 
// expected ULAA[ 9 ]
initial
begin
	ULAA_expected[9] = 1'bX;
end 
// expected ULAA[ 8 ]
initial
begin
	ULAA_expected[8] = 1'bX;
end 
// expected ULAA[ 7 ]
initial
begin
	ULAA_expected[7] = 1'bX;
end 
// expected ULAA[ 6 ]
initial
begin
	ULAA_expected[6] = 1'bX;
end 
// expected ULAA[ 5 ]
initial
begin
	ULAA_expected[5] = 1'bX;
end 
// expected ULAA[ 4 ]
initial
begin
	ULAA_expected[4] = 1'bX;
end 
// expected ULAA[ 3 ]
initial
begin
	ULAA_expected[3] = 1'bX;
end 
// expected ULAA[ 2 ]
initial
begin
	ULAA_expected[2] = 1'bX;
end 
// expected ULAA[ 1 ]
initial
begin
	ULAA_expected[1] = 1'bX;
end 
// expected ULAA[ 0 ]
initial
begin
	ULAA_expected[0] = 1'bX;
end 
// expected ULAB[ 31 ]
initial
begin
	ULAB_expected[31] = 1'bX;
end 
// expected ULAB[ 30 ]
initial
begin
	ULAB_expected[30] = 1'bX;
end 
// expected ULAB[ 29 ]
initial
begin
	ULAB_expected[29] = 1'bX;
end 
// expected ULAB[ 28 ]
initial
begin
	ULAB_expected[28] = 1'bX;
end 
// expected ULAB[ 27 ]
initial
begin
	ULAB_expected[27] = 1'bX;
end 
// expected ULAB[ 26 ]
initial
begin
	ULAB_expected[26] = 1'bX;
end 
// expected ULAB[ 25 ]
initial
begin
	ULAB_expected[25] = 1'bX;
end 
// expected ULAB[ 24 ]
initial
begin
	ULAB_expected[24] = 1'bX;
end 
// expected ULAB[ 23 ]
initial
begin
	ULAB_expected[23] = 1'bX;
end 
// expected ULAB[ 22 ]
initial
begin
	ULAB_expected[22] = 1'bX;
end 
// expected ULAB[ 21 ]
initial
begin
	ULAB_expected[21] = 1'bX;
end 
// expected ULAB[ 20 ]
initial
begin
	ULAB_expected[20] = 1'bX;
end 
// expected ULAB[ 19 ]
initial
begin
	ULAB_expected[19] = 1'bX;
end 
// expected ULAB[ 18 ]
initial
begin
	ULAB_expected[18] = 1'bX;
end 
// expected ULAB[ 17 ]
initial
begin
	ULAB_expected[17] = 1'bX;
end 
// expected ULAB[ 16 ]
initial
begin
	ULAB_expected[16] = 1'bX;
end 
// expected ULAB[ 15 ]
initial
begin
	ULAB_expected[15] = 1'bX;
end 
// expected ULAB[ 14 ]
initial
begin
	ULAB_expected[14] = 1'bX;
end 
// expected ULAB[ 13 ]
initial
begin
	ULAB_expected[13] = 1'bX;
end 
// expected ULAB[ 12 ]
initial
begin
	ULAB_expected[12] = 1'bX;
end 
// expected ULAB[ 11 ]
initial
begin
	ULAB_expected[11] = 1'bX;
end 
// expected ULAB[ 10 ]
initial
begin
	ULAB_expected[10] = 1'bX;
end 
// expected ULAB[ 9 ]
initial
begin
	ULAB_expected[9] = 1'bX;
end 
// expected ULAB[ 8 ]
initial
begin
	ULAB_expected[8] = 1'bX;
end 
// expected ULAB[ 7 ]
initial
begin
	ULAB_expected[7] = 1'bX;
end 
// expected ULAB[ 6 ]
initial
begin
	ULAB_expected[6] = 1'bX;
end 
// expected ULAB[ 5 ]
initial
begin
	ULAB_expected[5] = 1'bX;
end 
// expected ULAB[ 4 ]
initial
begin
	ULAB_expected[4] = 1'bX;
end 
// expected ULAB[ 3 ]
initial
begin
	ULAB_expected[3] = 1'bX;
end 
// expected ULAB[ 2 ]
initial
begin
	ULAB_expected[2] = 1'bX;
end 
// expected ULAB[ 1 ]
initial
begin
	ULAB_expected[1] = 1'bX;
end 
// expected ULAB[ 0 ]
initial
begin
	ULAB_expected[0] = 1'bX;
end 
// expected ULAOPCODE[ 3 ]
initial
begin
	ULAOPCODE_expected[3] = 1'bX;
end 
// expected ULAOPCODE[ 2 ]
initial
begin
	ULAOPCODE_expected[2] = 1'bX;
end 
// expected ULAOPCODE[ 1 ]
initial
begin
	ULAOPCODE_expected[1] = 1'bX;
end 
// expected ULAOPCODE[ 0 ]
initial
begin
	ULAOPCODE_expected[0] = 1'bX;
end 

// expected UnknownOpcode
initial
begin
	UnknownOpcode_expected = 1'bX;
end 
// expected zero[ 31 ]
initial
begin
	zero_expected[31] = 1'bX;
end 
// expected zero[ 30 ]
initial
begin
	zero_expected[30] = 1'bX;
end 
// expected zero[ 29 ]
initial
begin
	zero_expected[29] = 1'bX;
end 
// expected zero[ 28 ]
initial
begin
	zero_expected[28] = 1'bX;
end 
// expected zero[ 27 ]
initial
begin
	zero_expected[27] = 1'bX;
end 
// expected zero[ 26 ]
initial
begin
	zero_expected[26] = 1'bX;
end 
// expected zero[ 25 ]
initial
begin
	zero_expected[25] = 1'bX;
end 
// expected zero[ 24 ]
initial
begin
	zero_expected[24] = 1'bX;
end 
// expected zero[ 23 ]
initial
begin
	zero_expected[23] = 1'bX;
end 
// expected zero[ 22 ]
initial
begin
	zero_expected[22] = 1'bX;
end 
// expected zero[ 21 ]
initial
begin
	zero_expected[21] = 1'bX;
end 
// expected zero[ 20 ]
initial
begin
	zero_expected[20] = 1'bX;
end 
// expected zero[ 19 ]
initial
begin
	zero_expected[19] = 1'bX;
end 
// expected zero[ 18 ]
initial
begin
	zero_expected[18] = 1'bX;
end 
// expected zero[ 17 ]
initial
begin
	zero_expected[17] = 1'bX;
end 
// expected zero[ 16 ]
initial
begin
	zero_expected[16] = 1'bX;
end 
// expected zero[ 15 ]
initial
begin
	zero_expected[15] = 1'bX;
end 
// expected zero[ 14 ]
initial
begin
	zero_expected[14] = 1'bX;
end 
// expected zero[ 13 ]
initial
begin
	zero_expected[13] = 1'bX;
end 
// expected zero[ 12 ]
initial
begin
	zero_expected[12] = 1'bX;
end 
// expected zero[ 11 ]
initial
begin
	zero_expected[11] = 1'bX;
end 
// expected zero[ 10 ]
initial
begin
	zero_expected[10] = 1'bX;
end 
// expected zero[ 9 ]
initial
begin
	zero_expected[9] = 1'bX;
end 
// expected zero[ 8 ]
initial
begin
	zero_expected[8] = 1'bX;
end 
// expected zero[ 7 ]
initial
begin
	zero_expected[7] = 1'bX;
end 
// expected zero[ 6 ]
initial
begin
	zero_expected[6] = 1'bX;
end 
// expected zero[ 5 ]
initial
begin
	zero_expected[5] = 1'bX;
end 
// expected zero[ 4 ]
initial
begin
	zero_expected[4] = 1'bX;
end 
// expected zero[ 3 ]
initial
begin
	zero_expected[3] = 1'bX;
end 
// expected zero[ 2 ]
initial
begin
	zero_expected[2] = 1'bX;
end 
// expected zero[ 1 ]
initial
begin
	zero_expected[1] = 1'bX;
end 
// expected zero[ 0 ]
initial
begin
	zero_expected[0] = 1'bX;
end 
// generate trigger
always @(at_expected or at or Clock_expected or Clock or CONVERTEDADDR_expected or CONVERTEDADDR or INSTRUCAO_expected or INSTRUCAO or IROUTPUT_expected or IROUTPUT or JR_expected or JR or Jump_expected or Jump or OVERFLOW_expected or OVERFLOW or PC_expected or PC or ra_expected or ra or RULA_expected or RULA or t0_expected or t0 or t1_expected or t1 or t2_expected or t2 or t3_expected or t3 or t4_expected or t4 or ULAA_expected or ULAA or ULAB_expected or ULAB or ULAOPCODE_expected or ULAOPCODE or UnknownOpcode_expected or UnknownOpcode or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected at = %b | expected Clock = %b | expected CONVERTEDADDR = %b | expected INSTRUCAO = %b | expected IROUTPUT = %b | expected JR = %b | expected Jump = %b | expected OVERFLOW = %b | expected PC = %b | expected ra = %b | expected RULA = %b | expected t0 = %b | expected t1 = %b | expected t2 = %b | expected t3 = %b | expected t4 = %b | expected ULAA = %b | expected ULAB = %b | expected ULAOPCODE = %b | expected UnknownOpcode = %b | expected zero = %b | ",at_expected_prev,Clock_expected_prev,CONVERTEDADDR_expected_prev,INSTRUCAO_expected_prev,IROUTPUT_expected_prev,JR_expected_prev,Jump_expected_prev,OVERFLOW_expected_prev,PC_expected_prev,ra_expected_prev,RULA_expected_prev,t0_expected_prev,t1_expected_prev,t2_expected_prev,t3_expected_prev,t4_expected_prev,ULAA_expected_prev,ULAB_expected_prev,ULAOPCODE_expected_prev,UnknownOpcode_expected_prev,zero_expected_prev);
	$display("| real at = %b | real Clock = %b | real CONVERTEDADDR = %b | real INSTRUCAO = %b | real IROUTPUT = %b | real JR = %b | real Jump = %b | real OVERFLOW = %b | real PC = %b | real ra = %b | real RULA = %b | real t0 = %b | real t1 = %b | real t2 = %b | real t3 = %b | real t4 = %b | real ULAA = %b | real ULAB = %b | real ULAOPCODE = %b | real UnknownOpcode = %b | real zero = %b | ",at_prev,Clock_prev,CONVERTEDADDR_prev,INSTRUCAO_prev,IROUTPUT_prev,JR_prev,Jump_prev,OVERFLOW_prev,PC_prev,ra_prev,RULA_prev,t0_prev,t1_prev,t2_prev,t3_prev,t4_prev,ULAA_prev,ULAB_prev,ULAOPCODE_prev,UnknownOpcode_prev,zero_prev);
`endif
	if (
		( at_expected_prev[0] !== 1'bx ) && ( at_prev[0] !== at_expected_prev[0] )
		&& ((at_expected_prev[0] !== last_at_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[0] = at_expected_prev[0];
	end
	if (
		( at_expected_prev[1] !== 1'bx ) && ( at_prev[1] !== at_expected_prev[1] )
		&& ((at_expected_prev[1] !== last_at_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[1] = at_expected_prev[1];
	end
	if (
		( at_expected_prev[2] !== 1'bx ) && ( at_prev[2] !== at_expected_prev[2] )
		&& ((at_expected_prev[2] !== last_at_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[2] = at_expected_prev[2];
	end
	if (
		( at_expected_prev[3] !== 1'bx ) && ( at_prev[3] !== at_expected_prev[3] )
		&& ((at_expected_prev[3] !== last_at_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[3] = at_expected_prev[3];
	end
	if (
		( at_expected_prev[4] !== 1'bx ) && ( at_prev[4] !== at_expected_prev[4] )
		&& ((at_expected_prev[4] !== last_at_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[4] = at_expected_prev[4];
	end
	if (
		( at_expected_prev[5] !== 1'bx ) && ( at_prev[5] !== at_expected_prev[5] )
		&& ((at_expected_prev[5] !== last_at_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[5] = at_expected_prev[5];
	end
	if (
		( at_expected_prev[6] !== 1'bx ) && ( at_prev[6] !== at_expected_prev[6] )
		&& ((at_expected_prev[6] !== last_at_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[6] = at_expected_prev[6];
	end
	if (
		( at_expected_prev[7] !== 1'bx ) && ( at_prev[7] !== at_expected_prev[7] )
		&& ((at_expected_prev[7] !== last_at_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[7] = at_expected_prev[7];
	end
	if (
		( at_expected_prev[8] !== 1'bx ) && ( at_prev[8] !== at_expected_prev[8] )
		&& ((at_expected_prev[8] !== last_at_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[8] = at_expected_prev[8];
	end
	if (
		( at_expected_prev[9] !== 1'bx ) && ( at_prev[9] !== at_expected_prev[9] )
		&& ((at_expected_prev[9] !== last_at_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[9] = at_expected_prev[9];
	end
	if (
		( at_expected_prev[10] !== 1'bx ) && ( at_prev[10] !== at_expected_prev[10] )
		&& ((at_expected_prev[10] !== last_at_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[10] = at_expected_prev[10];
	end
	if (
		( at_expected_prev[11] !== 1'bx ) && ( at_prev[11] !== at_expected_prev[11] )
		&& ((at_expected_prev[11] !== last_at_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[11] = at_expected_prev[11];
	end
	if (
		( at_expected_prev[12] !== 1'bx ) && ( at_prev[12] !== at_expected_prev[12] )
		&& ((at_expected_prev[12] !== last_at_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[12] = at_expected_prev[12];
	end
	if (
		( at_expected_prev[13] !== 1'bx ) && ( at_prev[13] !== at_expected_prev[13] )
		&& ((at_expected_prev[13] !== last_at_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[13] = at_expected_prev[13];
	end
	if (
		( at_expected_prev[14] !== 1'bx ) && ( at_prev[14] !== at_expected_prev[14] )
		&& ((at_expected_prev[14] !== last_at_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[14] = at_expected_prev[14];
	end
	if (
		( at_expected_prev[15] !== 1'bx ) && ( at_prev[15] !== at_expected_prev[15] )
		&& ((at_expected_prev[15] !== last_at_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[15] = at_expected_prev[15];
	end
	if (
		( at_expected_prev[16] !== 1'bx ) && ( at_prev[16] !== at_expected_prev[16] )
		&& ((at_expected_prev[16] !== last_at_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[16] = at_expected_prev[16];
	end
	if (
		( at_expected_prev[17] !== 1'bx ) && ( at_prev[17] !== at_expected_prev[17] )
		&& ((at_expected_prev[17] !== last_at_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[17] = at_expected_prev[17];
	end
	if (
		( at_expected_prev[18] !== 1'bx ) && ( at_prev[18] !== at_expected_prev[18] )
		&& ((at_expected_prev[18] !== last_at_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[18] = at_expected_prev[18];
	end
	if (
		( at_expected_prev[19] !== 1'bx ) && ( at_prev[19] !== at_expected_prev[19] )
		&& ((at_expected_prev[19] !== last_at_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[19] = at_expected_prev[19];
	end
	if (
		( at_expected_prev[20] !== 1'bx ) && ( at_prev[20] !== at_expected_prev[20] )
		&& ((at_expected_prev[20] !== last_at_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[20] = at_expected_prev[20];
	end
	if (
		( at_expected_prev[21] !== 1'bx ) && ( at_prev[21] !== at_expected_prev[21] )
		&& ((at_expected_prev[21] !== last_at_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[21] = at_expected_prev[21];
	end
	if (
		( at_expected_prev[22] !== 1'bx ) && ( at_prev[22] !== at_expected_prev[22] )
		&& ((at_expected_prev[22] !== last_at_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[22] = at_expected_prev[22];
	end
	if (
		( at_expected_prev[23] !== 1'bx ) && ( at_prev[23] !== at_expected_prev[23] )
		&& ((at_expected_prev[23] !== last_at_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[23] = at_expected_prev[23];
	end
	if (
		( at_expected_prev[24] !== 1'bx ) && ( at_prev[24] !== at_expected_prev[24] )
		&& ((at_expected_prev[24] !== last_at_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[24] = at_expected_prev[24];
	end
	if (
		( at_expected_prev[25] !== 1'bx ) && ( at_prev[25] !== at_expected_prev[25] )
		&& ((at_expected_prev[25] !== last_at_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[25] = at_expected_prev[25];
	end
	if (
		( at_expected_prev[26] !== 1'bx ) && ( at_prev[26] !== at_expected_prev[26] )
		&& ((at_expected_prev[26] !== last_at_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[26] = at_expected_prev[26];
	end
	if (
		( at_expected_prev[27] !== 1'bx ) && ( at_prev[27] !== at_expected_prev[27] )
		&& ((at_expected_prev[27] !== last_at_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[27] = at_expected_prev[27];
	end
	if (
		( at_expected_prev[28] !== 1'bx ) && ( at_prev[28] !== at_expected_prev[28] )
		&& ((at_expected_prev[28] !== last_at_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[28] = at_expected_prev[28];
	end
	if (
		( at_expected_prev[29] !== 1'bx ) && ( at_prev[29] !== at_expected_prev[29] )
		&& ((at_expected_prev[29] !== last_at_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[29] = at_expected_prev[29];
	end
	if (
		( at_expected_prev[30] !== 1'bx ) && ( at_prev[30] !== at_expected_prev[30] )
		&& ((at_expected_prev[30] !== last_at_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[30] = at_expected_prev[30];
	end
	if (
		( at_expected_prev[31] !== 1'bx ) && ( at_prev[31] !== at_expected_prev[31] )
		&& ((at_expected_prev[31] !== last_at_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port at[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", at_expected_prev);
		$display ("     Real value = %b", at_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_at_exp[31] = at_expected_prev[31];
	end
	if (
		( Clock_expected_prev !== 1'bx ) && ( Clock_prev !== Clock_expected_prev )
		&& ((Clock_expected_prev !== last_Clock_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Clock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Clock_expected_prev);
		$display ("     Real value = %b", Clock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Clock_exp = Clock_expected_prev;
	end
	if (
		( CONVERTEDADDR_expected_prev[0] !== 1'bx ) && ( CONVERTEDADDR_prev[0] !== CONVERTEDADDR_expected_prev[0] )
		&& ((CONVERTEDADDR_expected_prev[0] !== last_CONVERTEDADDR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[0] = CONVERTEDADDR_expected_prev[0];
	end
	if (
		( CONVERTEDADDR_expected_prev[1] !== 1'bx ) && ( CONVERTEDADDR_prev[1] !== CONVERTEDADDR_expected_prev[1] )
		&& ((CONVERTEDADDR_expected_prev[1] !== last_CONVERTEDADDR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[1] = CONVERTEDADDR_expected_prev[1];
	end
	if (
		( CONVERTEDADDR_expected_prev[2] !== 1'bx ) && ( CONVERTEDADDR_prev[2] !== CONVERTEDADDR_expected_prev[2] )
		&& ((CONVERTEDADDR_expected_prev[2] !== last_CONVERTEDADDR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[2] = CONVERTEDADDR_expected_prev[2];
	end
	if (
		( CONVERTEDADDR_expected_prev[3] !== 1'bx ) && ( CONVERTEDADDR_prev[3] !== CONVERTEDADDR_expected_prev[3] )
		&& ((CONVERTEDADDR_expected_prev[3] !== last_CONVERTEDADDR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[3] = CONVERTEDADDR_expected_prev[3];
	end
	if (
		( CONVERTEDADDR_expected_prev[4] !== 1'bx ) && ( CONVERTEDADDR_prev[4] !== CONVERTEDADDR_expected_prev[4] )
		&& ((CONVERTEDADDR_expected_prev[4] !== last_CONVERTEDADDR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[4] = CONVERTEDADDR_expected_prev[4];
	end
	if (
		( CONVERTEDADDR_expected_prev[5] !== 1'bx ) && ( CONVERTEDADDR_prev[5] !== CONVERTEDADDR_expected_prev[5] )
		&& ((CONVERTEDADDR_expected_prev[5] !== last_CONVERTEDADDR_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[5] = CONVERTEDADDR_expected_prev[5];
	end
	if (
		( CONVERTEDADDR_expected_prev[6] !== 1'bx ) && ( CONVERTEDADDR_prev[6] !== CONVERTEDADDR_expected_prev[6] )
		&& ((CONVERTEDADDR_expected_prev[6] !== last_CONVERTEDADDR_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[6] = CONVERTEDADDR_expected_prev[6];
	end
	if (
		( CONVERTEDADDR_expected_prev[7] !== 1'bx ) && ( CONVERTEDADDR_prev[7] !== CONVERTEDADDR_expected_prev[7] )
		&& ((CONVERTEDADDR_expected_prev[7] !== last_CONVERTEDADDR_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[7] = CONVERTEDADDR_expected_prev[7];
	end
	if (
		( CONVERTEDADDR_expected_prev[8] !== 1'bx ) && ( CONVERTEDADDR_prev[8] !== CONVERTEDADDR_expected_prev[8] )
		&& ((CONVERTEDADDR_expected_prev[8] !== last_CONVERTEDADDR_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[8] = CONVERTEDADDR_expected_prev[8];
	end
	if (
		( CONVERTEDADDR_expected_prev[9] !== 1'bx ) && ( CONVERTEDADDR_prev[9] !== CONVERTEDADDR_expected_prev[9] )
		&& ((CONVERTEDADDR_expected_prev[9] !== last_CONVERTEDADDR_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[9] = CONVERTEDADDR_expected_prev[9];
	end
	if (
		( CONVERTEDADDR_expected_prev[10] !== 1'bx ) && ( CONVERTEDADDR_prev[10] !== CONVERTEDADDR_expected_prev[10] )
		&& ((CONVERTEDADDR_expected_prev[10] !== last_CONVERTEDADDR_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[10] = CONVERTEDADDR_expected_prev[10];
	end
	if (
		( CONVERTEDADDR_expected_prev[11] !== 1'bx ) && ( CONVERTEDADDR_prev[11] !== CONVERTEDADDR_expected_prev[11] )
		&& ((CONVERTEDADDR_expected_prev[11] !== last_CONVERTEDADDR_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[11] = CONVERTEDADDR_expected_prev[11];
	end
	if (
		( CONVERTEDADDR_expected_prev[12] !== 1'bx ) && ( CONVERTEDADDR_prev[12] !== CONVERTEDADDR_expected_prev[12] )
		&& ((CONVERTEDADDR_expected_prev[12] !== last_CONVERTEDADDR_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[12] = CONVERTEDADDR_expected_prev[12];
	end
	if (
		( CONVERTEDADDR_expected_prev[13] !== 1'bx ) && ( CONVERTEDADDR_prev[13] !== CONVERTEDADDR_expected_prev[13] )
		&& ((CONVERTEDADDR_expected_prev[13] !== last_CONVERTEDADDR_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CONVERTEDADDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CONVERTEDADDR_expected_prev);
		$display ("     Real value = %b", CONVERTEDADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CONVERTEDADDR_exp[13] = CONVERTEDADDR_expected_prev[13];
	end
	if (
		( INSTRUCAO_expected_prev[0] !== 1'bx ) && ( INSTRUCAO_prev[0] !== INSTRUCAO_expected_prev[0] )
		&& ((INSTRUCAO_expected_prev[0] !== last_INSTRUCAO_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[0] = INSTRUCAO_expected_prev[0];
	end
	if (
		( INSTRUCAO_expected_prev[1] !== 1'bx ) && ( INSTRUCAO_prev[1] !== INSTRUCAO_expected_prev[1] )
		&& ((INSTRUCAO_expected_prev[1] !== last_INSTRUCAO_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[1] = INSTRUCAO_expected_prev[1];
	end
	if (
		( INSTRUCAO_expected_prev[2] !== 1'bx ) && ( INSTRUCAO_prev[2] !== INSTRUCAO_expected_prev[2] )
		&& ((INSTRUCAO_expected_prev[2] !== last_INSTRUCAO_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[2] = INSTRUCAO_expected_prev[2];
	end
	if (
		( INSTRUCAO_expected_prev[3] !== 1'bx ) && ( INSTRUCAO_prev[3] !== INSTRUCAO_expected_prev[3] )
		&& ((INSTRUCAO_expected_prev[3] !== last_INSTRUCAO_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[3] = INSTRUCAO_expected_prev[3];
	end
	if (
		( INSTRUCAO_expected_prev[4] !== 1'bx ) && ( INSTRUCAO_prev[4] !== INSTRUCAO_expected_prev[4] )
		&& ((INSTRUCAO_expected_prev[4] !== last_INSTRUCAO_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[4] = INSTRUCAO_expected_prev[4];
	end
	if (
		( INSTRUCAO_expected_prev[5] !== 1'bx ) && ( INSTRUCAO_prev[5] !== INSTRUCAO_expected_prev[5] )
		&& ((INSTRUCAO_expected_prev[5] !== last_INSTRUCAO_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[5] = INSTRUCAO_expected_prev[5];
	end
	if (
		( INSTRUCAO_expected_prev[6] !== 1'bx ) && ( INSTRUCAO_prev[6] !== INSTRUCAO_expected_prev[6] )
		&& ((INSTRUCAO_expected_prev[6] !== last_INSTRUCAO_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[6] = INSTRUCAO_expected_prev[6];
	end
	if (
		( INSTRUCAO_expected_prev[7] !== 1'bx ) && ( INSTRUCAO_prev[7] !== INSTRUCAO_expected_prev[7] )
		&& ((INSTRUCAO_expected_prev[7] !== last_INSTRUCAO_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[7] = INSTRUCAO_expected_prev[7];
	end
	if (
		( INSTRUCAO_expected_prev[8] !== 1'bx ) && ( INSTRUCAO_prev[8] !== INSTRUCAO_expected_prev[8] )
		&& ((INSTRUCAO_expected_prev[8] !== last_INSTRUCAO_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[8] = INSTRUCAO_expected_prev[8];
	end
	if (
		( INSTRUCAO_expected_prev[9] !== 1'bx ) && ( INSTRUCAO_prev[9] !== INSTRUCAO_expected_prev[9] )
		&& ((INSTRUCAO_expected_prev[9] !== last_INSTRUCAO_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[9] = INSTRUCAO_expected_prev[9];
	end
	if (
		( INSTRUCAO_expected_prev[10] !== 1'bx ) && ( INSTRUCAO_prev[10] !== INSTRUCAO_expected_prev[10] )
		&& ((INSTRUCAO_expected_prev[10] !== last_INSTRUCAO_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[10] = INSTRUCAO_expected_prev[10];
	end
	if (
		( INSTRUCAO_expected_prev[11] !== 1'bx ) && ( INSTRUCAO_prev[11] !== INSTRUCAO_expected_prev[11] )
		&& ((INSTRUCAO_expected_prev[11] !== last_INSTRUCAO_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[11] = INSTRUCAO_expected_prev[11];
	end
	if (
		( INSTRUCAO_expected_prev[12] !== 1'bx ) && ( INSTRUCAO_prev[12] !== INSTRUCAO_expected_prev[12] )
		&& ((INSTRUCAO_expected_prev[12] !== last_INSTRUCAO_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[12] = INSTRUCAO_expected_prev[12];
	end
	if (
		( INSTRUCAO_expected_prev[13] !== 1'bx ) && ( INSTRUCAO_prev[13] !== INSTRUCAO_expected_prev[13] )
		&& ((INSTRUCAO_expected_prev[13] !== last_INSTRUCAO_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[13] = INSTRUCAO_expected_prev[13];
	end
	if (
		( INSTRUCAO_expected_prev[14] !== 1'bx ) && ( INSTRUCAO_prev[14] !== INSTRUCAO_expected_prev[14] )
		&& ((INSTRUCAO_expected_prev[14] !== last_INSTRUCAO_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[14] = INSTRUCAO_expected_prev[14];
	end
	if (
		( INSTRUCAO_expected_prev[15] !== 1'bx ) && ( INSTRUCAO_prev[15] !== INSTRUCAO_expected_prev[15] )
		&& ((INSTRUCAO_expected_prev[15] !== last_INSTRUCAO_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[15] = INSTRUCAO_expected_prev[15];
	end
	if (
		( INSTRUCAO_expected_prev[16] !== 1'bx ) && ( INSTRUCAO_prev[16] !== INSTRUCAO_expected_prev[16] )
		&& ((INSTRUCAO_expected_prev[16] !== last_INSTRUCAO_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[16] = INSTRUCAO_expected_prev[16];
	end
	if (
		( INSTRUCAO_expected_prev[17] !== 1'bx ) && ( INSTRUCAO_prev[17] !== INSTRUCAO_expected_prev[17] )
		&& ((INSTRUCAO_expected_prev[17] !== last_INSTRUCAO_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[17] = INSTRUCAO_expected_prev[17];
	end
	if (
		( INSTRUCAO_expected_prev[18] !== 1'bx ) && ( INSTRUCAO_prev[18] !== INSTRUCAO_expected_prev[18] )
		&& ((INSTRUCAO_expected_prev[18] !== last_INSTRUCAO_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[18] = INSTRUCAO_expected_prev[18];
	end
	if (
		( INSTRUCAO_expected_prev[19] !== 1'bx ) && ( INSTRUCAO_prev[19] !== INSTRUCAO_expected_prev[19] )
		&& ((INSTRUCAO_expected_prev[19] !== last_INSTRUCAO_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[19] = INSTRUCAO_expected_prev[19];
	end
	if (
		( INSTRUCAO_expected_prev[20] !== 1'bx ) && ( INSTRUCAO_prev[20] !== INSTRUCAO_expected_prev[20] )
		&& ((INSTRUCAO_expected_prev[20] !== last_INSTRUCAO_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[20] = INSTRUCAO_expected_prev[20];
	end
	if (
		( INSTRUCAO_expected_prev[21] !== 1'bx ) && ( INSTRUCAO_prev[21] !== INSTRUCAO_expected_prev[21] )
		&& ((INSTRUCAO_expected_prev[21] !== last_INSTRUCAO_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[21] = INSTRUCAO_expected_prev[21];
	end
	if (
		( INSTRUCAO_expected_prev[22] !== 1'bx ) && ( INSTRUCAO_prev[22] !== INSTRUCAO_expected_prev[22] )
		&& ((INSTRUCAO_expected_prev[22] !== last_INSTRUCAO_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[22] = INSTRUCAO_expected_prev[22];
	end
	if (
		( INSTRUCAO_expected_prev[23] !== 1'bx ) && ( INSTRUCAO_prev[23] !== INSTRUCAO_expected_prev[23] )
		&& ((INSTRUCAO_expected_prev[23] !== last_INSTRUCAO_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[23] = INSTRUCAO_expected_prev[23];
	end
	if (
		( INSTRUCAO_expected_prev[24] !== 1'bx ) && ( INSTRUCAO_prev[24] !== INSTRUCAO_expected_prev[24] )
		&& ((INSTRUCAO_expected_prev[24] !== last_INSTRUCAO_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[24] = INSTRUCAO_expected_prev[24];
	end
	if (
		( INSTRUCAO_expected_prev[25] !== 1'bx ) && ( INSTRUCAO_prev[25] !== INSTRUCAO_expected_prev[25] )
		&& ((INSTRUCAO_expected_prev[25] !== last_INSTRUCAO_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[25] = INSTRUCAO_expected_prev[25];
	end
	if (
		( INSTRUCAO_expected_prev[26] !== 1'bx ) && ( INSTRUCAO_prev[26] !== INSTRUCAO_expected_prev[26] )
		&& ((INSTRUCAO_expected_prev[26] !== last_INSTRUCAO_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[26] = INSTRUCAO_expected_prev[26];
	end
	if (
		( INSTRUCAO_expected_prev[27] !== 1'bx ) && ( INSTRUCAO_prev[27] !== INSTRUCAO_expected_prev[27] )
		&& ((INSTRUCAO_expected_prev[27] !== last_INSTRUCAO_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[27] = INSTRUCAO_expected_prev[27];
	end
	if (
		( INSTRUCAO_expected_prev[28] !== 1'bx ) && ( INSTRUCAO_prev[28] !== INSTRUCAO_expected_prev[28] )
		&& ((INSTRUCAO_expected_prev[28] !== last_INSTRUCAO_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[28] = INSTRUCAO_expected_prev[28];
	end
	if (
		( INSTRUCAO_expected_prev[29] !== 1'bx ) && ( INSTRUCAO_prev[29] !== INSTRUCAO_expected_prev[29] )
		&& ((INSTRUCAO_expected_prev[29] !== last_INSTRUCAO_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[29] = INSTRUCAO_expected_prev[29];
	end
	if (
		( INSTRUCAO_expected_prev[30] !== 1'bx ) && ( INSTRUCAO_prev[30] !== INSTRUCAO_expected_prev[30] )
		&& ((INSTRUCAO_expected_prev[30] !== last_INSTRUCAO_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[30] = INSTRUCAO_expected_prev[30];
	end
	if (
		( INSTRUCAO_expected_prev[31] !== 1'bx ) && ( INSTRUCAO_prev[31] !== INSTRUCAO_expected_prev[31] )
		&& ((INSTRUCAO_expected_prev[31] !== last_INSTRUCAO_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INSTRUCAO_exp[31] = INSTRUCAO_expected_prev[31];
	end
	if (
		( IROUTPUT_expected_prev[0] !== 1'bx ) && ( IROUTPUT_prev[0] !== IROUTPUT_expected_prev[0] )
		&& ((IROUTPUT_expected_prev[0] !== last_IROUTPUT_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[0] = IROUTPUT_expected_prev[0];
	end
	if (
		( IROUTPUT_expected_prev[1] !== 1'bx ) && ( IROUTPUT_prev[1] !== IROUTPUT_expected_prev[1] )
		&& ((IROUTPUT_expected_prev[1] !== last_IROUTPUT_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[1] = IROUTPUT_expected_prev[1];
	end
	if (
		( IROUTPUT_expected_prev[2] !== 1'bx ) && ( IROUTPUT_prev[2] !== IROUTPUT_expected_prev[2] )
		&& ((IROUTPUT_expected_prev[2] !== last_IROUTPUT_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[2] = IROUTPUT_expected_prev[2];
	end
	if (
		( IROUTPUT_expected_prev[3] !== 1'bx ) && ( IROUTPUT_prev[3] !== IROUTPUT_expected_prev[3] )
		&& ((IROUTPUT_expected_prev[3] !== last_IROUTPUT_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[3] = IROUTPUT_expected_prev[3];
	end
	if (
		( IROUTPUT_expected_prev[4] !== 1'bx ) && ( IROUTPUT_prev[4] !== IROUTPUT_expected_prev[4] )
		&& ((IROUTPUT_expected_prev[4] !== last_IROUTPUT_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[4] = IROUTPUT_expected_prev[4];
	end
	if (
		( IROUTPUT_expected_prev[5] !== 1'bx ) && ( IROUTPUT_prev[5] !== IROUTPUT_expected_prev[5] )
		&& ((IROUTPUT_expected_prev[5] !== last_IROUTPUT_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[5] = IROUTPUT_expected_prev[5];
	end
	if (
		( IROUTPUT_expected_prev[6] !== 1'bx ) && ( IROUTPUT_prev[6] !== IROUTPUT_expected_prev[6] )
		&& ((IROUTPUT_expected_prev[6] !== last_IROUTPUT_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[6] = IROUTPUT_expected_prev[6];
	end
	if (
		( IROUTPUT_expected_prev[7] !== 1'bx ) && ( IROUTPUT_prev[7] !== IROUTPUT_expected_prev[7] )
		&& ((IROUTPUT_expected_prev[7] !== last_IROUTPUT_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[7] = IROUTPUT_expected_prev[7];
	end
	if (
		( IROUTPUT_expected_prev[8] !== 1'bx ) && ( IROUTPUT_prev[8] !== IROUTPUT_expected_prev[8] )
		&& ((IROUTPUT_expected_prev[8] !== last_IROUTPUT_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[8] = IROUTPUT_expected_prev[8];
	end
	if (
		( IROUTPUT_expected_prev[9] !== 1'bx ) && ( IROUTPUT_prev[9] !== IROUTPUT_expected_prev[9] )
		&& ((IROUTPUT_expected_prev[9] !== last_IROUTPUT_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[9] = IROUTPUT_expected_prev[9];
	end
	if (
		( IROUTPUT_expected_prev[10] !== 1'bx ) && ( IROUTPUT_prev[10] !== IROUTPUT_expected_prev[10] )
		&& ((IROUTPUT_expected_prev[10] !== last_IROUTPUT_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[10] = IROUTPUT_expected_prev[10];
	end
	if (
		( IROUTPUT_expected_prev[11] !== 1'bx ) && ( IROUTPUT_prev[11] !== IROUTPUT_expected_prev[11] )
		&& ((IROUTPUT_expected_prev[11] !== last_IROUTPUT_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[11] = IROUTPUT_expected_prev[11];
	end
	if (
		( IROUTPUT_expected_prev[12] !== 1'bx ) && ( IROUTPUT_prev[12] !== IROUTPUT_expected_prev[12] )
		&& ((IROUTPUT_expected_prev[12] !== last_IROUTPUT_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[12] = IROUTPUT_expected_prev[12];
	end
	if (
		( IROUTPUT_expected_prev[13] !== 1'bx ) && ( IROUTPUT_prev[13] !== IROUTPUT_expected_prev[13] )
		&& ((IROUTPUT_expected_prev[13] !== last_IROUTPUT_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[13] = IROUTPUT_expected_prev[13];
	end
	if (
		( IROUTPUT_expected_prev[14] !== 1'bx ) && ( IROUTPUT_prev[14] !== IROUTPUT_expected_prev[14] )
		&& ((IROUTPUT_expected_prev[14] !== last_IROUTPUT_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[14] = IROUTPUT_expected_prev[14];
	end
	if (
		( IROUTPUT_expected_prev[15] !== 1'bx ) && ( IROUTPUT_prev[15] !== IROUTPUT_expected_prev[15] )
		&& ((IROUTPUT_expected_prev[15] !== last_IROUTPUT_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[15] = IROUTPUT_expected_prev[15];
	end
	if (
		( IROUTPUT_expected_prev[16] !== 1'bx ) && ( IROUTPUT_prev[16] !== IROUTPUT_expected_prev[16] )
		&& ((IROUTPUT_expected_prev[16] !== last_IROUTPUT_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[16] = IROUTPUT_expected_prev[16];
	end
	if (
		( IROUTPUT_expected_prev[17] !== 1'bx ) && ( IROUTPUT_prev[17] !== IROUTPUT_expected_prev[17] )
		&& ((IROUTPUT_expected_prev[17] !== last_IROUTPUT_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[17] = IROUTPUT_expected_prev[17];
	end
	if (
		( IROUTPUT_expected_prev[18] !== 1'bx ) && ( IROUTPUT_prev[18] !== IROUTPUT_expected_prev[18] )
		&& ((IROUTPUT_expected_prev[18] !== last_IROUTPUT_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[18] = IROUTPUT_expected_prev[18];
	end
	if (
		( IROUTPUT_expected_prev[19] !== 1'bx ) && ( IROUTPUT_prev[19] !== IROUTPUT_expected_prev[19] )
		&& ((IROUTPUT_expected_prev[19] !== last_IROUTPUT_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[19] = IROUTPUT_expected_prev[19];
	end
	if (
		( IROUTPUT_expected_prev[20] !== 1'bx ) && ( IROUTPUT_prev[20] !== IROUTPUT_expected_prev[20] )
		&& ((IROUTPUT_expected_prev[20] !== last_IROUTPUT_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[20] = IROUTPUT_expected_prev[20];
	end
	if (
		( IROUTPUT_expected_prev[21] !== 1'bx ) && ( IROUTPUT_prev[21] !== IROUTPUT_expected_prev[21] )
		&& ((IROUTPUT_expected_prev[21] !== last_IROUTPUT_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[21] = IROUTPUT_expected_prev[21];
	end
	if (
		( IROUTPUT_expected_prev[22] !== 1'bx ) && ( IROUTPUT_prev[22] !== IROUTPUT_expected_prev[22] )
		&& ((IROUTPUT_expected_prev[22] !== last_IROUTPUT_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[22] = IROUTPUT_expected_prev[22];
	end
	if (
		( IROUTPUT_expected_prev[23] !== 1'bx ) && ( IROUTPUT_prev[23] !== IROUTPUT_expected_prev[23] )
		&& ((IROUTPUT_expected_prev[23] !== last_IROUTPUT_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[23] = IROUTPUT_expected_prev[23];
	end
	if (
		( IROUTPUT_expected_prev[24] !== 1'bx ) && ( IROUTPUT_prev[24] !== IROUTPUT_expected_prev[24] )
		&& ((IROUTPUT_expected_prev[24] !== last_IROUTPUT_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[24] = IROUTPUT_expected_prev[24];
	end
	if (
		( IROUTPUT_expected_prev[25] !== 1'bx ) && ( IROUTPUT_prev[25] !== IROUTPUT_expected_prev[25] )
		&& ((IROUTPUT_expected_prev[25] !== last_IROUTPUT_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[25] = IROUTPUT_expected_prev[25];
	end
	if (
		( IROUTPUT_expected_prev[26] !== 1'bx ) && ( IROUTPUT_prev[26] !== IROUTPUT_expected_prev[26] )
		&& ((IROUTPUT_expected_prev[26] !== last_IROUTPUT_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[26] = IROUTPUT_expected_prev[26];
	end
	if (
		( IROUTPUT_expected_prev[27] !== 1'bx ) && ( IROUTPUT_prev[27] !== IROUTPUT_expected_prev[27] )
		&& ((IROUTPUT_expected_prev[27] !== last_IROUTPUT_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[27] = IROUTPUT_expected_prev[27];
	end
	if (
		( IROUTPUT_expected_prev[28] !== 1'bx ) && ( IROUTPUT_prev[28] !== IROUTPUT_expected_prev[28] )
		&& ((IROUTPUT_expected_prev[28] !== last_IROUTPUT_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[28] = IROUTPUT_expected_prev[28];
	end
	if (
		( IROUTPUT_expected_prev[29] !== 1'bx ) && ( IROUTPUT_prev[29] !== IROUTPUT_expected_prev[29] )
		&& ((IROUTPUT_expected_prev[29] !== last_IROUTPUT_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[29] = IROUTPUT_expected_prev[29];
	end
	if (
		( IROUTPUT_expected_prev[30] !== 1'bx ) && ( IROUTPUT_prev[30] !== IROUTPUT_expected_prev[30] )
		&& ((IROUTPUT_expected_prev[30] !== last_IROUTPUT_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[30] = IROUTPUT_expected_prev[30];
	end
	if (
		( IROUTPUT_expected_prev[31] !== 1'bx ) && ( IROUTPUT_prev[31] !== IROUTPUT_expected_prev[31] )
		&& ((IROUTPUT_expected_prev[31] !== last_IROUTPUT_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IROUTPUT_exp[31] = IROUTPUT_expected_prev[31];
	end
	if (
		( JR_expected_prev !== 1'bx ) && ( JR_prev !== JR_expected_prev )
		&& ((JR_expected_prev !== last_JR_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port JR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", JR_expected_prev);
		$display ("     Real value = %b", JR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_JR_exp = JR_expected_prev;
	end
	if (
		( Jump_expected_prev !== 1'bx ) && ( Jump_prev !== Jump_expected_prev )
		&& ((Jump_expected_prev !== last_Jump_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Jump :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Jump_expected_prev);
		$display ("     Real value = %b", Jump_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Jump_exp = Jump_expected_prev;
	end
	if (
		( OVERFLOW_expected_prev !== 1'bx ) && ( OVERFLOW_prev !== OVERFLOW_expected_prev )
		&& ((OVERFLOW_expected_prev !== last_OVERFLOW_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVERFLOW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVERFLOW_expected_prev);
		$display ("     Real value = %b", OVERFLOW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OVERFLOW_exp = OVERFLOW_expected_prev;
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( ra_expected_prev[0] !== 1'bx ) && ( ra_prev[0] !== ra_expected_prev[0] )
		&& ((ra_expected_prev[0] !== last_ra_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[0] = ra_expected_prev[0];
	end
	if (
		( ra_expected_prev[1] !== 1'bx ) && ( ra_prev[1] !== ra_expected_prev[1] )
		&& ((ra_expected_prev[1] !== last_ra_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[1] = ra_expected_prev[1];
	end
	if (
		( ra_expected_prev[2] !== 1'bx ) && ( ra_prev[2] !== ra_expected_prev[2] )
		&& ((ra_expected_prev[2] !== last_ra_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[2] = ra_expected_prev[2];
	end
	if (
		( ra_expected_prev[3] !== 1'bx ) && ( ra_prev[3] !== ra_expected_prev[3] )
		&& ((ra_expected_prev[3] !== last_ra_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[3] = ra_expected_prev[3];
	end
	if (
		( ra_expected_prev[4] !== 1'bx ) && ( ra_prev[4] !== ra_expected_prev[4] )
		&& ((ra_expected_prev[4] !== last_ra_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[4] = ra_expected_prev[4];
	end
	if (
		( ra_expected_prev[5] !== 1'bx ) && ( ra_prev[5] !== ra_expected_prev[5] )
		&& ((ra_expected_prev[5] !== last_ra_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[5] = ra_expected_prev[5];
	end
	if (
		( ra_expected_prev[6] !== 1'bx ) && ( ra_prev[6] !== ra_expected_prev[6] )
		&& ((ra_expected_prev[6] !== last_ra_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[6] = ra_expected_prev[6];
	end
	if (
		( ra_expected_prev[7] !== 1'bx ) && ( ra_prev[7] !== ra_expected_prev[7] )
		&& ((ra_expected_prev[7] !== last_ra_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[7] = ra_expected_prev[7];
	end
	if (
		( ra_expected_prev[8] !== 1'bx ) && ( ra_prev[8] !== ra_expected_prev[8] )
		&& ((ra_expected_prev[8] !== last_ra_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[8] = ra_expected_prev[8];
	end
	if (
		( ra_expected_prev[9] !== 1'bx ) && ( ra_prev[9] !== ra_expected_prev[9] )
		&& ((ra_expected_prev[9] !== last_ra_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[9] = ra_expected_prev[9];
	end
	if (
		( ra_expected_prev[10] !== 1'bx ) && ( ra_prev[10] !== ra_expected_prev[10] )
		&& ((ra_expected_prev[10] !== last_ra_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[10] = ra_expected_prev[10];
	end
	if (
		( ra_expected_prev[11] !== 1'bx ) && ( ra_prev[11] !== ra_expected_prev[11] )
		&& ((ra_expected_prev[11] !== last_ra_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[11] = ra_expected_prev[11];
	end
	if (
		( ra_expected_prev[12] !== 1'bx ) && ( ra_prev[12] !== ra_expected_prev[12] )
		&& ((ra_expected_prev[12] !== last_ra_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[12] = ra_expected_prev[12];
	end
	if (
		( ra_expected_prev[13] !== 1'bx ) && ( ra_prev[13] !== ra_expected_prev[13] )
		&& ((ra_expected_prev[13] !== last_ra_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[13] = ra_expected_prev[13];
	end
	if (
		( ra_expected_prev[14] !== 1'bx ) && ( ra_prev[14] !== ra_expected_prev[14] )
		&& ((ra_expected_prev[14] !== last_ra_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[14] = ra_expected_prev[14];
	end
	if (
		( ra_expected_prev[15] !== 1'bx ) && ( ra_prev[15] !== ra_expected_prev[15] )
		&& ((ra_expected_prev[15] !== last_ra_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[15] = ra_expected_prev[15];
	end
	if (
		( ra_expected_prev[16] !== 1'bx ) && ( ra_prev[16] !== ra_expected_prev[16] )
		&& ((ra_expected_prev[16] !== last_ra_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[16] = ra_expected_prev[16];
	end
	if (
		( ra_expected_prev[17] !== 1'bx ) && ( ra_prev[17] !== ra_expected_prev[17] )
		&& ((ra_expected_prev[17] !== last_ra_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[17] = ra_expected_prev[17];
	end
	if (
		( ra_expected_prev[18] !== 1'bx ) && ( ra_prev[18] !== ra_expected_prev[18] )
		&& ((ra_expected_prev[18] !== last_ra_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[18] = ra_expected_prev[18];
	end
	if (
		( ra_expected_prev[19] !== 1'bx ) && ( ra_prev[19] !== ra_expected_prev[19] )
		&& ((ra_expected_prev[19] !== last_ra_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[19] = ra_expected_prev[19];
	end
	if (
		( ra_expected_prev[20] !== 1'bx ) && ( ra_prev[20] !== ra_expected_prev[20] )
		&& ((ra_expected_prev[20] !== last_ra_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[20] = ra_expected_prev[20];
	end
	if (
		( ra_expected_prev[21] !== 1'bx ) && ( ra_prev[21] !== ra_expected_prev[21] )
		&& ((ra_expected_prev[21] !== last_ra_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[21] = ra_expected_prev[21];
	end
	if (
		( ra_expected_prev[22] !== 1'bx ) && ( ra_prev[22] !== ra_expected_prev[22] )
		&& ((ra_expected_prev[22] !== last_ra_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[22] = ra_expected_prev[22];
	end
	if (
		( ra_expected_prev[23] !== 1'bx ) && ( ra_prev[23] !== ra_expected_prev[23] )
		&& ((ra_expected_prev[23] !== last_ra_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[23] = ra_expected_prev[23];
	end
	if (
		( ra_expected_prev[24] !== 1'bx ) && ( ra_prev[24] !== ra_expected_prev[24] )
		&& ((ra_expected_prev[24] !== last_ra_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[24] = ra_expected_prev[24];
	end
	if (
		( ra_expected_prev[25] !== 1'bx ) && ( ra_prev[25] !== ra_expected_prev[25] )
		&& ((ra_expected_prev[25] !== last_ra_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[25] = ra_expected_prev[25];
	end
	if (
		( ra_expected_prev[26] !== 1'bx ) && ( ra_prev[26] !== ra_expected_prev[26] )
		&& ((ra_expected_prev[26] !== last_ra_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[26] = ra_expected_prev[26];
	end
	if (
		( ra_expected_prev[27] !== 1'bx ) && ( ra_prev[27] !== ra_expected_prev[27] )
		&& ((ra_expected_prev[27] !== last_ra_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[27] = ra_expected_prev[27];
	end
	if (
		( ra_expected_prev[28] !== 1'bx ) && ( ra_prev[28] !== ra_expected_prev[28] )
		&& ((ra_expected_prev[28] !== last_ra_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[28] = ra_expected_prev[28];
	end
	if (
		( ra_expected_prev[29] !== 1'bx ) && ( ra_prev[29] !== ra_expected_prev[29] )
		&& ((ra_expected_prev[29] !== last_ra_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[29] = ra_expected_prev[29];
	end
	if (
		( ra_expected_prev[30] !== 1'bx ) && ( ra_prev[30] !== ra_expected_prev[30] )
		&& ((ra_expected_prev[30] !== last_ra_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[30] = ra_expected_prev[30];
	end
	if (
		( ra_expected_prev[31] !== 1'bx ) && ( ra_prev[31] !== ra_expected_prev[31] )
		&& ((ra_expected_prev[31] !== last_ra_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ra[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ra_expected_prev);
		$display ("     Real value = %b", ra_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ra_exp[31] = ra_expected_prev[31];
	end
	if (
		( RULA_expected_prev[0] !== 1'bx ) && ( RULA_prev[0] !== RULA_expected_prev[0] )
		&& ((RULA_expected_prev[0] !== last_RULA_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[0] = RULA_expected_prev[0];
	end
	if (
		( RULA_expected_prev[1] !== 1'bx ) && ( RULA_prev[1] !== RULA_expected_prev[1] )
		&& ((RULA_expected_prev[1] !== last_RULA_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[1] = RULA_expected_prev[1];
	end
	if (
		( RULA_expected_prev[2] !== 1'bx ) && ( RULA_prev[2] !== RULA_expected_prev[2] )
		&& ((RULA_expected_prev[2] !== last_RULA_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[2] = RULA_expected_prev[2];
	end
	if (
		( RULA_expected_prev[3] !== 1'bx ) && ( RULA_prev[3] !== RULA_expected_prev[3] )
		&& ((RULA_expected_prev[3] !== last_RULA_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[3] = RULA_expected_prev[3];
	end
	if (
		( RULA_expected_prev[4] !== 1'bx ) && ( RULA_prev[4] !== RULA_expected_prev[4] )
		&& ((RULA_expected_prev[4] !== last_RULA_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[4] = RULA_expected_prev[4];
	end
	if (
		( RULA_expected_prev[5] !== 1'bx ) && ( RULA_prev[5] !== RULA_expected_prev[5] )
		&& ((RULA_expected_prev[5] !== last_RULA_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[5] = RULA_expected_prev[5];
	end
	if (
		( RULA_expected_prev[6] !== 1'bx ) && ( RULA_prev[6] !== RULA_expected_prev[6] )
		&& ((RULA_expected_prev[6] !== last_RULA_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[6] = RULA_expected_prev[6];
	end
	if (
		( RULA_expected_prev[7] !== 1'bx ) && ( RULA_prev[7] !== RULA_expected_prev[7] )
		&& ((RULA_expected_prev[7] !== last_RULA_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[7] = RULA_expected_prev[7];
	end
	if (
		( RULA_expected_prev[8] !== 1'bx ) && ( RULA_prev[8] !== RULA_expected_prev[8] )
		&& ((RULA_expected_prev[8] !== last_RULA_exp[8]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[8] = RULA_expected_prev[8];
	end
	if (
		( RULA_expected_prev[9] !== 1'bx ) && ( RULA_prev[9] !== RULA_expected_prev[9] )
		&& ((RULA_expected_prev[9] !== last_RULA_exp[9]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[9] = RULA_expected_prev[9];
	end
	if (
		( RULA_expected_prev[10] !== 1'bx ) && ( RULA_prev[10] !== RULA_expected_prev[10] )
		&& ((RULA_expected_prev[10] !== last_RULA_exp[10]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[10] = RULA_expected_prev[10];
	end
	if (
		( RULA_expected_prev[11] !== 1'bx ) && ( RULA_prev[11] !== RULA_expected_prev[11] )
		&& ((RULA_expected_prev[11] !== last_RULA_exp[11]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[11] = RULA_expected_prev[11];
	end
	if (
		( RULA_expected_prev[12] !== 1'bx ) && ( RULA_prev[12] !== RULA_expected_prev[12] )
		&& ((RULA_expected_prev[12] !== last_RULA_exp[12]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[12] = RULA_expected_prev[12];
	end
	if (
		( RULA_expected_prev[13] !== 1'bx ) && ( RULA_prev[13] !== RULA_expected_prev[13] )
		&& ((RULA_expected_prev[13] !== last_RULA_exp[13]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[13] = RULA_expected_prev[13];
	end
	if (
		( RULA_expected_prev[14] !== 1'bx ) && ( RULA_prev[14] !== RULA_expected_prev[14] )
		&& ((RULA_expected_prev[14] !== last_RULA_exp[14]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[14] = RULA_expected_prev[14];
	end
	if (
		( RULA_expected_prev[15] !== 1'bx ) && ( RULA_prev[15] !== RULA_expected_prev[15] )
		&& ((RULA_expected_prev[15] !== last_RULA_exp[15]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[15] = RULA_expected_prev[15];
	end
	if (
		( RULA_expected_prev[16] !== 1'bx ) && ( RULA_prev[16] !== RULA_expected_prev[16] )
		&& ((RULA_expected_prev[16] !== last_RULA_exp[16]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[16] = RULA_expected_prev[16];
	end
	if (
		( RULA_expected_prev[17] !== 1'bx ) && ( RULA_prev[17] !== RULA_expected_prev[17] )
		&& ((RULA_expected_prev[17] !== last_RULA_exp[17]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[17] = RULA_expected_prev[17];
	end
	if (
		( RULA_expected_prev[18] !== 1'bx ) && ( RULA_prev[18] !== RULA_expected_prev[18] )
		&& ((RULA_expected_prev[18] !== last_RULA_exp[18]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[18] = RULA_expected_prev[18];
	end
	if (
		( RULA_expected_prev[19] !== 1'bx ) && ( RULA_prev[19] !== RULA_expected_prev[19] )
		&& ((RULA_expected_prev[19] !== last_RULA_exp[19]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[19] = RULA_expected_prev[19];
	end
	if (
		( RULA_expected_prev[20] !== 1'bx ) && ( RULA_prev[20] !== RULA_expected_prev[20] )
		&& ((RULA_expected_prev[20] !== last_RULA_exp[20]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[20] = RULA_expected_prev[20];
	end
	if (
		( RULA_expected_prev[21] !== 1'bx ) && ( RULA_prev[21] !== RULA_expected_prev[21] )
		&& ((RULA_expected_prev[21] !== last_RULA_exp[21]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[21] = RULA_expected_prev[21];
	end
	if (
		( RULA_expected_prev[22] !== 1'bx ) && ( RULA_prev[22] !== RULA_expected_prev[22] )
		&& ((RULA_expected_prev[22] !== last_RULA_exp[22]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[22] = RULA_expected_prev[22];
	end
	if (
		( RULA_expected_prev[23] !== 1'bx ) && ( RULA_prev[23] !== RULA_expected_prev[23] )
		&& ((RULA_expected_prev[23] !== last_RULA_exp[23]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[23] = RULA_expected_prev[23];
	end
	if (
		( RULA_expected_prev[24] !== 1'bx ) && ( RULA_prev[24] !== RULA_expected_prev[24] )
		&& ((RULA_expected_prev[24] !== last_RULA_exp[24]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[24] = RULA_expected_prev[24];
	end
	if (
		( RULA_expected_prev[25] !== 1'bx ) && ( RULA_prev[25] !== RULA_expected_prev[25] )
		&& ((RULA_expected_prev[25] !== last_RULA_exp[25]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[25] = RULA_expected_prev[25];
	end
	if (
		( RULA_expected_prev[26] !== 1'bx ) && ( RULA_prev[26] !== RULA_expected_prev[26] )
		&& ((RULA_expected_prev[26] !== last_RULA_exp[26]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[26] = RULA_expected_prev[26];
	end
	if (
		( RULA_expected_prev[27] !== 1'bx ) && ( RULA_prev[27] !== RULA_expected_prev[27] )
		&& ((RULA_expected_prev[27] !== last_RULA_exp[27]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[27] = RULA_expected_prev[27];
	end
	if (
		( RULA_expected_prev[28] !== 1'bx ) && ( RULA_prev[28] !== RULA_expected_prev[28] )
		&& ((RULA_expected_prev[28] !== last_RULA_exp[28]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[28] = RULA_expected_prev[28];
	end
	if (
		( RULA_expected_prev[29] !== 1'bx ) && ( RULA_prev[29] !== RULA_expected_prev[29] )
		&& ((RULA_expected_prev[29] !== last_RULA_exp[29]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[29] = RULA_expected_prev[29];
	end
	if (
		( RULA_expected_prev[30] !== 1'bx ) && ( RULA_prev[30] !== RULA_expected_prev[30] )
		&& ((RULA_expected_prev[30] !== last_RULA_exp[30]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[30] = RULA_expected_prev[30];
	end
	if (
		( RULA_expected_prev[31] !== 1'bx ) && ( RULA_prev[31] !== RULA_expected_prev[31] )
		&& ((RULA_expected_prev[31] !== last_RULA_exp[31]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RULA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RULA_expected_prev);
		$display ("     Real value = %b", RULA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RULA_exp[31] = RULA_expected_prev[31];
	end
	if (
		( t0_expected_prev[0] !== 1'bx ) && ( t0_prev[0] !== t0_expected_prev[0] )
		&& ((t0_expected_prev[0] !== last_t0_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[0] = t0_expected_prev[0];
	end
	if (
		( t0_expected_prev[1] !== 1'bx ) && ( t0_prev[1] !== t0_expected_prev[1] )
		&& ((t0_expected_prev[1] !== last_t0_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[1] = t0_expected_prev[1];
	end
	if (
		( t0_expected_prev[2] !== 1'bx ) && ( t0_prev[2] !== t0_expected_prev[2] )
		&& ((t0_expected_prev[2] !== last_t0_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[2] = t0_expected_prev[2];
	end
	if (
		( t0_expected_prev[3] !== 1'bx ) && ( t0_prev[3] !== t0_expected_prev[3] )
		&& ((t0_expected_prev[3] !== last_t0_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[3] = t0_expected_prev[3];
	end
	if (
		( t0_expected_prev[4] !== 1'bx ) && ( t0_prev[4] !== t0_expected_prev[4] )
		&& ((t0_expected_prev[4] !== last_t0_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[4] = t0_expected_prev[4];
	end
	if (
		( t0_expected_prev[5] !== 1'bx ) && ( t0_prev[5] !== t0_expected_prev[5] )
		&& ((t0_expected_prev[5] !== last_t0_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[5] = t0_expected_prev[5];
	end
	if (
		( t0_expected_prev[6] !== 1'bx ) && ( t0_prev[6] !== t0_expected_prev[6] )
		&& ((t0_expected_prev[6] !== last_t0_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[6] = t0_expected_prev[6];
	end
	if (
		( t0_expected_prev[7] !== 1'bx ) && ( t0_prev[7] !== t0_expected_prev[7] )
		&& ((t0_expected_prev[7] !== last_t0_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[7] = t0_expected_prev[7];
	end
	if (
		( t0_expected_prev[8] !== 1'bx ) && ( t0_prev[8] !== t0_expected_prev[8] )
		&& ((t0_expected_prev[8] !== last_t0_exp[8]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[8] = t0_expected_prev[8];
	end
	if (
		( t0_expected_prev[9] !== 1'bx ) && ( t0_prev[9] !== t0_expected_prev[9] )
		&& ((t0_expected_prev[9] !== last_t0_exp[9]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[9] = t0_expected_prev[9];
	end
	if (
		( t0_expected_prev[10] !== 1'bx ) && ( t0_prev[10] !== t0_expected_prev[10] )
		&& ((t0_expected_prev[10] !== last_t0_exp[10]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[10] = t0_expected_prev[10];
	end
	if (
		( t0_expected_prev[11] !== 1'bx ) && ( t0_prev[11] !== t0_expected_prev[11] )
		&& ((t0_expected_prev[11] !== last_t0_exp[11]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[11] = t0_expected_prev[11];
	end
	if (
		( t0_expected_prev[12] !== 1'bx ) && ( t0_prev[12] !== t0_expected_prev[12] )
		&& ((t0_expected_prev[12] !== last_t0_exp[12]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[12] = t0_expected_prev[12];
	end
	if (
		( t0_expected_prev[13] !== 1'bx ) && ( t0_prev[13] !== t0_expected_prev[13] )
		&& ((t0_expected_prev[13] !== last_t0_exp[13]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[13] = t0_expected_prev[13];
	end
	if (
		( t0_expected_prev[14] !== 1'bx ) && ( t0_prev[14] !== t0_expected_prev[14] )
		&& ((t0_expected_prev[14] !== last_t0_exp[14]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[14] = t0_expected_prev[14];
	end
	if (
		( t0_expected_prev[15] !== 1'bx ) && ( t0_prev[15] !== t0_expected_prev[15] )
		&& ((t0_expected_prev[15] !== last_t0_exp[15]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[15] = t0_expected_prev[15];
	end
	if (
		( t0_expected_prev[16] !== 1'bx ) && ( t0_prev[16] !== t0_expected_prev[16] )
		&& ((t0_expected_prev[16] !== last_t0_exp[16]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[16] = t0_expected_prev[16];
	end
	if (
		( t0_expected_prev[17] !== 1'bx ) && ( t0_prev[17] !== t0_expected_prev[17] )
		&& ((t0_expected_prev[17] !== last_t0_exp[17]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[17] = t0_expected_prev[17];
	end
	if (
		( t0_expected_prev[18] !== 1'bx ) && ( t0_prev[18] !== t0_expected_prev[18] )
		&& ((t0_expected_prev[18] !== last_t0_exp[18]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[18] = t0_expected_prev[18];
	end
	if (
		( t0_expected_prev[19] !== 1'bx ) && ( t0_prev[19] !== t0_expected_prev[19] )
		&& ((t0_expected_prev[19] !== last_t0_exp[19]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[19] = t0_expected_prev[19];
	end
	if (
		( t0_expected_prev[20] !== 1'bx ) && ( t0_prev[20] !== t0_expected_prev[20] )
		&& ((t0_expected_prev[20] !== last_t0_exp[20]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[20] = t0_expected_prev[20];
	end
	if (
		( t0_expected_prev[21] !== 1'bx ) && ( t0_prev[21] !== t0_expected_prev[21] )
		&& ((t0_expected_prev[21] !== last_t0_exp[21]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[21] = t0_expected_prev[21];
	end
	if (
		( t0_expected_prev[22] !== 1'bx ) && ( t0_prev[22] !== t0_expected_prev[22] )
		&& ((t0_expected_prev[22] !== last_t0_exp[22]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[22] = t0_expected_prev[22];
	end
	if (
		( t0_expected_prev[23] !== 1'bx ) && ( t0_prev[23] !== t0_expected_prev[23] )
		&& ((t0_expected_prev[23] !== last_t0_exp[23]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[23] = t0_expected_prev[23];
	end
	if (
		( t0_expected_prev[24] !== 1'bx ) && ( t0_prev[24] !== t0_expected_prev[24] )
		&& ((t0_expected_prev[24] !== last_t0_exp[24]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[24] = t0_expected_prev[24];
	end
	if (
		( t0_expected_prev[25] !== 1'bx ) && ( t0_prev[25] !== t0_expected_prev[25] )
		&& ((t0_expected_prev[25] !== last_t0_exp[25]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[25] = t0_expected_prev[25];
	end
	if (
		( t0_expected_prev[26] !== 1'bx ) && ( t0_prev[26] !== t0_expected_prev[26] )
		&& ((t0_expected_prev[26] !== last_t0_exp[26]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[26] = t0_expected_prev[26];
	end
	if (
		( t0_expected_prev[27] !== 1'bx ) && ( t0_prev[27] !== t0_expected_prev[27] )
		&& ((t0_expected_prev[27] !== last_t0_exp[27]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[27] = t0_expected_prev[27];
	end
	if (
		( t0_expected_prev[28] !== 1'bx ) && ( t0_prev[28] !== t0_expected_prev[28] )
		&& ((t0_expected_prev[28] !== last_t0_exp[28]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[28] = t0_expected_prev[28];
	end
	if (
		( t0_expected_prev[29] !== 1'bx ) && ( t0_prev[29] !== t0_expected_prev[29] )
		&& ((t0_expected_prev[29] !== last_t0_exp[29]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[29] = t0_expected_prev[29];
	end
	if (
		( t0_expected_prev[30] !== 1'bx ) && ( t0_prev[30] !== t0_expected_prev[30] )
		&& ((t0_expected_prev[30] !== last_t0_exp[30]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[30] = t0_expected_prev[30];
	end
	if (
		( t0_expected_prev[31] !== 1'bx ) && ( t0_prev[31] !== t0_expected_prev[31] )
		&& ((t0_expected_prev[31] !== last_t0_exp[31]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t0_expected_prev);
		$display ("     Real value = %b", t0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_t0_exp[31] = t0_expected_prev[31];
	end
	if (
		( t1_expected_prev[0] !== 1'bx ) && ( t1_prev[0] !== t1_expected_prev[0] )
		&& ((t1_expected_prev[0] !== last_t1_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[0] = t1_expected_prev[0];
	end
	if (
		( t1_expected_prev[1] !== 1'bx ) && ( t1_prev[1] !== t1_expected_prev[1] )
		&& ((t1_expected_prev[1] !== last_t1_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[1] = t1_expected_prev[1];
	end
	if (
		( t1_expected_prev[2] !== 1'bx ) && ( t1_prev[2] !== t1_expected_prev[2] )
		&& ((t1_expected_prev[2] !== last_t1_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[2] = t1_expected_prev[2];
	end
	if (
		( t1_expected_prev[3] !== 1'bx ) && ( t1_prev[3] !== t1_expected_prev[3] )
		&& ((t1_expected_prev[3] !== last_t1_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[3] = t1_expected_prev[3];
	end
	if (
		( t1_expected_prev[4] !== 1'bx ) && ( t1_prev[4] !== t1_expected_prev[4] )
		&& ((t1_expected_prev[4] !== last_t1_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[4] = t1_expected_prev[4];
	end
	if (
		( t1_expected_prev[5] !== 1'bx ) && ( t1_prev[5] !== t1_expected_prev[5] )
		&& ((t1_expected_prev[5] !== last_t1_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[5] = t1_expected_prev[5];
	end
	if (
		( t1_expected_prev[6] !== 1'bx ) && ( t1_prev[6] !== t1_expected_prev[6] )
		&& ((t1_expected_prev[6] !== last_t1_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[6] = t1_expected_prev[6];
	end
	if (
		( t1_expected_prev[7] !== 1'bx ) && ( t1_prev[7] !== t1_expected_prev[7] )
		&& ((t1_expected_prev[7] !== last_t1_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[7] = t1_expected_prev[7];
	end
	if (
		( t1_expected_prev[8] !== 1'bx ) && ( t1_prev[8] !== t1_expected_prev[8] )
		&& ((t1_expected_prev[8] !== last_t1_exp[8]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[8] = t1_expected_prev[8];
	end
	if (
		( t1_expected_prev[9] !== 1'bx ) && ( t1_prev[9] !== t1_expected_prev[9] )
		&& ((t1_expected_prev[9] !== last_t1_exp[9]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[9] = t1_expected_prev[9];
	end
	if (
		( t1_expected_prev[10] !== 1'bx ) && ( t1_prev[10] !== t1_expected_prev[10] )
		&& ((t1_expected_prev[10] !== last_t1_exp[10]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[10] = t1_expected_prev[10];
	end
	if (
		( t1_expected_prev[11] !== 1'bx ) && ( t1_prev[11] !== t1_expected_prev[11] )
		&& ((t1_expected_prev[11] !== last_t1_exp[11]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[11] = t1_expected_prev[11];
	end
	if (
		( t1_expected_prev[12] !== 1'bx ) && ( t1_prev[12] !== t1_expected_prev[12] )
		&& ((t1_expected_prev[12] !== last_t1_exp[12]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[12] = t1_expected_prev[12];
	end
	if (
		( t1_expected_prev[13] !== 1'bx ) && ( t1_prev[13] !== t1_expected_prev[13] )
		&& ((t1_expected_prev[13] !== last_t1_exp[13]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[13] = t1_expected_prev[13];
	end
	if (
		( t1_expected_prev[14] !== 1'bx ) && ( t1_prev[14] !== t1_expected_prev[14] )
		&& ((t1_expected_prev[14] !== last_t1_exp[14]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[14] = t1_expected_prev[14];
	end
	if (
		( t1_expected_prev[15] !== 1'bx ) && ( t1_prev[15] !== t1_expected_prev[15] )
		&& ((t1_expected_prev[15] !== last_t1_exp[15]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[15] = t1_expected_prev[15];
	end
	if (
		( t1_expected_prev[16] !== 1'bx ) && ( t1_prev[16] !== t1_expected_prev[16] )
		&& ((t1_expected_prev[16] !== last_t1_exp[16]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[16] = t1_expected_prev[16];
	end
	if (
		( t1_expected_prev[17] !== 1'bx ) && ( t1_prev[17] !== t1_expected_prev[17] )
		&& ((t1_expected_prev[17] !== last_t1_exp[17]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[17] = t1_expected_prev[17];
	end
	if (
		( t1_expected_prev[18] !== 1'bx ) && ( t1_prev[18] !== t1_expected_prev[18] )
		&& ((t1_expected_prev[18] !== last_t1_exp[18]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[18] = t1_expected_prev[18];
	end
	if (
		( t1_expected_prev[19] !== 1'bx ) && ( t1_prev[19] !== t1_expected_prev[19] )
		&& ((t1_expected_prev[19] !== last_t1_exp[19]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[19] = t1_expected_prev[19];
	end
	if (
		( t1_expected_prev[20] !== 1'bx ) && ( t1_prev[20] !== t1_expected_prev[20] )
		&& ((t1_expected_prev[20] !== last_t1_exp[20]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[20] = t1_expected_prev[20];
	end
	if (
		( t1_expected_prev[21] !== 1'bx ) && ( t1_prev[21] !== t1_expected_prev[21] )
		&& ((t1_expected_prev[21] !== last_t1_exp[21]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[21] = t1_expected_prev[21];
	end
	if (
		( t1_expected_prev[22] !== 1'bx ) && ( t1_prev[22] !== t1_expected_prev[22] )
		&& ((t1_expected_prev[22] !== last_t1_exp[22]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[22] = t1_expected_prev[22];
	end
	if (
		( t1_expected_prev[23] !== 1'bx ) && ( t1_prev[23] !== t1_expected_prev[23] )
		&& ((t1_expected_prev[23] !== last_t1_exp[23]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[23] = t1_expected_prev[23];
	end
	if (
		( t1_expected_prev[24] !== 1'bx ) && ( t1_prev[24] !== t1_expected_prev[24] )
		&& ((t1_expected_prev[24] !== last_t1_exp[24]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[24] = t1_expected_prev[24];
	end
	if (
		( t1_expected_prev[25] !== 1'bx ) && ( t1_prev[25] !== t1_expected_prev[25] )
		&& ((t1_expected_prev[25] !== last_t1_exp[25]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[25] = t1_expected_prev[25];
	end
	if (
		( t1_expected_prev[26] !== 1'bx ) && ( t1_prev[26] !== t1_expected_prev[26] )
		&& ((t1_expected_prev[26] !== last_t1_exp[26]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[26] = t1_expected_prev[26];
	end
	if (
		( t1_expected_prev[27] !== 1'bx ) && ( t1_prev[27] !== t1_expected_prev[27] )
		&& ((t1_expected_prev[27] !== last_t1_exp[27]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[27] = t1_expected_prev[27];
	end
	if (
		( t1_expected_prev[28] !== 1'bx ) && ( t1_prev[28] !== t1_expected_prev[28] )
		&& ((t1_expected_prev[28] !== last_t1_exp[28]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[28] = t1_expected_prev[28];
	end
	if (
		( t1_expected_prev[29] !== 1'bx ) && ( t1_prev[29] !== t1_expected_prev[29] )
		&& ((t1_expected_prev[29] !== last_t1_exp[29]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[29] = t1_expected_prev[29];
	end
	if (
		( t1_expected_prev[30] !== 1'bx ) && ( t1_prev[30] !== t1_expected_prev[30] )
		&& ((t1_expected_prev[30] !== last_t1_exp[30]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[30] = t1_expected_prev[30];
	end
	if (
		( t1_expected_prev[31] !== 1'bx ) && ( t1_prev[31] !== t1_expected_prev[31] )
		&& ((t1_expected_prev[31] !== last_t1_exp[31]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t1_expected_prev);
		$display ("     Real value = %b", t1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_t1_exp[31] = t1_expected_prev[31];
	end
	if (
		( t2_expected_prev[0] !== 1'bx ) && ( t2_prev[0] !== t2_expected_prev[0] )
		&& ((t2_expected_prev[0] !== last_t2_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[0] = t2_expected_prev[0];
	end
	if (
		( t2_expected_prev[1] !== 1'bx ) && ( t2_prev[1] !== t2_expected_prev[1] )
		&& ((t2_expected_prev[1] !== last_t2_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[1] = t2_expected_prev[1];
	end
	if (
		( t2_expected_prev[2] !== 1'bx ) && ( t2_prev[2] !== t2_expected_prev[2] )
		&& ((t2_expected_prev[2] !== last_t2_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[2] = t2_expected_prev[2];
	end
	if (
		( t2_expected_prev[3] !== 1'bx ) && ( t2_prev[3] !== t2_expected_prev[3] )
		&& ((t2_expected_prev[3] !== last_t2_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[3] = t2_expected_prev[3];
	end
	if (
		( t2_expected_prev[4] !== 1'bx ) && ( t2_prev[4] !== t2_expected_prev[4] )
		&& ((t2_expected_prev[4] !== last_t2_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[4] = t2_expected_prev[4];
	end
	if (
		( t2_expected_prev[5] !== 1'bx ) && ( t2_prev[5] !== t2_expected_prev[5] )
		&& ((t2_expected_prev[5] !== last_t2_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[5] = t2_expected_prev[5];
	end
	if (
		( t2_expected_prev[6] !== 1'bx ) && ( t2_prev[6] !== t2_expected_prev[6] )
		&& ((t2_expected_prev[6] !== last_t2_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[6] = t2_expected_prev[6];
	end
	if (
		( t2_expected_prev[7] !== 1'bx ) && ( t2_prev[7] !== t2_expected_prev[7] )
		&& ((t2_expected_prev[7] !== last_t2_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[7] = t2_expected_prev[7];
	end
	if (
		( t2_expected_prev[8] !== 1'bx ) && ( t2_prev[8] !== t2_expected_prev[8] )
		&& ((t2_expected_prev[8] !== last_t2_exp[8]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[8] = t2_expected_prev[8];
	end
	if (
		( t2_expected_prev[9] !== 1'bx ) && ( t2_prev[9] !== t2_expected_prev[9] )
		&& ((t2_expected_prev[9] !== last_t2_exp[9]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[9] = t2_expected_prev[9];
	end
	if (
		( t2_expected_prev[10] !== 1'bx ) && ( t2_prev[10] !== t2_expected_prev[10] )
		&& ((t2_expected_prev[10] !== last_t2_exp[10]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[10] = t2_expected_prev[10];
	end
	if (
		( t2_expected_prev[11] !== 1'bx ) && ( t2_prev[11] !== t2_expected_prev[11] )
		&& ((t2_expected_prev[11] !== last_t2_exp[11]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[11] = t2_expected_prev[11];
	end
	if (
		( t2_expected_prev[12] !== 1'bx ) && ( t2_prev[12] !== t2_expected_prev[12] )
		&& ((t2_expected_prev[12] !== last_t2_exp[12]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[12] = t2_expected_prev[12];
	end
	if (
		( t2_expected_prev[13] !== 1'bx ) && ( t2_prev[13] !== t2_expected_prev[13] )
		&& ((t2_expected_prev[13] !== last_t2_exp[13]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[13] = t2_expected_prev[13];
	end
	if (
		( t2_expected_prev[14] !== 1'bx ) && ( t2_prev[14] !== t2_expected_prev[14] )
		&& ((t2_expected_prev[14] !== last_t2_exp[14]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[14] = t2_expected_prev[14];
	end
	if (
		( t2_expected_prev[15] !== 1'bx ) && ( t2_prev[15] !== t2_expected_prev[15] )
		&& ((t2_expected_prev[15] !== last_t2_exp[15]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[15] = t2_expected_prev[15];
	end
	if (
		( t2_expected_prev[16] !== 1'bx ) && ( t2_prev[16] !== t2_expected_prev[16] )
		&& ((t2_expected_prev[16] !== last_t2_exp[16]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[16] = t2_expected_prev[16];
	end
	if (
		( t2_expected_prev[17] !== 1'bx ) && ( t2_prev[17] !== t2_expected_prev[17] )
		&& ((t2_expected_prev[17] !== last_t2_exp[17]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[17] = t2_expected_prev[17];
	end
	if (
		( t2_expected_prev[18] !== 1'bx ) && ( t2_prev[18] !== t2_expected_prev[18] )
		&& ((t2_expected_prev[18] !== last_t2_exp[18]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[18] = t2_expected_prev[18];
	end
	if (
		( t2_expected_prev[19] !== 1'bx ) && ( t2_prev[19] !== t2_expected_prev[19] )
		&& ((t2_expected_prev[19] !== last_t2_exp[19]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[19] = t2_expected_prev[19];
	end
	if (
		( t2_expected_prev[20] !== 1'bx ) && ( t2_prev[20] !== t2_expected_prev[20] )
		&& ((t2_expected_prev[20] !== last_t2_exp[20]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[20] = t2_expected_prev[20];
	end
	if (
		( t2_expected_prev[21] !== 1'bx ) && ( t2_prev[21] !== t2_expected_prev[21] )
		&& ((t2_expected_prev[21] !== last_t2_exp[21]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[21] = t2_expected_prev[21];
	end
	if (
		( t2_expected_prev[22] !== 1'bx ) && ( t2_prev[22] !== t2_expected_prev[22] )
		&& ((t2_expected_prev[22] !== last_t2_exp[22]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[22] = t2_expected_prev[22];
	end
	if (
		( t2_expected_prev[23] !== 1'bx ) && ( t2_prev[23] !== t2_expected_prev[23] )
		&& ((t2_expected_prev[23] !== last_t2_exp[23]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[23] = t2_expected_prev[23];
	end
	if (
		( t2_expected_prev[24] !== 1'bx ) && ( t2_prev[24] !== t2_expected_prev[24] )
		&& ((t2_expected_prev[24] !== last_t2_exp[24]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[24] = t2_expected_prev[24];
	end
	if (
		( t2_expected_prev[25] !== 1'bx ) && ( t2_prev[25] !== t2_expected_prev[25] )
		&& ((t2_expected_prev[25] !== last_t2_exp[25]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[25] = t2_expected_prev[25];
	end
	if (
		( t2_expected_prev[26] !== 1'bx ) && ( t2_prev[26] !== t2_expected_prev[26] )
		&& ((t2_expected_prev[26] !== last_t2_exp[26]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[26] = t2_expected_prev[26];
	end
	if (
		( t2_expected_prev[27] !== 1'bx ) && ( t2_prev[27] !== t2_expected_prev[27] )
		&& ((t2_expected_prev[27] !== last_t2_exp[27]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[27] = t2_expected_prev[27];
	end
	if (
		( t2_expected_prev[28] !== 1'bx ) && ( t2_prev[28] !== t2_expected_prev[28] )
		&& ((t2_expected_prev[28] !== last_t2_exp[28]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[28] = t2_expected_prev[28];
	end
	if (
		( t2_expected_prev[29] !== 1'bx ) && ( t2_prev[29] !== t2_expected_prev[29] )
		&& ((t2_expected_prev[29] !== last_t2_exp[29]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[29] = t2_expected_prev[29];
	end
	if (
		( t2_expected_prev[30] !== 1'bx ) && ( t2_prev[30] !== t2_expected_prev[30] )
		&& ((t2_expected_prev[30] !== last_t2_exp[30]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[30] = t2_expected_prev[30];
	end
	if (
		( t2_expected_prev[31] !== 1'bx ) && ( t2_prev[31] !== t2_expected_prev[31] )
		&& ((t2_expected_prev[31] !== last_t2_exp[31]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t2_expected_prev);
		$display ("     Real value = %b", t2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_t2_exp[31] = t2_expected_prev[31];
	end
	if (
		( t3_expected_prev[0] !== 1'bx ) && ( t3_prev[0] !== t3_expected_prev[0] )
		&& ((t3_expected_prev[0] !== last_t3_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[0] = t3_expected_prev[0];
	end
	if (
		( t3_expected_prev[1] !== 1'bx ) && ( t3_prev[1] !== t3_expected_prev[1] )
		&& ((t3_expected_prev[1] !== last_t3_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[1] = t3_expected_prev[1];
	end
	if (
		( t3_expected_prev[2] !== 1'bx ) && ( t3_prev[2] !== t3_expected_prev[2] )
		&& ((t3_expected_prev[2] !== last_t3_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[2] = t3_expected_prev[2];
	end
	if (
		( t3_expected_prev[3] !== 1'bx ) && ( t3_prev[3] !== t3_expected_prev[3] )
		&& ((t3_expected_prev[3] !== last_t3_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[3] = t3_expected_prev[3];
	end
	if (
		( t3_expected_prev[4] !== 1'bx ) && ( t3_prev[4] !== t3_expected_prev[4] )
		&& ((t3_expected_prev[4] !== last_t3_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[4] = t3_expected_prev[4];
	end
	if (
		( t3_expected_prev[5] !== 1'bx ) && ( t3_prev[5] !== t3_expected_prev[5] )
		&& ((t3_expected_prev[5] !== last_t3_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[5] = t3_expected_prev[5];
	end
	if (
		( t3_expected_prev[6] !== 1'bx ) && ( t3_prev[6] !== t3_expected_prev[6] )
		&& ((t3_expected_prev[6] !== last_t3_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[6] = t3_expected_prev[6];
	end
	if (
		( t3_expected_prev[7] !== 1'bx ) && ( t3_prev[7] !== t3_expected_prev[7] )
		&& ((t3_expected_prev[7] !== last_t3_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[7] = t3_expected_prev[7];
	end
	if (
		( t3_expected_prev[8] !== 1'bx ) && ( t3_prev[8] !== t3_expected_prev[8] )
		&& ((t3_expected_prev[8] !== last_t3_exp[8]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[8] = t3_expected_prev[8];
	end
	if (
		( t3_expected_prev[9] !== 1'bx ) && ( t3_prev[9] !== t3_expected_prev[9] )
		&& ((t3_expected_prev[9] !== last_t3_exp[9]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[9] = t3_expected_prev[9];
	end
	if (
		( t3_expected_prev[10] !== 1'bx ) && ( t3_prev[10] !== t3_expected_prev[10] )
		&& ((t3_expected_prev[10] !== last_t3_exp[10]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[10] = t3_expected_prev[10];
	end
	if (
		( t3_expected_prev[11] !== 1'bx ) && ( t3_prev[11] !== t3_expected_prev[11] )
		&& ((t3_expected_prev[11] !== last_t3_exp[11]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[11] = t3_expected_prev[11];
	end
	if (
		( t3_expected_prev[12] !== 1'bx ) && ( t3_prev[12] !== t3_expected_prev[12] )
		&& ((t3_expected_prev[12] !== last_t3_exp[12]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[12] = t3_expected_prev[12];
	end
	if (
		( t3_expected_prev[13] !== 1'bx ) && ( t3_prev[13] !== t3_expected_prev[13] )
		&& ((t3_expected_prev[13] !== last_t3_exp[13]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[13] = t3_expected_prev[13];
	end
	if (
		( t3_expected_prev[14] !== 1'bx ) && ( t3_prev[14] !== t3_expected_prev[14] )
		&& ((t3_expected_prev[14] !== last_t3_exp[14]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[14] = t3_expected_prev[14];
	end
	if (
		( t3_expected_prev[15] !== 1'bx ) && ( t3_prev[15] !== t3_expected_prev[15] )
		&& ((t3_expected_prev[15] !== last_t3_exp[15]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[15] = t3_expected_prev[15];
	end
	if (
		( t3_expected_prev[16] !== 1'bx ) && ( t3_prev[16] !== t3_expected_prev[16] )
		&& ((t3_expected_prev[16] !== last_t3_exp[16]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[16] = t3_expected_prev[16];
	end
	if (
		( t3_expected_prev[17] !== 1'bx ) && ( t3_prev[17] !== t3_expected_prev[17] )
		&& ((t3_expected_prev[17] !== last_t3_exp[17]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[17] = t3_expected_prev[17];
	end
	if (
		( t3_expected_prev[18] !== 1'bx ) && ( t3_prev[18] !== t3_expected_prev[18] )
		&& ((t3_expected_prev[18] !== last_t3_exp[18]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[18] = t3_expected_prev[18];
	end
	if (
		( t3_expected_prev[19] !== 1'bx ) && ( t3_prev[19] !== t3_expected_prev[19] )
		&& ((t3_expected_prev[19] !== last_t3_exp[19]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[19] = t3_expected_prev[19];
	end
	if (
		( t3_expected_prev[20] !== 1'bx ) && ( t3_prev[20] !== t3_expected_prev[20] )
		&& ((t3_expected_prev[20] !== last_t3_exp[20]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[20] = t3_expected_prev[20];
	end
	if (
		( t3_expected_prev[21] !== 1'bx ) && ( t3_prev[21] !== t3_expected_prev[21] )
		&& ((t3_expected_prev[21] !== last_t3_exp[21]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[21] = t3_expected_prev[21];
	end
	if (
		( t3_expected_prev[22] !== 1'bx ) && ( t3_prev[22] !== t3_expected_prev[22] )
		&& ((t3_expected_prev[22] !== last_t3_exp[22]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[22] = t3_expected_prev[22];
	end
	if (
		( t3_expected_prev[23] !== 1'bx ) && ( t3_prev[23] !== t3_expected_prev[23] )
		&& ((t3_expected_prev[23] !== last_t3_exp[23]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[23] = t3_expected_prev[23];
	end
	if (
		( t3_expected_prev[24] !== 1'bx ) && ( t3_prev[24] !== t3_expected_prev[24] )
		&& ((t3_expected_prev[24] !== last_t3_exp[24]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[24] = t3_expected_prev[24];
	end
	if (
		( t3_expected_prev[25] !== 1'bx ) && ( t3_prev[25] !== t3_expected_prev[25] )
		&& ((t3_expected_prev[25] !== last_t3_exp[25]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[25] = t3_expected_prev[25];
	end
	if (
		( t3_expected_prev[26] !== 1'bx ) && ( t3_prev[26] !== t3_expected_prev[26] )
		&& ((t3_expected_prev[26] !== last_t3_exp[26]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[26] = t3_expected_prev[26];
	end
	if (
		( t3_expected_prev[27] !== 1'bx ) && ( t3_prev[27] !== t3_expected_prev[27] )
		&& ((t3_expected_prev[27] !== last_t3_exp[27]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[27] = t3_expected_prev[27];
	end
	if (
		( t3_expected_prev[28] !== 1'bx ) && ( t3_prev[28] !== t3_expected_prev[28] )
		&& ((t3_expected_prev[28] !== last_t3_exp[28]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[28] = t3_expected_prev[28];
	end
	if (
		( t3_expected_prev[29] !== 1'bx ) && ( t3_prev[29] !== t3_expected_prev[29] )
		&& ((t3_expected_prev[29] !== last_t3_exp[29]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[29] = t3_expected_prev[29];
	end
	if (
		( t3_expected_prev[30] !== 1'bx ) && ( t3_prev[30] !== t3_expected_prev[30] )
		&& ((t3_expected_prev[30] !== last_t3_exp[30]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[30] = t3_expected_prev[30];
	end
	if (
		( t3_expected_prev[31] !== 1'bx ) && ( t3_prev[31] !== t3_expected_prev[31] )
		&& ((t3_expected_prev[31] !== last_t3_exp[31]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t3_expected_prev);
		$display ("     Real value = %b", t3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_t3_exp[31] = t3_expected_prev[31];
	end
	if (
		( t4_expected_prev[0] !== 1'bx ) && ( t4_prev[0] !== t4_expected_prev[0] )
		&& ((t4_expected_prev[0] !== last_t4_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[0] = t4_expected_prev[0];
	end
	if (
		( t4_expected_prev[1] !== 1'bx ) && ( t4_prev[1] !== t4_expected_prev[1] )
		&& ((t4_expected_prev[1] !== last_t4_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[1] = t4_expected_prev[1];
	end
	if (
		( t4_expected_prev[2] !== 1'bx ) && ( t4_prev[2] !== t4_expected_prev[2] )
		&& ((t4_expected_prev[2] !== last_t4_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[2] = t4_expected_prev[2];
	end
	if (
		( t4_expected_prev[3] !== 1'bx ) && ( t4_prev[3] !== t4_expected_prev[3] )
		&& ((t4_expected_prev[3] !== last_t4_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[3] = t4_expected_prev[3];
	end
	if (
		( t4_expected_prev[4] !== 1'bx ) && ( t4_prev[4] !== t4_expected_prev[4] )
		&& ((t4_expected_prev[4] !== last_t4_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[4] = t4_expected_prev[4];
	end
	if (
		( t4_expected_prev[5] !== 1'bx ) && ( t4_prev[5] !== t4_expected_prev[5] )
		&& ((t4_expected_prev[5] !== last_t4_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[5] = t4_expected_prev[5];
	end
	if (
		( t4_expected_prev[6] !== 1'bx ) && ( t4_prev[6] !== t4_expected_prev[6] )
		&& ((t4_expected_prev[6] !== last_t4_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[6] = t4_expected_prev[6];
	end
	if (
		( t4_expected_prev[7] !== 1'bx ) && ( t4_prev[7] !== t4_expected_prev[7] )
		&& ((t4_expected_prev[7] !== last_t4_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[7] = t4_expected_prev[7];
	end
	if (
		( t4_expected_prev[8] !== 1'bx ) && ( t4_prev[8] !== t4_expected_prev[8] )
		&& ((t4_expected_prev[8] !== last_t4_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[8] = t4_expected_prev[8];
	end
	if (
		( t4_expected_prev[9] !== 1'bx ) && ( t4_prev[9] !== t4_expected_prev[9] )
		&& ((t4_expected_prev[9] !== last_t4_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[9] = t4_expected_prev[9];
	end
	if (
		( t4_expected_prev[10] !== 1'bx ) && ( t4_prev[10] !== t4_expected_prev[10] )
		&& ((t4_expected_prev[10] !== last_t4_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[10] = t4_expected_prev[10];
	end
	if (
		( t4_expected_prev[11] !== 1'bx ) && ( t4_prev[11] !== t4_expected_prev[11] )
		&& ((t4_expected_prev[11] !== last_t4_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[11] = t4_expected_prev[11];
	end
	if (
		( t4_expected_prev[12] !== 1'bx ) && ( t4_prev[12] !== t4_expected_prev[12] )
		&& ((t4_expected_prev[12] !== last_t4_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[12] = t4_expected_prev[12];
	end
	if (
		( t4_expected_prev[13] !== 1'bx ) && ( t4_prev[13] !== t4_expected_prev[13] )
		&& ((t4_expected_prev[13] !== last_t4_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[13] = t4_expected_prev[13];
	end
	if (
		( t4_expected_prev[14] !== 1'bx ) && ( t4_prev[14] !== t4_expected_prev[14] )
		&& ((t4_expected_prev[14] !== last_t4_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[14] = t4_expected_prev[14];
	end
	if (
		( t4_expected_prev[15] !== 1'bx ) && ( t4_prev[15] !== t4_expected_prev[15] )
		&& ((t4_expected_prev[15] !== last_t4_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[15] = t4_expected_prev[15];
	end
	if (
		( t4_expected_prev[16] !== 1'bx ) && ( t4_prev[16] !== t4_expected_prev[16] )
		&& ((t4_expected_prev[16] !== last_t4_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[16] = t4_expected_prev[16];
	end
	if (
		( t4_expected_prev[17] !== 1'bx ) && ( t4_prev[17] !== t4_expected_prev[17] )
		&& ((t4_expected_prev[17] !== last_t4_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[17] = t4_expected_prev[17];
	end
	if (
		( t4_expected_prev[18] !== 1'bx ) && ( t4_prev[18] !== t4_expected_prev[18] )
		&& ((t4_expected_prev[18] !== last_t4_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[18] = t4_expected_prev[18];
	end
	if (
		( t4_expected_prev[19] !== 1'bx ) && ( t4_prev[19] !== t4_expected_prev[19] )
		&& ((t4_expected_prev[19] !== last_t4_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[19] = t4_expected_prev[19];
	end
	if (
		( t4_expected_prev[20] !== 1'bx ) && ( t4_prev[20] !== t4_expected_prev[20] )
		&& ((t4_expected_prev[20] !== last_t4_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[20] = t4_expected_prev[20];
	end
	if (
		( t4_expected_prev[21] !== 1'bx ) && ( t4_prev[21] !== t4_expected_prev[21] )
		&& ((t4_expected_prev[21] !== last_t4_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[21] = t4_expected_prev[21];
	end
	if (
		( t4_expected_prev[22] !== 1'bx ) && ( t4_prev[22] !== t4_expected_prev[22] )
		&& ((t4_expected_prev[22] !== last_t4_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[22] = t4_expected_prev[22];
	end
	if (
		( t4_expected_prev[23] !== 1'bx ) && ( t4_prev[23] !== t4_expected_prev[23] )
		&& ((t4_expected_prev[23] !== last_t4_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[23] = t4_expected_prev[23];
	end
	if (
		( t4_expected_prev[24] !== 1'bx ) && ( t4_prev[24] !== t4_expected_prev[24] )
		&& ((t4_expected_prev[24] !== last_t4_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[24] = t4_expected_prev[24];
	end
	if (
		( t4_expected_prev[25] !== 1'bx ) && ( t4_prev[25] !== t4_expected_prev[25] )
		&& ((t4_expected_prev[25] !== last_t4_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[25] = t4_expected_prev[25];
	end
	if (
		( t4_expected_prev[26] !== 1'bx ) && ( t4_prev[26] !== t4_expected_prev[26] )
		&& ((t4_expected_prev[26] !== last_t4_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[26] = t4_expected_prev[26];
	end
	if (
		( t4_expected_prev[27] !== 1'bx ) && ( t4_prev[27] !== t4_expected_prev[27] )
		&& ((t4_expected_prev[27] !== last_t4_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[27] = t4_expected_prev[27];
	end
	if (
		( t4_expected_prev[28] !== 1'bx ) && ( t4_prev[28] !== t4_expected_prev[28] )
		&& ((t4_expected_prev[28] !== last_t4_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[28] = t4_expected_prev[28];
	end
	if (
		( t4_expected_prev[29] !== 1'bx ) && ( t4_prev[29] !== t4_expected_prev[29] )
		&& ((t4_expected_prev[29] !== last_t4_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[29] = t4_expected_prev[29];
	end
	if (
		( t4_expected_prev[30] !== 1'bx ) && ( t4_prev[30] !== t4_expected_prev[30] )
		&& ((t4_expected_prev[30] !== last_t4_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[30] = t4_expected_prev[30];
	end
	if (
		( t4_expected_prev[31] !== 1'bx ) && ( t4_prev[31] !== t4_expected_prev[31] )
		&& ((t4_expected_prev[31] !== last_t4_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port t4[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", t4_expected_prev);
		$display ("     Real value = %b", t4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_t4_exp[31] = t4_expected_prev[31];
	end
	if (
		( ULAA_expected_prev[0] !== 1'bx ) && ( ULAA_prev[0] !== ULAA_expected_prev[0] )
		&& ((ULAA_expected_prev[0] !== last_ULAA_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[0] = ULAA_expected_prev[0];
	end
	if (
		( ULAA_expected_prev[1] !== 1'bx ) && ( ULAA_prev[1] !== ULAA_expected_prev[1] )
		&& ((ULAA_expected_prev[1] !== last_ULAA_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[1] = ULAA_expected_prev[1];
	end
	if (
		( ULAA_expected_prev[2] !== 1'bx ) && ( ULAA_prev[2] !== ULAA_expected_prev[2] )
		&& ((ULAA_expected_prev[2] !== last_ULAA_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[2] = ULAA_expected_prev[2];
	end
	if (
		( ULAA_expected_prev[3] !== 1'bx ) && ( ULAA_prev[3] !== ULAA_expected_prev[3] )
		&& ((ULAA_expected_prev[3] !== last_ULAA_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[3] = ULAA_expected_prev[3];
	end
	if (
		( ULAA_expected_prev[4] !== 1'bx ) && ( ULAA_prev[4] !== ULAA_expected_prev[4] )
		&& ((ULAA_expected_prev[4] !== last_ULAA_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[4] = ULAA_expected_prev[4];
	end
	if (
		( ULAA_expected_prev[5] !== 1'bx ) && ( ULAA_prev[5] !== ULAA_expected_prev[5] )
		&& ((ULAA_expected_prev[5] !== last_ULAA_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[5] = ULAA_expected_prev[5];
	end
	if (
		( ULAA_expected_prev[6] !== 1'bx ) && ( ULAA_prev[6] !== ULAA_expected_prev[6] )
		&& ((ULAA_expected_prev[6] !== last_ULAA_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[6] = ULAA_expected_prev[6];
	end
	if (
		( ULAA_expected_prev[7] !== 1'bx ) && ( ULAA_prev[7] !== ULAA_expected_prev[7] )
		&& ((ULAA_expected_prev[7] !== last_ULAA_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[7] = ULAA_expected_prev[7];
	end
	if (
		( ULAA_expected_prev[8] !== 1'bx ) && ( ULAA_prev[8] !== ULAA_expected_prev[8] )
		&& ((ULAA_expected_prev[8] !== last_ULAA_exp[8]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[8] = ULAA_expected_prev[8];
	end
	if (
		( ULAA_expected_prev[9] !== 1'bx ) && ( ULAA_prev[9] !== ULAA_expected_prev[9] )
		&& ((ULAA_expected_prev[9] !== last_ULAA_exp[9]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[9] = ULAA_expected_prev[9];
	end
	if (
		( ULAA_expected_prev[10] !== 1'bx ) && ( ULAA_prev[10] !== ULAA_expected_prev[10] )
		&& ((ULAA_expected_prev[10] !== last_ULAA_exp[10]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[10] = ULAA_expected_prev[10];
	end
	if (
		( ULAA_expected_prev[11] !== 1'bx ) && ( ULAA_prev[11] !== ULAA_expected_prev[11] )
		&& ((ULAA_expected_prev[11] !== last_ULAA_exp[11]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[11] = ULAA_expected_prev[11];
	end
	if (
		( ULAA_expected_prev[12] !== 1'bx ) && ( ULAA_prev[12] !== ULAA_expected_prev[12] )
		&& ((ULAA_expected_prev[12] !== last_ULAA_exp[12]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[12] = ULAA_expected_prev[12];
	end
	if (
		( ULAA_expected_prev[13] !== 1'bx ) && ( ULAA_prev[13] !== ULAA_expected_prev[13] )
		&& ((ULAA_expected_prev[13] !== last_ULAA_exp[13]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[13] = ULAA_expected_prev[13];
	end
	if (
		( ULAA_expected_prev[14] !== 1'bx ) && ( ULAA_prev[14] !== ULAA_expected_prev[14] )
		&& ((ULAA_expected_prev[14] !== last_ULAA_exp[14]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[14] = ULAA_expected_prev[14];
	end
	if (
		( ULAA_expected_prev[15] !== 1'bx ) && ( ULAA_prev[15] !== ULAA_expected_prev[15] )
		&& ((ULAA_expected_prev[15] !== last_ULAA_exp[15]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[15] = ULAA_expected_prev[15];
	end
	if (
		( ULAA_expected_prev[16] !== 1'bx ) && ( ULAA_prev[16] !== ULAA_expected_prev[16] )
		&& ((ULAA_expected_prev[16] !== last_ULAA_exp[16]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[16] = ULAA_expected_prev[16];
	end
	if (
		( ULAA_expected_prev[17] !== 1'bx ) && ( ULAA_prev[17] !== ULAA_expected_prev[17] )
		&& ((ULAA_expected_prev[17] !== last_ULAA_exp[17]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[17] = ULAA_expected_prev[17];
	end
	if (
		( ULAA_expected_prev[18] !== 1'bx ) && ( ULAA_prev[18] !== ULAA_expected_prev[18] )
		&& ((ULAA_expected_prev[18] !== last_ULAA_exp[18]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[18] = ULAA_expected_prev[18];
	end
	if (
		( ULAA_expected_prev[19] !== 1'bx ) && ( ULAA_prev[19] !== ULAA_expected_prev[19] )
		&& ((ULAA_expected_prev[19] !== last_ULAA_exp[19]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[19] = ULAA_expected_prev[19];
	end
	if (
		( ULAA_expected_prev[20] !== 1'bx ) && ( ULAA_prev[20] !== ULAA_expected_prev[20] )
		&& ((ULAA_expected_prev[20] !== last_ULAA_exp[20]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[20] = ULAA_expected_prev[20];
	end
	if (
		( ULAA_expected_prev[21] !== 1'bx ) && ( ULAA_prev[21] !== ULAA_expected_prev[21] )
		&& ((ULAA_expected_prev[21] !== last_ULAA_exp[21]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[21] = ULAA_expected_prev[21];
	end
	if (
		( ULAA_expected_prev[22] !== 1'bx ) && ( ULAA_prev[22] !== ULAA_expected_prev[22] )
		&& ((ULAA_expected_prev[22] !== last_ULAA_exp[22]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[22] = ULAA_expected_prev[22];
	end
	if (
		( ULAA_expected_prev[23] !== 1'bx ) && ( ULAA_prev[23] !== ULAA_expected_prev[23] )
		&& ((ULAA_expected_prev[23] !== last_ULAA_exp[23]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[23] = ULAA_expected_prev[23];
	end
	if (
		( ULAA_expected_prev[24] !== 1'bx ) && ( ULAA_prev[24] !== ULAA_expected_prev[24] )
		&& ((ULAA_expected_prev[24] !== last_ULAA_exp[24]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[24] = ULAA_expected_prev[24];
	end
	if (
		( ULAA_expected_prev[25] !== 1'bx ) && ( ULAA_prev[25] !== ULAA_expected_prev[25] )
		&& ((ULAA_expected_prev[25] !== last_ULAA_exp[25]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[25] = ULAA_expected_prev[25];
	end
	if (
		( ULAA_expected_prev[26] !== 1'bx ) && ( ULAA_prev[26] !== ULAA_expected_prev[26] )
		&& ((ULAA_expected_prev[26] !== last_ULAA_exp[26]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[26] = ULAA_expected_prev[26];
	end
	if (
		( ULAA_expected_prev[27] !== 1'bx ) && ( ULAA_prev[27] !== ULAA_expected_prev[27] )
		&& ((ULAA_expected_prev[27] !== last_ULAA_exp[27]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[27] = ULAA_expected_prev[27];
	end
	if (
		( ULAA_expected_prev[28] !== 1'bx ) && ( ULAA_prev[28] !== ULAA_expected_prev[28] )
		&& ((ULAA_expected_prev[28] !== last_ULAA_exp[28]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[28] = ULAA_expected_prev[28];
	end
	if (
		( ULAA_expected_prev[29] !== 1'bx ) && ( ULAA_prev[29] !== ULAA_expected_prev[29] )
		&& ((ULAA_expected_prev[29] !== last_ULAA_exp[29]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[29] = ULAA_expected_prev[29];
	end
	if (
		( ULAA_expected_prev[30] !== 1'bx ) && ( ULAA_prev[30] !== ULAA_expected_prev[30] )
		&& ((ULAA_expected_prev[30] !== last_ULAA_exp[30]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[30] = ULAA_expected_prev[30];
	end
	if (
		( ULAA_expected_prev[31] !== 1'bx ) && ( ULAA_prev[31] !== ULAA_expected_prev[31] )
		&& ((ULAA_expected_prev[31] !== last_ULAA_exp[31]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_ULAA_exp[31] = ULAA_expected_prev[31];
	end
	if (
		( ULAB_expected_prev[0] !== 1'bx ) && ( ULAB_prev[0] !== ULAB_expected_prev[0] )
		&& ((ULAB_expected_prev[0] !== last_ULAB_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[0] = ULAB_expected_prev[0];
	end
	if (
		( ULAB_expected_prev[1] !== 1'bx ) && ( ULAB_prev[1] !== ULAB_expected_prev[1] )
		&& ((ULAB_expected_prev[1] !== last_ULAB_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[1] = ULAB_expected_prev[1];
	end
	if (
		( ULAB_expected_prev[2] !== 1'bx ) && ( ULAB_prev[2] !== ULAB_expected_prev[2] )
		&& ((ULAB_expected_prev[2] !== last_ULAB_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[2] = ULAB_expected_prev[2];
	end
	if (
		( ULAB_expected_prev[3] !== 1'bx ) && ( ULAB_prev[3] !== ULAB_expected_prev[3] )
		&& ((ULAB_expected_prev[3] !== last_ULAB_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[3] = ULAB_expected_prev[3];
	end
	if (
		( ULAB_expected_prev[4] !== 1'bx ) && ( ULAB_prev[4] !== ULAB_expected_prev[4] )
		&& ((ULAB_expected_prev[4] !== last_ULAB_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[4] = ULAB_expected_prev[4];
	end
	if (
		( ULAB_expected_prev[5] !== 1'bx ) && ( ULAB_prev[5] !== ULAB_expected_prev[5] )
		&& ((ULAB_expected_prev[5] !== last_ULAB_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[5] = ULAB_expected_prev[5];
	end
	if (
		( ULAB_expected_prev[6] !== 1'bx ) && ( ULAB_prev[6] !== ULAB_expected_prev[6] )
		&& ((ULAB_expected_prev[6] !== last_ULAB_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[6] = ULAB_expected_prev[6];
	end
	if (
		( ULAB_expected_prev[7] !== 1'bx ) && ( ULAB_prev[7] !== ULAB_expected_prev[7] )
		&& ((ULAB_expected_prev[7] !== last_ULAB_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[7] = ULAB_expected_prev[7];
	end
	if (
		( ULAB_expected_prev[8] !== 1'bx ) && ( ULAB_prev[8] !== ULAB_expected_prev[8] )
		&& ((ULAB_expected_prev[8] !== last_ULAB_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[8] = ULAB_expected_prev[8];
	end
	if (
		( ULAB_expected_prev[9] !== 1'bx ) && ( ULAB_prev[9] !== ULAB_expected_prev[9] )
		&& ((ULAB_expected_prev[9] !== last_ULAB_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[9] = ULAB_expected_prev[9];
	end
	if (
		( ULAB_expected_prev[10] !== 1'bx ) && ( ULAB_prev[10] !== ULAB_expected_prev[10] )
		&& ((ULAB_expected_prev[10] !== last_ULAB_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[10] = ULAB_expected_prev[10];
	end
	if (
		( ULAB_expected_prev[11] !== 1'bx ) && ( ULAB_prev[11] !== ULAB_expected_prev[11] )
		&& ((ULAB_expected_prev[11] !== last_ULAB_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[11] = ULAB_expected_prev[11];
	end
	if (
		( ULAB_expected_prev[12] !== 1'bx ) && ( ULAB_prev[12] !== ULAB_expected_prev[12] )
		&& ((ULAB_expected_prev[12] !== last_ULAB_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[12] = ULAB_expected_prev[12];
	end
	if (
		( ULAB_expected_prev[13] !== 1'bx ) && ( ULAB_prev[13] !== ULAB_expected_prev[13] )
		&& ((ULAB_expected_prev[13] !== last_ULAB_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[13] = ULAB_expected_prev[13];
	end
	if (
		( ULAB_expected_prev[14] !== 1'bx ) && ( ULAB_prev[14] !== ULAB_expected_prev[14] )
		&& ((ULAB_expected_prev[14] !== last_ULAB_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[14] = ULAB_expected_prev[14];
	end
	if (
		( ULAB_expected_prev[15] !== 1'bx ) && ( ULAB_prev[15] !== ULAB_expected_prev[15] )
		&& ((ULAB_expected_prev[15] !== last_ULAB_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[15] = ULAB_expected_prev[15];
	end
	if (
		( ULAB_expected_prev[16] !== 1'bx ) && ( ULAB_prev[16] !== ULAB_expected_prev[16] )
		&& ((ULAB_expected_prev[16] !== last_ULAB_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[16] = ULAB_expected_prev[16];
	end
	if (
		( ULAB_expected_prev[17] !== 1'bx ) && ( ULAB_prev[17] !== ULAB_expected_prev[17] )
		&& ((ULAB_expected_prev[17] !== last_ULAB_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[17] = ULAB_expected_prev[17];
	end
	if (
		( ULAB_expected_prev[18] !== 1'bx ) && ( ULAB_prev[18] !== ULAB_expected_prev[18] )
		&& ((ULAB_expected_prev[18] !== last_ULAB_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[18] = ULAB_expected_prev[18];
	end
	if (
		( ULAB_expected_prev[19] !== 1'bx ) && ( ULAB_prev[19] !== ULAB_expected_prev[19] )
		&& ((ULAB_expected_prev[19] !== last_ULAB_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[19] = ULAB_expected_prev[19];
	end
	if (
		( ULAB_expected_prev[20] !== 1'bx ) && ( ULAB_prev[20] !== ULAB_expected_prev[20] )
		&& ((ULAB_expected_prev[20] !== last_ULAB_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[20] = ULAB_expected_prev[20];
	end
	if (
		( ULAB_expected_prev[21] !== 1'bx ) && ( ULAB_prev[21] !== ULAB_expected_prev[21] )
		&& ((ULAB_expected_prev[21] !== last_ULAB_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[21] = ULAB_expected_prev[21];
	end
	if (
		( ULAB_expected_prev[22] !== 1'bx ) && ( ULAB_prev[22] !== ULAB_expected_prev[22] )
		&& ((ULAB_expected_prev[22] !== last_ULAB_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[22] = ULAB_expected_prev[22];
	end
	if (
		( ULAB_expected_prev[23] !== 1'bx ) && ( ULAB_prev[23] !== ULAB_expected_prev[23] )
		&& ((ULAB_expected_prev[23] !== last_ULAB_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[23] = ULAB_expected_prev[23];
	end
	if (
		( ULAB_expected_prev[24] !== 1'bx ) && ( ULAB_prev[24] !== ULAB_expected_prev[24] )
		&& ((ULAB_expected_prev[24] !== last_ULAB_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[24] = ULAB_expected_prev[24];
	end
	if (
		( ULAB_expected_prev[25] !== 1'bx ) && ( ULAB_prev[25] !== ULAB_expected_prev[25] )
		&& ((ULAB_expected_prev[25] !== last_ULAB_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[25] = ULAB_expected_prev[25];
	end
	if (
		( ULAB_expected_prev[26] !== 1'bx ) && ( ULAB_prev[26] !== ULAB_expected_prev[26] )
		&& ((ULAB_expected_prev[26] !== last_ULAB_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[26] = ULAB_expected_prev[26];
	end
	if (
		( ULAB_expected_prev[27] !== 1'bx ) && ( ULAB_prev[27] !== ULAB_expected_prev[27] )
		&& ((ULAB_expected_prev[27] !== last_ULAB_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[27] = ULAB_expected_prev[27];
	end
	if (
		( ULAB_expected_prev[28] !== 1'bx ) && ( ULAB_prev[28] !== ULAB_expected_prev[28] )
		&& ((ULAB_expected_prev[28] !== last_ULAB_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[28] = ULAB_expected_prev[28];
	end
	if (
		( ULAB_expected_prev[29] !== 1'bx ) && ( ULAB_prev[29] !== ULAB_expected_prev[29] )
		&& ((ULAB_expected_prev[29] !== last_ULAB_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[29] = ULAB_expected_prev[29];
	end
	if (
		( ULAB_expected_prev[30] !== 1'bx ) && ( ULAB_prev[30] !== ULAB_expected_prev[30] )
		&& ((ULAB_expected_prev[30] !== last_ULAB_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[30] = ULAB_expected_prev[30];
	end
	if (
		( ULAB_expected_prev[31] !== 1'bx ) && ( ULAB_prev[31] !== ULAB_expected_prev[31] )
		&& ((ULAB_expected_prev[31] !== last_ULAB_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_ULAB_exp[31] = ULAB_expected_prev[31];
	end
	if (
		( ULAOPCODE_expected_prev[0] !== 1'bx ) && ( ULAOPCODE_prev[0] !== ULAOPCODE_expected_prev[0] )
		&& ((ULAOPCODE_expected_prev[0] !== last_ULAOPCODE_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULAOPCODE_exp[0] = ULAOPCODE_expected_prev[0];
	end
	if (
		( ULAOPCODE_expected_prev[1] !== 1'bx ) && ( ULAOPCODE_prev[1] !== ULAOPCODE_expected_prev[1] )
		&& ((ULAOPCODE_expected_prev[1] !== last_ULAOPCODE_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULAOPCODE_exp[1] = ULAOPCODE_expected_prev[1];
	end
	if (
		( ULAOPCODE_expected_prev[2] !== 1'bx ) && ( ULAOPCODE_prev[2] !== ULAOPCODE_expected_prev[2] )
		&& ((ULAOPCODE_expected_prev[2] !== last_ULAOPCODE_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULAOPCODE_exp[2] = ULAOPCODE_expected_prev[2];
	end
	if (
		( ULAOPCODE_expected_prev[3] !== 1'bx ) && ( ULAOPCODE_prev[3] !== ULAOPCODE_expected_prev[3] )
		&& ((ULAOPCODE_expected_prev[3] !== last_ULAOPCODE_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_ULAOPCODE_exp[3] = ULAOPCODE_expected_prev[3];
	end
	if (
		( UnknownOpcode_expected_prev !== 1'bx ) && ( UnknownOpcode_prev !== UnknownOpcode_expected_prev )
		&& ((UnknownOpcode_expected_prev !== last_UnknownOpcode_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port UnknownOpcode :: @time = %t",  $realtime);
		$display ("     Expected value = %b", UnknownOpcode_expected_prev);
		$display ("     Real value = %b", UnknownOpcode_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_UnknownOpcode_exp = UnknownOpcode_expected_prev;
	end
	if (
		( zero_expected_prev[0] !== 1'bx ) && ( zero_prev[0] !== zero_expected_prev[0] )
		&& ((zero_expected_prev[0] !== last_zero_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[0] = zero_expected_prev[0];
	end
	if (
		( zero_expected_prev[1] !== 1'bx ) && ( zero_prev[1] !== zero_expected_prev[1] )
		&& ((zero_expected_prev[1] !== last_zero_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[1] = zero_expected_prev[1];
	end
	if (
		( zero_expected_prev[2] !== 1'bx ) && ( zero_prev[2] !== zero_expected_prev[2] )
		&& ((zero_expected_prev[2] !== last_zero_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[2] = zero_expected_prev[2];
	end
	if (
		( zero_expected_prev[3] !== 1'bx ) && ( zero_prev[3] !== zero_expected_prev[3] )
		&& ((zero_expected_prev[3] !== last_zero_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[3] = zero_expected_prev[3];
	end
	if (
		( zero_expected_prev[4] !== 1'bx ) && ( zero_prev[4] !== zero_expected_prev[4] )
		&& ((zero_expected_prev[4] !== last_zero_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[4] = zero_expected_prev[4];
	end
	if (
		( zero_expected_prev[5] !== 1'bx ) && ( zero_prev[5] !== zero_expected_prev[5] )
		&& ((zero_expected_prev[5] !== last_zero_exp[5]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[5] = zero_expected_prev[5];
	end
	if (
		( zero_expected_prev[6] !== 1'bx ) && ( zero_prev[6] !== zero_expected_prev[6] )
		&& ((zero_expected_prev[6] !== last_zero_exp[6]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[6] = zero_expected_prev[6];
	end
	if (
		( zero_expected_prev[7] !== 1'bx ) && ( zero_prev[7] !== zero_expected_prev[7] )
		&& ((zero_expected_prev[7] !== last_zero_exp[7]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[7] = zero_expected_prev[7];
	end
	if (
		( zero_expected_prev[8] !== 1'bx ) && ( zero_prev[8] !== zero_expected_prev[8] )
		&& ((zero_expected_prev[8] !== last_zero_exp[8]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[8] = zero_expected_prev[8];
	end
	if (
		( zero_expected_prev[9] !== 1'bx ) && ( zero_prev[9] !== zero_expected_prev[9] )
		&& ((zero_expected_prev[9] !== last_zero_exp[9]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[9] = zero_expected_prev[9];
	end
	if (
		( zero_expected_prev[10] !== 1'bx ) && ( zero_prev[10] !== zero_expected_prev[10] )
		&& ((zero_expected_prev[10] !== last_zero_exp[10]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[10] = zero_expected_prev[10];
	end
	if (
		( zero_expected_prev[11] !== 1'bx ) && ( zero_prev[11] !== zero_expected_prev[11] )
		&& ((zero_expected_prev[11] !== last_zero_exp[11]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[11] = zero_expected_prev[11];
	end
	if (
		( zero_expected_prev[12] !== 1'bx ) && ( zero_prev[12] !== zero_expected_prev[12] )
		&& ((zero_expected_prev[12] !== last_zero_exp[12]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[12] = zero_expected_prev[12];
	end
	if (
		( zero_expected_prev[13] !== 1'bx ) && ( zero_prev[13] !== zero_expected_prev[13] )
		&& ((zero_expected_prev[13] !== last_zero_exp[13]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[13] = zero_expected_prev[13];
	end
	if (
		( zero_expected_prev[14] !== 1'bx ) && ( zero_prev[14] !== zero_expected_prev[14] )
		&& ((zero_expected_prev[14] !== last_zero_exp[14]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[14] = zero_expected_prev[14];
	end
	if (
		( zero_expected_prev[15] !== 1'bx ) && ( zero_prev[15] !== zero_expected_prev[15] )
		&& ((zero_expected_prev[15] !== last_zero_exp[15]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[15] = zero_expected_prev[15];
	end
	if (
		( zero_expected_prev[16] !== 1'bx ) && ( zero_prev[16] !== zero_expected_prev[16] )
		&& ((zero_expected_prev[16] !== last_zero_exp[16]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[16] = zero_expected_prev[16];
	end
	if (
		( zero_expected_prev[17] !== 1'bx ) && ( zero_prev[17] !== zero_expected_prev[17] )
		&& ((zero_expected_prev[17] !== last_zero_exp[17]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[17] = zero_expected_prev[17];
	end
	if (
		( zero_expected_prev[18] !== 1'bx ) && ( zero_prev[18] !== zero_expected_prev[18] )
		&& ((zero_expected_prev[18] !== last_zero_exp[18]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[18] = zero_expected_prev[18];
	end
	if (
		( zero_expected_prev[19] !== 1'bx ) && ( zero_prev[19] !== zero_expected_prev[19] )
		&& ((zero_expected_prev[19] !== last_zero_exp[19]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[19] = zero_expected_prev[19];
	end
	if (
		( zero_expected_prev[20] !== 1'bx ) && ( zero_prev[20] !== zero_expected_prev[20] )
		&& ((zero_expected_prev[20] !== last_zero_exp[20]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[20] = zero_expected_prev[20];
	end
	if (
		( zero_expected_prev[21] !== 1'bx ) && ( zero_prev[21] !== zero_expected_prev[21] )
		&& ((zero_expected_prev[21] !== last_zero_exp[21]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[21] = zero_expected_prev[21];
	end
	if (
		( zero_expected_prev[22] !== 1'bx ) && ( zero_prev[22] !== zero_expected_prev[22] )
		&& ((zero_expected_prev[22] !== last_zero_exp[22]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[22] = zero_expected_prev[22];
	end
	if (
		( zero_expected_prev[23] !== 1'bx ) && ( zero_prev[23] !== zero_expected_prev[23] )
		&& ((zero_expected_prev[23] !== last_zero_exp[23]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[23] = zero_expected_prev[23];
	end
	if (
		( zero_expected_prev[24] !== 1'bx ) && ( zero_prev[24] !== zero_expected_prev[24] )
		&& ((zero_expected_prev[24] !== last_zero_exp[24]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[24] = zero_expected_prev[24];
	end
	if (
		( zero_expected_prev[25] !== 1'bx ) && ( zero_prev[25] !== zero_expected_prev[25] )
		&& ((zero_expected_prev[25] !== last_zero_exp[25]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[25] = zero_expected_prev[25];
	end
	if (
		( zero_expected_prev[26] !== 1'bx ) && ( zero_prev[26] !== zero_expected_prev[26] )
		&& ((zero_expected_prev[26] !== last_zero_exp[26]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[26] = zero_expected_prev[26];
	end
	if (
		( zero_expected_prev[27] !== 1'bx ) && ( zero_prev[27] !== zero_expected_prev[27] )
		&& ((zero_expected_prev[27] !== last_zero_exp[27]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[27] = zero_expected_prev[27];
	end
	if (
		( zero_expected_prev[28] !== 1'bx ) && ( zero_prev[28] !== zero_expected_prev[28] )
		&& ((zero_expected_prev[28] !== last_zero_exp[28]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[28] = zero_expected_prev[28];
	end
	if (
		( zero_expected_prev[29] !== 1'bx ) && ( zero_prev[29] !== zero_expected_prev[29] )
		&& ((zero_expected_prev[29] !== last_zero_exp[29]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[29] = zero_expected_prev[29];
	end
	if (
		( zero_expected_prev[30] !== 1'bx ) && ( zero_prev[30] !== zero_expected_prev[30] )
		&& ((zero_expected_prev[30] !== last_zero_exp[30]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[30] = zero_expected_prev[30];
	end
	if (
		( zero_expected_prev[31] !== 1'bx ) && ( zero_prev[31] !== zero_expected_prev[31] )
		&& ((zero_expected_prev[31] !== last_zero_exp[31]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_zero_exp[31] = zero_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg MiniCLOCK;
// wires                                               
wire [31:0] at;
wire Clock;
wire [13:0] CONVERTEDADDR;
wire [31:0] INSTRUCAO;
wire [31:0] IROUTPUT;
wire JR;
wire Jump;
wire OVERFLOW;
wire [31:0] PC;
wire [31:0] ra;
wire [31:0] RULA;
wire [31:0] t0;
wire [31:0] t1;
wire [31:0] t2;
wire [31:0] t3;
wire [31:0] t4;
wire [31:0] ULAA;
wire [31:0] ULAB;
wire [3:0] ULAOPCODE;
wire UnknownOpcode;
wire [31:0] zero;

wire sampler;                             

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.at(at),
	.Clock(Clock),
	.CONVERTEDADDR(CONVERTEDADDR),
	.INSTRUCAO(INSTRUCAO),
	.IROUTPUT(IROUTPUT),
	.JR(JR),
	.Jump(Jump),
	.MiniCLOCK(MiniCLOCK),
	.OVERFLOW(OVERFLOW),
	.PC(PC),
	.ra(ra),
	.RULA(RULA),
	.t0(t0),
	.t1(t1),
	.t2(t2),
	.t3(t3),
	.t4(t4),
	.ULAA(ULAA),
	.ULAB(ULAB),
	.ULAOPCODE(ULAOPCODE),
	.UnknownOpcode(UnknownOpcode),
	.zero(zero)
);

// MiniCLOCK
always
begin
	MiniCLOCK = 1'b0;
	MiniCLOCK = #10000 1'b1;
	#10000;
end 

main_vlg_sample_tst tb_sample (
	.MiniCLOCK(MiniCLOCK),
	.sampler_tx(sampler)
);

main_vlg_check_tst tb_out(
	.at(at),
	.Clock(Clock),
	.CONVERTEDADDR(CONVERTEDADDR),
	.INSTRUCAO(INSTRUCAO),
	.IROUTPUT(IROUTPUT),
	.JR(JR),
	.Jump(Jump),
	.OVERFLOW(OVERFLOW),
	.PC(PC),
	.ra(ra),
	.RULA(RULA),
	.t0(t0),
	.t1(t1),
	.t2(t2),
	.t3(t3),
	.t4(t4),
	.ULAA(ULAA),
	.ULAB(ULAB),
	.ULAOPCODE(ULAOPCODE),
	.UnknownOpcode(UnknownOpcode),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

