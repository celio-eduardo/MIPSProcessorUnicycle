// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/05/2025 16:08:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_vlg_sample_tst(
	CLOCK,
	sampler_tx
);
input  CLOCK;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_vlg_check_tst (
	EscreveREG,
	INSTRUCAO,
	IROUTPUT,
	PC,
	ULAA,
	ULAB,
	ULAOPCODE,
	ULAR,
	sampler_rx
);
input  EscreveREG;
input [31:0] INSTRUCAO;
input [31:0] IROUTPUT;
input [31:0] PC;
input [31:0] ULAA;
input [31:0] ULAB;
input [3:0] ULAOPCODE;
input [31:0] ULAR;
input sampler_rx;

reg  EscreveREG_expected;
reg [31:0] INSTRUCAO_expected;
reg [31:0] IROUTPUT_expected;
reg [31:0] PC_expected;
reg [31:0] ULAA_expected;
reg [31:0] ULAB_expected;
reg [3:0] ULAOPCODE_expected;
reg [31:0] ULAR_expected;

reg  EscreveREG_prev;
reg [31:0] INSTRUCAO_prev;
reg [31:0] IROUTPUT_prev;
reg [31:0] PC_prev;
reg [31:0] ULAA_prev;
reg [31:0] ULAB_prev;
reg [3:0] ULAOPCODE_prev;
reg [31:0] ULAR_prev;

reg  EscreveREG_expected_prev;
reg [31:0] INSTRUCAO_expected_prev;
reg [31:0] IROUTPUT_expected_prev;
reg [31:0] PC_expected_prev;
reg [31:0] ULAA_expected_prev;
reg [31:0] ULAB_expected_prev;
reg [3:0] ULAOPCODE_expected_prev;
reg [31:0] ULAR_expected_prev;

reg  last_EscreveREG_exp;
reg [31:0] last_INSTRUCAO_exp;
reg [31:0] last_IROUTPUT_exp;
reg [31:0] last_PC_exp;
reg [31:0] last_ULAA_exp;
reg [31:0] last_ULAB_exp;
reg [3:0] last_ULAOPCODE_exp;
reg [31:0] last_ULAR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	EscreveREG_prev = EscreveREG;
	INSTRUCAO_prev = INSTRUCAO;
	IROUTPUT_prev = IROUTPUT;
	PC_prev = PC;
	ULAA_prev = ULAA;
	ULAB_prev = ULAB;
	ULAOPCODE_prev = ULAOPCODE;
	ULAR_prev = ULAR;
end

// update expected /o prevs

always @(trigger)
begin
	EscreveREG_expected_prev = EscreveREG_expected;
	INSTRUCAO_expected_prev = INSTRUCAO_expected;
	IROUTPUT_expected_prev = IROUTPUT_expected;
	PC_expected_prev = PC_expected;
	ULAA_expected_prev = ULAA_expected;
	ULAB_expected_prev = ULAB_expected;
	ULAOPCODE_expected_prev = ULAOPCODE_expected;
	ULAR_expected_prev = ULAR_expected;
end



// expected EscreveREG
initial
begin
	EscreveREG_expected = 1'bX;
end 
// expected INSTRUCAO[ 31 ]
initial
begin
	INSTRUCAO_expected[31] = 1'bX;
end 
// expected INSTRUCAO[ 30 ]
initial
begin
	INSTRUCAO_expected[30] = 1'bX;
end 
// expected INSTRUCAO[ 29 ]
initial
begin
	INSTRUCAO_expected[29] = 1'bX;
end 
// expected INSTRUCAO[ 28 ]
initial
begin
	INSTRUCAO_expected[28] = 1'bX;
end 
// expected INSTRUCAO[ 27 ]
initial
begin
	INSTRUCAO_expected[27] = 1'bX;
end 
// expected INSTRUCAO[ 26 ]
initial
begin
	INSTRUCAO_expected[26] = 1'bX;
end 
// expected INSTRUCAO[ 25 ]
initial
begin
	INSTRUCAO_expected[25] = 1'bX;
end 
// expected INSTRUCAO[ 24 ]
initial
begin
	INSTRUCAO_expected[24] = 1'bX;
end 
// expected INSTRUCAO[ 23 ]
initial
begin
	INSTRUCAO_expected[23] = 1'bX;
end 
// expected INSTRUCAO[ 22 ]
initial
begin
	INSTRUCAO_expected[22] = 1'bX;
end 
// expected INSTRUCAO[ 21 ]
initial
begin
	INSTRUCAO_expected[21] = 1'bX;
end 
// expected INSTRUCAO[ 20 ]
initial
begin
	INSTRUCAO_expected[20] = 1'bX;
end 
// expected INSTRUCAO[ 19 ]
initial
begin
	INSTRUCAO_expected[19] = 1'bX;
end 
// expected INSTRUCAO[ 18 ]
initial
begin
	INSTRUCAO_expected[18] = 1'bX;
end 
// expected INSTRUCAO[ 17 ]
initial
begin
	INSTRUCAO_expected[17] = 1'bX;
end 
// expected INSTRUCAO[ 16 ]
initial
begin
	INSTRUCAO_expected[16] = 1'bX;
end 
// expected INSTRUCAO[ 15 ]
initial
begin
	INSTRUCAO_expected[15] = 1'bX;
end 
// expected INSTRUCAO[ 14 ]
initial
begin
	INSTRUCAO_expected[14] = 1'bX;
end 
// expected INSTRUCAO[ 13 ]
initial
begin
	INSTRUCAO_expected[13] = 1'bX;
end 
// expected INSTRUCAO[ 12 ]
initial
begin
	INSTRUCAO_expected[12] = 1'bX;
end 
// expected INSTRUCAO[ 11 ]
initial
begin
	INSTRUCAO_expected[11] = 1'bX;
end 
// expected INSTRUCAO[ 10 ]
initial
begin
	INSTRUCAO_expected[10] = 1'bX;
end 
// expected INSTRUCAO[ 9 ]
initial
begin
	INSTRUCAO_expected[9] = 1'bX;
end 
// expected INSTRUCAO[ 8 ]
initial
begin
	INSTRUCAO_expected[8] = 1'bX;
end 
// expected INSTRUCAO[ 7 ]
initial
begin
	INSTRUCAO_expected[7] = 1'bX;
end 
// expected INSTRUCAO[ 6 ]
initial
begin
	INSTRUCAO_expected[6] = 1'bX;
end 
// expected INSTRUCAO[ 5 ]
initial
begin
	INSTRUCAO_expected[5] = 1'bX;
end 
// expected INSTRUCAO[ 4 ]
initial
begin
	INSTRUCAO_expected[4] = 1'bX;
end 
// expected INSTRUCAO[ 3 ]
initial
begin
	INSTRUCAO_expected[3] = 1'bX;
end 
// expected INSTRUCAO[ 2 ]
initial
begin
	INSTRUCAO_expected[2] = 1'bX;
end 
// expected INSTRUCAO[ 1 ]
initial
begin
	INSTRUCAO_expected[1] = 1'bX;
end 
// expected INSTRUCAO[ 0 ]
initial
begin
	INSTRUCAO_expected[0] = 1'bX;
end 
// expected IROUTPUT[ 31 ]
initial
begin
	IROUTPUT_expected[31] = 1'bX;
end 
// expected IROUTPUT[ 30 ]
initial
begin
	IROUTPUT_expected[30] = 1'bX;
end 
// expected IROUTPUT[ 29 ]
initial
begin
	IROUTPUT_expected[29] = 1'bX;
end 
// expected IROUTPUT[ 28 ]
initial
begin
	IROUTPUT_expected[28] = 1'bX;
end 
// expected IROUTPUT[ 27 ]
initial
begin
	IROUTPUT_expected[27] = 1'bX;
end 
// expected IROUTPUT[ 26 ]
initial
begin
	IROUTPUT_expected[26] = 1'bX;
end 
// expected IROUTPUT[ 25 ]
initial
begin
	IROUTPUT_expected[25] = 1'bX;
end 
// expected IROUTPUT[ 24 ]
initial
begin
	IROUTPUT_expected[24] = 1'bX;
end 
// expected IROUTPUT[ 23 ]
initial
begin
	IROUTPUT_expected[23] = 1'bX;
end 
// expected IROUTPUT[ 22 ]
initial
begin
	IROUTPUT_expected[22] = 1'bX;
end 
// expected IROUTPUT[ 21 ]
initial
begin
	IROUTPUT_expected[21] = 1'bX;
end 
// expected IROUTPUT[ 20 ]
initial
begin
	IROUTPUT_expected[20] = 1'bX;
end 
// expected IROUTPUT[ 19 ]
initial
begin
	IROUTPUT_expected[19] = 1'bX;
end 
// expected IROUTPUT[ 18 ]
initial
begin
	IROUTPUT_expected[18] = 1'bX;
end 
// expected IROUTPUT[ 17 ]
initial
begin
	IROUTPUT_expected[17] = 1'bX;
end 
// expected IROUTPUT[ 16 ]
initial
begin
	IROUTPUT_expected[16] = 1'bX;
end 
// expected IROUTPUT[ 15 ]
initial
begin
	IROUTPUT_expected[15] = 1'bX;
end 
// expected IROUTPUT[ 14 ]
initial
begin
	IROUTPUT_expected[14] = 1'bX;
end 
// expected IROUTPUT[ 13 ]
initial
begin
	IROUTPUT_expected[13] = 1'bX;
end 
// expected IROUTPUT[ 12 ]
initial
begin
	IROUTPUT_expected[12] = 1'bX;
end 
// expected IROUTPUT[ 11 ]
initial
begin
	IROUTPUT_expected[11] = 1'bX;
end 
// expected IROUTPUT[ 10 ]
initial
begin
	IROUTPUT_expected[10] = 1'bX;
end 
// expected IROUTPUT[ 9 ]
initial
begin
	IROUTPUT_expected[9] = 1'bX;
end 
// expected IROUTPUT[ 8 ]
initial
begin
	IROUTPUT_expected[8] = 1'bX;
end 
// expected IROUTPUT[ 7 ]
initial
begin
	IROUTPUT_expected[7] = 1'bX;
end 
// expected IROUTPUT[ 6 ]
initial
begin
	IROUTPUT_expected[6] = 1'bX;
end 
// expected IROUTPUT[ 5 ]
initial
begin
	IROUTPUT_expected[5] = 1'bX;
end 
// expected IROUTPUT[ 4 ]
initial
begin
	IROUTPUT_expected[4] = 1'bX;
end 
// expected IROUTPUT[ 3 ]
initial
begin
	IROUTPUT_expected[3] = 1'bX;
end 
// expected IROUTPUT[ 2 ]
initial
begin
	IROUTPUT_expected[2] = 1'bX;
end 
// expected IROUTPUT[ 1 ]
initial
begin
	IROUTPUT_expected[1] = 1'bX;
end 
// expected IROUTPUT[ 0 ]
initial
begin
	IROUTPUT_expected[0] = 1'bX;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'bX;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'bX;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'bX;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'bX;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'bX;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'bX;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'bX;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'bX;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'bX;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'bX;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'bX;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'bX;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'bX;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'bX;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'bX;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'bX;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'bX;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'bX;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'bX;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'bX;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'bX;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'bX;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'bX;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'bX;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'bX;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'bX;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'bX;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'bX;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'bX;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'bX;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'bX;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'bX;
end 
// expected ULAA[ 31 ]
initial
begin
	ULAA_expected[31] = 1'bX;
end 
// expected ULAA[ 30 ]
initial
begin
	ULAA_expected[30] = 1'bX;
end 
// expected ULAA[ 29 ]
initial
begin
	ULAA_expected[29] = 1'bX;
end 
// expected ULAA[ 28 ]
initial
begin
	ULAA_expected[28] = 1'bX;
end 
// expected ULAA[ 27 ]
initial
begin
	ULAA_expected[27] = 1'bX;
end 
// expected ULAA[ 26 ]
initial
begin
	ULAA_expected[26] = 1'bX;
end 
// expected ULAA[ 25 ]
initial
begin
	ULAA_expected[25] = 1'bX;
end 
// expected ULAA[ 24 ]
initial
begin
	ULAA_expected[24] = 1'bX;
end 
// expected ULAA[ 23 ]
initial
begin
	ULAA_expected[23] = 1'bX;
end 
// expected ULAA[ 22 ]
initial
begin
	ULAA_expected[22] = 1'bX;
end 
// expected ULAA[ 21 ]
initial
begin
	ULAA_expected[21] = 1'bX;
end 
// expected ULAA[ 20 ]
initial
begin
	ULAA_expected[20] = 1'bX;
end 
// expected ULAA[ 19 ]
initial
begin
	ULAA_expected[19] = 1'bX;
end 
// expected ULAA[ 18 ]
initial
begin
	ULAA_expected[18] = 1'bX;
end 
// expected ULAA[ 17 ]
initial
begin
	ULAA_expected[17] = 1'bX;
end 
// expected ULAA[ 16 ]
initial
begin
	ULAA_expected[16] = 1'bX;
end 
// expected ULAA[ 15 ]
initial
begin
	ULAA_expected[15] = 1'bX;
end 
// expected ULAA[ 14 ]
initial
begin
	ULAA_expected[14] = 1'bX;
end 
// expected ULAA[ 13 ]
initial
begin
	ULAA_expected[13] = 1'bX;
end 
// expected ULAA[ 12 ]
initial
begin
	ULAA_expected[12] = 1'bX;
end 
// expected ULAA[ 11 ]
initial
begin
	ULAA_expected[11] = 1'bX;
end 
// expected ULAA[ 10 ]
initial
begin
	ULAA_expected[10] = 1'bX;
end 
// expected ULAA[ 9 ]
initial
begin
	ULAA_expected[9] = 1'bX;
end 
// expected ULAA[ 8 ]
initial
begin
	ULAA_expected[8] = 1'bX;
end 
// expected ULAA[ 7 ]
initial
begin
	ULAA_expected[7] = 1'bX;
end 
// expected ULAA[ 6 ]
initial
begin
	ULAA_expected[6] = 1'bX;
end 
// expected ULAA[ 5 ]
initial
begin
	ULAA_expected[5] = 1'bX;
end 
// expected ULAA[ 4 ]
initial
begin
	ULAA_expected[4] = 1'bX;
end 
// expected ULAA[ 3 ]
initial
begin
	ULAA_expected[3] = 1'bX;
end 
// expected ULAA[ 2 ]
initial
begin
	ULAA_expected[2] = 1'bX;
end 
// expected ULAA[ 1 ]
initial
begin
	ULAA_expected[1] = 1'bX;
end 
// expected ULAA[ 0 ]
initial
begin
	ULAA_expected[0] = 1'bX;
end 
// expected ULAB[ 31 ]
initial
begin
	ULAB_expected[31] = 1'bX;
end 
// expected ULAB[ 30 ]
initial
begin
	ULAB_expected[30] = 1'bX;
end 
// expected ULAB[ 29 ]
initial
begin
	ULAB_expected[29] = 1'bX;
end 
// expected ULAB[ 28 ]
initial
begin
	ULAB_expected[28] = 1'bX;
end 
// expected ULAB[ 27 ]
initial
begin
	ULAB_expected[27] = 1'bX;
end 
// expected ULAB[ 26 ]
initial
begin
	ULAB_expected[26] = 1'bX;
end 
// expected ULAB[ 25 ]
initial
begin
	ULAB_expected[25] = 1'bX;
end 
// expected ULAB[ 24 ]
initial
begin
	ULAB_expected[24] = 1'bX;
end 
// expected ULAB[ 23 ]
initial
begin
	ULAB_expected[23] = 1'bX;
end 
// expected ULAB[ 22 ]
initial
begin
	ULAB_expected[22] = 1'bX;
end 
// expected ULAB[ 21 ]
initial
begin
	ULAB_expected[21] = 1'bX;
end 
// expected ULAB[ 20 ]
initial
begin
	ULAB_expected[20] = 1'bX;
end 
// expected ULAB[ 19 ]
initial
begin
	ULAB_expected[19] = 1'bX;
end 
// expected ULAB[ 18 ]
initial
begin
	ULAB_expected[18] = 1'bX;
end 
// expected ULAB[ 17 ]
initial
begin
	ULAB_expected[17] = 1'bX;
end 
// expected ULAB[ 16 ]
initial
begin
	ULAB_expected[16] = 1'bX;
end 
// expected ULAB[ 15 ]
initial
begin
	ULAB_expected[15] = 1'bX;
end 
// expected ULAB[ 14 ]
initial
begin
	ULAB_expected[14] = 1'bX;
end 
// expected ULAB[ 13 ]
initial
begin
	ULAB_expected[13] = 1'bX;
end 
// expected ULAB[ 12 ]
initial
begin
	ULAB_expected[12] = 1'bX;
end 
// expected ULAB[ 11 ]
initial
begin
	ULAB_expected[11] = 1'bX;
end 
// expected ULAB[ 10 ]
initial
begin
	ULAB_expected[10] = 1'bX;
end 
// expected ULAB[ 9 ]
initial
begin
	ULAB_expected[9] = 1'bX;
end 
// expected ULAB[ 8 ]
initial
begin
	ULAB_expected[8] = 1'bX;
end 
// expected ULAB[ 7 ]
initial
begin
	ULAB_expected[7] = 1'bX;
end 
// expected ULAB[ 6 ]
initial
begin
	ULAB_expected[6] = 1'bX;
end 
// expected ULAB[ 5 ]
initial
begin
	ULAB_expected[5] = 1'bX;
end 
// expected ULAB[ 4 ]
initial
begin
	ULAB_expected[4] = 1'bX;
end 
// expected ULAB[ 3 ]
initial
begin
	ULAB_expected[3] = 1'bX;
end 
// expected ULAB[ 2 ]
initial
begin
	ULAB_expected[2] = 1'bX;
end 
// expected ULAB[ 1 ]
initial
begin
	ULAB_expected[1] = 1'bX;
end 
// expected ULAB[ 0 ]
initial
begin
	ULAB_expected[0] = 1'bX;
end 
// expected ULAOPCODE[ 3 ]
initial
begin
	ULAOPCODE_expected[3] = 1'bX;
end 
// expected ULAOPCODE[ 2 ]
initial
begin
	ULAOPCODE_expected[2] = 1'bX;
end 
// expected ULAOPCODE[ 1 ]
initial
begin
	ULAOPCODE_expected[1] = 1'bX;
end 
// expected ULAOPCODE[ 0 ]
initial
begin
	ULAOPCODE_expected[0] = 1'bX;
end 
// expected ULAR[ 31 ]
initial
begin
	ULAR_expected[31] = 1'bX;
end 
// expected ULAR[ 30 ]
initial
begin
	ULAR_expected[30] = 1'bX;
end 
// expected ULAR[ 29 ]
initial
begin
	ULAR_expected[29] = 1'bX;
end 
// expected ULAR[ 28 ]
initial
begin
	ULAR_expected[28] = 1'bX;
end 
// expected ULAR[ 27 ]
initial
begin
	ULAR_expected[27] = 1'bX;
end 
// expected ULAR[ 26 ]
initial
begin
	ULAR_expected[26] = 1'bX;
end 
// expected ULAR[ 25 ]
initial
begin
	ULAR_expected[25] = 1'bX;
end 
// expected ULAR[ 24 ]
initial
begin
	ULAR_expected[24] = 1'bX;
end 
// expected ULAR[ 23 ]
initial
begin
	ULAR_expected[23] = 1'bX;
end 
// expected ULAR[ 22 ]
initial
begin
	ULAR_expected[22] = 1'bX;
end 
// expected ULAR[ 21 ]
initial
begin
	ULAR_expected[21] = 1'bX;
end 
// expected ULAR[ 20 ]
initial
begin
	ULAR_expected[20] = 1'bX;
end 
// expected ULAR[ 19 ]
initial
begin
	ULAR_expected[19] = 1'bX;
end 
// expected ULAR[ 18 ]
initial
begin
	ULAR_expected[18] = 1'bX;
end 
// expected ULAR[ 17 ]
initial
begin
	ULAR_expected[17] = 1'bX;
end 
// expected ULAR[ 16 ]
initial
begin
	ULAR_expected[16] = 1'bX;
end 
// expected ULAR[ 15 ]
initial
begin
	ULAR_expected[15] = 1'bX;
end 
// expected ULAR[ 14 ]
initial
begin
	ULAR_expected[14] = 1'bX;
end 
// expected ULAR[ 13 ]
initial
begin
	ULAR_expected[13] = 1'bX;
end 
// expected ULAR[ 12 ]
initial
begin
	ULAR_expected[12] = 1'bX;
end 
// expected ULAR[ 11 ]
initial
begin
	ULAR_expected[11] = 1'bX;
end 
// expected ULAR[ 10 ]
initial
begin
	ULAR_expected[10] = 1'bX;
end 
// expected ULAR[ 9 ]
initial
begin
	ULAR_expected[9] = 1'bX;
end 
// expected ULAR[ 8 ]
initial
begin
	ULAR_expected[8] = 1'bX;
end 
// expected ULAR[ 7 ]
initial
begin
	ULAR_expected[7] = 1'bX;
end 
// expected ULAR[ 6 ]
initial
begin
	ULAR_expected[6] = 1'bX;
end 
// expected ULAR[ 5 ]
initial
begin
	ULAR_expected[5] = 1'bX;
end 
// expected ULAR[ 4 ]
initial
begin
	ULAR_expected[4] = 1'bX;
end 
// expected ULAR[ 3 ]
initial
begin
	ULAR_expected[3] = 1'bX;
end 
// expected ULAR[ 2 ]
initial
begin
	ULAR_expected[2] = 1'bX;
end 
// expected ULAR[ 1 ]
initial
begin
	ULAR_expected[1] = 1'bX;
end 
// expected ULAR[ 0 ]
initial
begin
	ULAR_expected[0] = 1'bX;
end 
// generate trigger
always @(EscreveREG_expected or EscreveREG or INSTRUCAO_expected or INSTRUCAO or IROUTPUT_expected or IROUTPUT or PC_expected or PC or ULAA_expected or ULAA or ULAB_expected or ULAB or ULAOPCODE_expected or ULAOPCODE or ULAR_expected or ULAR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected EscreveREG = %b | expected INSTRUCAO = %b | expected IROUTPUT = %b | expected PC = %b | expected ULAA = %b | expected ULAB = %b | expected ULAOPCODE = %b | expected ULAR = %b | ",EscreveREG_expected_prev,INSTRUCAO_expected_prev,IROUTPUT_expected_prev,PC_expected_prev,ULAA_expected_prev,ULAB_expected_prev,ULAOPCODE_expected_prev,ULAR_expected_prev);
	$display("| real EscreveREG = %b | real INSTRUCAO = %b | real IROUTPUT = %b | real PC = %b | real ULAA = %b | real ULAB = %b | real ULAOPCODE = %b | real ULAR = %b | ",EscreveREG_prev,INSTRUCAO_prev,IROUTPUT_prev,PC_prev,ULAA_prev,ULAB_prev,ULAOPCODE_prev,ULAR_prev);
`endif
	if (
		( EscreveREG_expected_prev !== 1'bx ) && ( EscreveREG_prev !== EscreveREG_expected_prev )
		&& ((EscreveREG_expected_prev !== last_EscreveREG_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscreveREG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscreveREG_expected_prev);
		$display ("     Real value = %b", EscreveREG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EscreveREG_exp = EscreveREG_expected_prev;
	end
	if (
		( INSTRUCAO_expected_prev[0] !== 1'bx ) && ( INSTRUCAO_prev[0] !== INSTRUCAO_expected_prev[0] )
		&& ((INSTRUCAO_expected_prev[0] !== last_INSTRUCAO_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[0] = INSTRUCAO_expected_prev[0];
	end
	if (
		( INSTRUCAO_expected_prev[1] !== 1'bx ) && ( INSTRUCAO_prev[1] !== INSTRUCAO_expected_prev[1] )
		&& ((INSTRUCAO_expected_prev[1] !== last_INSTRUCAO_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[1] = INSTRUCAO_expected_prev[1];
	end
	if (
		( INSTRUCAO_expected_prev[2] !== 1'bx ) && ( INSTRUCAO_prev[2] !== INSTRUCAO_expected_prev[2] )
		&& ((INSTRUCAO_expected_prev[2] !== last_INSTRUCAO_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[2] = INSTRUCAO_expected_prev[2];
	end
	if (
		( INSTRUCAO_expected_prev[3] !== 1'bx ) && ( INSTRUCAO_prev[3] !== INSTRUCAO_expected_prev[3] )
		&& ((INSTRUCAO_expected_prev[3] !== last_INSTRUCAO_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[3] = INSTRUCAO_expected_prev[3];
	end
	if (
		( INSTRUCAO_expected_prev[4] !== 1'bx ) && ( INSTRUCAO_prev[4] !== INSTRUCAO_expected_prev[4] )
		&& ((INSTRUCAO_expected_prev[4] !== last_INSTRUCAO_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[4] = INSTRUCAO_expected_prev[4];
	end
	if (
		( INSTRUCAO_expected_prev[5] !== 1'bx ) && ( INSTRUCAO_prev[5] !== INSTRUCAO_expected_prev[5] )
		&& ((INSTRUCAO_expected_prev[5] !== last_INSTRUCAO_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[5] = INSTRUCAO_expected_prev[5];
	end
	if (
		( INSTRUCAO_expected_prev[6] !== 1'bx ) && ( INSTRUCAO_prev[6] !== INSTRUCAO_expected_prev[6] )
		&& ((INSTRUCAO_expected_prev[6] !== last_INSTRUCAO_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[6] = INSTRUCAO_expected_prev[6];
	end
	if (
		( INSTRUCAO_expected_prev[7] !== 1'bx ) && ( INSTRUCAO_prev[7] !== INSTRUCAO_expected_prev[7] )
		&& ((INSTRUCAO_expected_prev[7] !== last_INSTRUCAO_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[7] = INSTRUCAO_expected_prev[7];
	end
	if (
		( INSTRUCAO_expected_prev[8] !== 1'bx ) && ( INSTRUCAO_prev[8] !== INSTRUCAO_expected_prev[8] )
		&& ((INSTRUCAO_expected_prev[8] !== last_INSTRUCAO_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[8] = INSTRUCAO_expected_prev[8];
	end
	if (
		( INSTRUCAO_expected_prev[9] !== 1'bx ) && ( INSTRUCAO_prev[9] !== INSTRUCAO_expected_prev[9] )
		&& ((INSTRUCAO_expected_prev[9] !== last_INSTRUCAO_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[9] = INSTRUCAO_expected_prev[9];
	end
	if (
		( INSTRUCAO_expected_prev[10] !== 1'bx ) && ( INSTRUCAO_prev[10] !== INSTRUCAO_expected_prev[10] )
		&& ((INSTRUCAO_expected_prev[10] !== last_INSTRUCAO_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[10] = INSTRUCAO_expected_prev[10];
	end
	if (
		( INSTRUCAO_expected_prev[11] !== 1'bx ) && ( INSTRUCAO_prev[11] !== INSTRUCAO_expected_prev[11] )
		&& ((INSTRUCAO_expected_prev[11] !== last_INSTRUCAO_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[11] = INSTRUCAO_expected_prev[11];
	end
	if (
		( INSTRUCAO_expected_prev[12] !== 1'bx ) && ( INSTRUCAO_prev[12] !== INSTRUCAO_expected_prev[12] )
		&& ((INSTRUCAO_expected_prev[12] !== last_INSTRUCAO_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[12] = INSTRUCAO_expected_prev[12];
	end
	if (
		( INSTRUCAO_expected_prev[13] !== 1'bx ) && ( INSTRUCAO_prev[13] !== INSTRUCAO_expected_prev[13] )
		&& ((INSTRUCAO_expected_prev[13] !== last_INSTRUCAO_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[13] = INSTRUCAO_expected_prev[13];
	end
	if (
		( INSTRUCAO_expected_prev[14] !== 1'bx ) && ( INSTRUCAO_prev[14] !== INSTRUCAO_expected_prev[14] )
		&& ((INSTRUCAO_expected_prev[14] !== last_INSTRUCAO_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[14] = INSTRUCAO_expected_prev[14];
	end
	if (
		( INSTRUCAO_expected_prev[15] !== 1'bx ) && ( INSTRUCAO_prev[15] !== INSTRUCAO_expected_prev[15] )
		&& ((INSTRUCAO_expected_prev[15] !== last_INSTRUCAO_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[15] = INSTRUCAO_expected_prev[15];
	end
	if (
		( INSTRUCAO_expected_prev[16] !== 1'bx ) && ( INSTRUCAO_prev[16] !== INSTRUCAO_expected_prev[16] )
		&& ((INSTRUCAO_expected_prev[16] !== last_INSTRUCAO_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[16] = INSTRUCAO_expected_prev[16];
	end
	if (
		( INSTRUCAO_expected_prev[17] !== 1'bx ) && ( INSTRUCAO_prev[17] !== INSTRUCAO_expected_prev[17] )
		&& ((INSTRUCAO_expected_prev[17] !== last_INSTRUCAO_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[17] = INSTRUCAO_expected_prev[17];
	end
	if (
		( INSTRUCAO_expected_prev[18] !== 1'bx ) && ( INSTRUCAO_prev[18] !== INSTRUCAO_expected_prev[18] )
		&& ((INSTRUCAO_expected_prev[18] !== last_INSTRUCAO_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[18] = INSTRUCAO_expected_prev[18];
	end
	if (
		( INSTRUCAO_expected_prev[19] !== 1'bx ) && ( INSTRUCAO_prev[19] !== INSTRUCAO_expected_prev[19] )
		&& ((INSTRUCAO_expected_prev[19] !== last_INSTRUCAO_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[19] = INSTRUCAO_expected_prev[19];
	end
	if (
		( INSTRUCAO_expected_prev[20] !== 1'bx ) && ( INSTRUCAO_prev[20] !== INSTRUCAO_expected_prev[20] )
		&& ((INSTRUCAO_expected_prev[20] !== last_INSTRUCAO_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[20] = INSTRUCAO_expected_prev[20];
	end
	if (
		( INSTRUCAO_expected_prev[21] !== 1'bx ) && ( INSTRUCAO_prev[21] !== INSTRUCAO_expected_prev[21] )
		&& ((INSTRUCAO_expected_prev[21] !== last_INSTRUCAO_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[21] = INSTRUCAO_expected_prev[21];
	end
	if (
		( INSTRUCAO_expected_prev[22] !== 1'bx ) && ( INSTRUCAO_prev[22] !== INSTRUCAO_expected_prev[22] )
		&& ((INSTRUCAO_expected_prev[22] !== last_INSTRUCAO_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[22] = INSTRUCAO_expected_prev[22];
	end
	if (
		( INSTRUCAO_expected_prev[23] !== 1'bx ) && ( INSTRUCAO_prev[23] !== INSTRUCAO_expected_prev[23] )
		&& ((INSTRUCAO_expected_prev[23] !== last_INSTRUCAO_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[23] = INSTRUCAO_expected_prev[23];
	end
	if (
		( INSTRUCAO_expected_prev[24] !== 1'bx ) && ( INSTRUCAO_prev[24] !== INSTRUCAO_expected_prev[24] )
		&& ((INSTRUCAO_expected_prev[24] !== last_INSTRUCAO_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[24] = INSTRUCAO_expected_prev[24];
	end
	if (
		( INSTRUCAO_expected_prev[25] !== 1'bx ) && ( INSTRUCAO_prev[25] !== INSTRUCAO_expected_prev[25] )
		&& ((INSTRUCAO_expected_prev[25] !== last_INSTRUCAO_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[25] = INSTRUCAO_expected_prev[25];
	end
	if (
		( INSTRUCAO_expected_prev[26] !== 1'bx ) && ( INSTRUCAO_prev[26] !== INSTRUCAO_expected_prev[26] )
		&& ((INSTRUCAO_expected_prev[26] !== last_INSTRUCAO_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[26] = INSTRUCAO_expected_prev[26];
	end
	if (
		( INSTRUCAO_expected_prev[27] !== 1'bx ) && ( INSTRUCAO_prev[27] !== INSTRUCAO_expected_prev[27] )
		&& ((INSTRUCAO_expected_prev[27] !== last_INSTRUCAO_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[27] = INSTRUCAO_expected_prev[27];
	end
	if (
		( INSTRUCAO_expected_prev[28] !== 1'bx ) && ( INSTRUCAO_prev[28] !== INSTRUCAO_expected_prev[28] )
		&& ((INSTRUCAO_expected_prev[28] !== last_INSTRUCAO_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[28] = INSTRUCAO_expected_prev[28];
	end
	if (
		( INSTRUCAO_expected_prev[29] !== 1'bx ) && ( INSTRUCAO_prev[29] !== INSTRUCAO_expected_prev[29] )
		&& ((INSTRUCAO_expected_prev[29] !== last_INSTRUCAO_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[29] = INSTRUCAO_expected_prev[29];
	end
	if (
		( INSTRUCAO_expected_prev[30] !== 1'bx ) && ( INSTRUCAO_prev[30] !== INSTRUCAO_expected_prev[30] )
		&& ((INSTRUCAO_expected_prev[30] !== last_INSTRUCAO_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[30] = INSTRUCAO_expected_prev[30];
	end
	if (
		( INSTRUCAO_expected_prev[31] !== 1'bx ) && ( INSTRUCAO_prev[31] !== INSTRUCAO_expected_prev[31] )
		&& ((INSTRUCAO_expected_prev[31] !== last_INSTRUCAO_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INSTRUCAO[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INSTRUCAO_expected_prev);
		$display ("     Real value = %b", INSTRUCAO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_INSTRUCAO_exp[31] = INSTRUCAO_expected_prev[31];
	end
	if (
		( IROUTPUT_expected_prev[0] !== 1'bx ) && ( IROUTPUT_prev[0] !== IROUTPUT_expected_prev[0] )
		&& ((IROUTPUT_expected_prev[0] !== last_IROUTPUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[0] = IROUTPUT_expected_prev[0];
	end
	if (
		( IROUTPUT_expected_prev[1] !== 1'bx ) && ( IROUTPUT_prev[1] !== IROUTPUT_expected_prev[1] )
		&& ((IROUTPUT_expected_prev[1] !== last_IROUTPUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[1] = IROUTPUT_expected_prev[1];
	end
	if (
		( IROUTPUT_expected_prev[2] !== 1'bx ) && ( IROUTPUT_prev[2] !== IROUTPUT_expected_prev[2] )
		&& ((IROUTPUT_expected_prev[2] !== last_IROUTPUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[2] = IROUTPUT_expected_prev[2];
	end
	if (
		( IROUTPUT_expected_prev[3] !== 1'bx ) && ( IROUTPUT_prev[3] !== IROUTPUT_expected_prev[3] )
		&& ((IROUTPUT_expected_prev[3] !== last_IROUTPUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[3] = IROUTPUT_expected_prev[3];
	end
	if (
		( IROUTPUT_expected_prev[4] !== 1'bx ) && ( IROUTPUT_prev[4] !== IROUTPUT_expected_prev[4] )
		&& ((IROUTPUT_expected_prev[4] !== last_IROUTPUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[4] = IROUTPUT_expected_prev[4];
	end
	if (
		( IROUTPUT_expected_prev[5] !== 1'bx ) && ( IROUTPUT_prev[5] !== IROUTPUT_expected_prev[5] )
		&& ((IROUTPUT_expected_prev[5] !== last_IROUTPUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[5] = IROUTPUT_expected_prev[5];
	end
	if (
		( IROUTPUT_expected_prev[6] !== 1'bx ) && ( IROUTPUT_prev[6] !== IROUTPUT_expected_prev[6] )
		&& ((IROUTPUT_expected_prev[6] !== last_IROUTPUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[6] = IROUTPUT_expected_prev[6];
	end
	if (
		( IROUTPUT_expected_prev[7] !== 1'bx ) && ( IROUTPUT_prev[7] !== IROUTPUT_expected_prev[7] )
		&& ((IROUTPUT_expected_prev[7] !== last_IROUTPUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[7] = IROUTPUT_expected_prev[7];
	end
	if (
		( IROUTPUT_expected_prev[8] !== 1'bx ) && ( IROUTPUT_prev[8] !== IROUTPUT_expected_prev[8] )
		&& ((IROUTPUT_expected_prev[8] !== last_IROUTPUT_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[8] = IROUTPUT_expected_prev[8];
	end
	if (
		( IROUTPUT_expected_prev[9] !== 1'bx ) && ( IROUTPUT_prev[9] !== IROUTPUT_expected_prev[9] )
		&& ((IROUTPUT_expected_prev[9] !== last_IROUTPUT_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[9] = IROUTPUT_expected_prev[9];
	end
	if (
		( IROUTPUT_expected_prev[10] !== 1'bx ) && ( IROUTPUT_prev[10] !== IROUTPUT_expected_prev[10] )
		&& ((IROUTPUT_expected_prev[10] !== last_IROUTPUT_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[10] = IROUTPUT_expected_prev[10];
	end
	if (
		( IROUTPUT_expected_prev[11] !== 1'bx ) && ( IROUTPUT_prev[11] !== IROUTPUT_expected_prev[11] )
		&& ((IROUTPUT_expected_prev[11] !== last_IROUTPUT_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[11] = IROUTPUT_expected_prev[11];
	end
	if (
		( IROUTPUT_expected_prev[12] !== 1'bx ) && ( IROUTPUT_prev[12] !== IROUTPUT_expected_prev[12] )
		&& ((IROUTPUT_expected_prev[12] !== last_IROUTPUT_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[12] = IROUTPUT_expected_prev[12];
	end
	if (
		( IROUTPUT_expected_prev[13] !== 1'bx ) && ( IROUTPUT_prev[13] !== IROUTPUT_expected_prev[13] )
		&& ((IROUTPUT_expected_prev[13] !== last_IROUTPUT_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[13] = IROUTPUT_expected_prev[13];
	end
	if (
		( IROUTPUT_expected_prev[14] !== 1'bx ) && ( IROUTPUT_prev[14] !== IROUTPUT_expected_prev[14] )
		&& ((IROUTPUT_expected_prev[14] !== last_IROUTPUT_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[14] = IROUTPUT_expected_prev[14];
	end
	if (
		( IROUTPUT_expected_prev[15] !== 1'bx ) && ( IROUTPUT_prev[15] !== IROUTPUT_expected_prev[15] )
		&& ((IROUTPUT_expected_prev[15] !== last_IROUTPUT_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[15] = IROUTPUT_expected_prev[15];
	end
	if (
		( IROUTPUT_expected_prev[16] !== 1'bx ) && ( IROUTPUT_prev[16] !== IROUTPUT_expected_prev[16] )
		&& ((IROUTPUT_expected_prev[16] !== last_IROUTPUT_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[16] = IROUTPUT_expected_prev[16];
	end
	if (
		( IROUTPUT_expected_prev[17] !== 1'bx ) && ( IROUTPUT_prev[17] !== IROUTPUT_expected_prev[17] )
		&& ((IROUTPUT_expected_prev[17] !== last_IROUTPUT_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[17] = IROUTPUT_expected_prev[17];
	end
	if (
		( IROUTPUT_expected_prev[18] !== 1'bx ) && ( IROUTPUT_prev[18] !== IROUTPUT_expected_prev[18] )
		&& ((IROUTPUT_expected_prev[18] !== last_IROUTPUT_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[18] = IROUTPUT_expected_prev[18];
	end
	if (
		( IROUTPUT_expected_prev[19] !== 1'bx ) && ( IROUTPUT_prev[19] !== IROUTPUT_expected_prev[19] )
		&& ((IROUTPUT_expected_prev[19] !== last_IROUTPUT_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[19] = IROUTPUT_expected_prev[19];
	end
	if (
		( IROUTPUT_expected_prev[20] !== 1'bx ) && ( IROUTPUT_prev[20] !== IROUTPUT_expected_prev[20] )
		&& ((IROUTPUT_expected_prev[20] !== last_IROUTPUT_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[20] = IROUTPUT_expected_prev[20];
	end
	if (
		( IROUTPUT_expected_prev[21] !== 1'bx ) && ( IROUTPUT_prev[21] !== IROUTPUT_expected_prev[21] )
		&& ((IROUTPUT_expected_prev[21] !== last_IROUTPUT_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[21] = IROUTPUT_expected_prev[21];
	end
	if (
		( IROUTPUT_expected_prev[22] !== 1'bx ) && ( IROUTPUT_prev[22] !== IROUTPUT_expected_prev[22] )
		&& ((IROUTPUT_expected_prev[22] !== last_IROUTPUT_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[22] = IROUTPUT_expected_prev[22];
	end
	if (
		( IROUTPUT_expected_prev[23] !== 1'bx ) && ( IROUTPUT_prev[23] !== IROUTPUT_expected_prev[23] )
		&& ((IROUTPUT_expected_prev[23] !== last_IROUTPUT_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[23] = IROUTPUT_expected_prev[23];
	end
	if (
		( IROUTPUT_expected_prev[24] !== 1'bx ) && ( IROUTPUT_prev[24] !== IROUTPUT_expected_prev[24] )
		&& ((IROUTPUT_expected_prev[24] !== last_IROUTPUT_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[24] = IROUTPUT_expected_prev[24];
	end
	if (
		( IROUTPUT_expected_prev[25] !== 1'bx ) && ( IROUTPUT_prev[25] !== IROUTPUT_expected_prev[25] )
		&& ((IROUTPUT_expected_prev[25] !== last_IROUTPUT_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[25] = IROUTPUT_expected_prev[25];
	end
	if (
		( IROUTPUT_expected_prev[26] !== 1'bx ) && ( IROUTPUT_prev[26] !== IROUTPUT_expected_prev[26] )
		&& ((IROUTPUT_expected_prev[26] !== last_IROUTPUT_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[26] = IROUTPUT_expected_prev[26];
	end
	if (
		( IROUTPUT_expected_prev[27] !== 1'bx ) && ( IROUTPUT_prev[27] !== IROUTPUT_expected_prev[27] )
		&& ((IROUTPUT_expected_prev[27] !== last_IROUTPUT_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[27] = IROUTPUT_expected_prev[27];
	end
	if (
		( IROUTPUT_expected_prev[28] !== 1'bx ) && ( IROUTPUT_prev[28] !== IROUTPUT_expected_prev[28] )
		&& ((IROUTPUT_expected_prev[28] !== last_IROUTPUT_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[28] = IROUTPUT_expected_prev[28];
	end
	if (
		( IROUTPUT_expected_prev[29] !== 1'bx ) && ( IROUTPUT_prev[29] !== IROUTPUT_expected_prev[29] )
		&& ((IROUTPUT_expected_prev[29] !== last_IROUTPUT_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[29] = IROUTPUT_expected_prev[29];
	end
	if (
		( IROUTPUT_expected_prev[30] !== 1'bx ) && ( IROUTPUT_prev[30] !== IROUTPUT_expected_prev[30] )
		&& ((IROUTPUT_expected_prev[30] !== last_IROUTPUT_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[30] = IROUTPUT_expected_prev[30];
	end
	if (
		( IROUTPUT_expected_prev[31] !== 1'bx ) && ( IROUTPUT_prev[31] !== IROUTPUT_expected_prev[31] )
		&& ((IROUTPUT_expected_prev[31] !== last_IROUTPUT_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IROUTPUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IROUTPUT_expected_prev);
		$display ("     Real value = %b", IROUTPUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_IROUTPUT_exp[31] = IROUTPUT_expected_prev[31];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end
	if (
		( ULAA_expected_prev[0] !== 1'bx ) && ( ULAA_prev[0] !== ULAA_expected_prev[0] )
		&& ((ULAA_expected_prev[0] !== last_ULAA_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[0] = ULAA_expected_prev[0];
	end
	if (
		( ULAA_expected_prev[1] !== 1'bx ) && ( ULAA_prev[1] !== ULAA_expected_prev[1] )
		&& ((ULAA_expected_prev[1] !== last_ULAA_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[1] = ULAA_expected_prev[1];
	end
	if (
		( ULAA_expected_prev[2] !== 1'bx ) && ( ULAA_prev[2] !== ULAA_expected_prev[2] )
		&& ((ULAA_expected_prev[2] !== last_ULAA_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[2] = ULAA_expected_prev[2];
	end
	if (
		( ULAA_expected_prev[3] !== 1'bx ) && ( ULAA_prev[3] !== ULAA_expected_prev[3] )
		&& ((ULAA_expected_prev[3] !== last_ULAA_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[3] = ULAA_expected_prev[3];
	end
	if (
		( ULAA_expected_prev[4] !== 1'bx ) && ( ULAA_prev[4] !== ULAA_expected_prev[4] )
		&& ((ULAA_expected_prev[4] !== last_ULAA_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[4] = ULAA_expected_prev[4];
	end
	if (
		( ULAA_expected_prev[5] !== 1'bx ) && ( ULAA_prev[5] !== ULAA_expected_prev[5] )
		&& ((ULAA_expected_prev[5] !== last_ULAA_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[5] = ULAA_expected_prev[5];
	end
	if (
		( ULAA_expected_prev[6] !== 1'bx ) && ( ULAA_prev[6] !== ULAA_expected_prev[6] )
		&& ((ULAA_expected_prev[6] !== last_ULAA_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[6] = ULAA_expected_prev[6];
	end
	if (
		( ULAA_expected_prev[7] !== 1'bx ) && ( ULAA_prev[7] !== ULAA_expected_prev[7] )
		&& ((ULAA_expected_prev[7] !== last_ULAA_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[7] = ULAA_expected_prev[7];
	end
	if (
		( ULAA_expected_prev[8] !== 1'bx ) && ( ULAA_prev[8] !== ULAA_expected_prev[8] )
		&& ((ULAA_expected_prev[8] !== last_ULAA_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[8] = ULAA_expected_prev[8];
	end
	if (
		( ULAA_expected_prev[9] !== 1'bx ) && ( ULAA_prev[9] !== ULAA_expected_prev[9] )
		&& ((ULAA_expected_prev[9] !== last_ULAA_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[9] = ULAA_expected_prev[9];
	end
	if (
		( ULAA_expected_prev[10] !== 1'bx ) && ( ULAA_prev[10] !== ULAA_expected_prev[10] )
		&& ((ULAA_expected_prev[10] !== last_ULAA_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[10] = ULAA_expected_prev[10];
	end
	if (
		( ULAA_expected_prev[11] !== 1'bx ) && ( ULAA_prev[11] !== ULAA_expected_prev[11] )
		&& ((ULAA_expected_prev[11] !== last_ULAA_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[11] = ULAA_expected_prev[11];
	end
	if (
		( ULAA_expected_prev[12] !== 1'bx ) && ( ULAA_prev[12] !== ULAA_expected_prev[12] )
		&& ((ULAA_expected_prev[12] !== last_ULAA_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[12] = ULAA_expected_prev[12];
	end
	if (
		( ULAA_expected_prev[13] !== 1'bx ) && ( ULAA_prev[13] !== ULAA_expected_prev[13] )
		&& ((ULAA_expected_prev[13] !== last_ULAA_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[13] = ULAA_expected_prev[13];
	end
	if (
		( ULAA_expected_prev[14] !== 1'bx ) && ( ULAA_prev[14] !== ULAA_expected_prev[14] )
		&& ((ULAA_expected_prev[14] !== last_ULAA_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[14] = ULAA_expected_prev[14];
	end
	if (
		( ULAA_expected_prev[15] !== 1'bx ) && ( ULAA_prev[15] !== ULAA_expected_prev[15] )
		&& ((ULAA_expected_prev[15] !== last_ULAA_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[15] = ULAA_expected_prev[15];
	end
	if (
		( ULAA_expected_prev[16] !== 1'bx ) && ( ULAA_prev[16] !== ULAA_expected_prev[16] )
		&& ((ULAA_expected_prev[16] !== last_ULAA_exp[16]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[16] = ULAA_expected_prev[16];
	end
	if (
		( ULAA_expected_prev[17] !== 1'bx ) && ( ULAA_prev[17] !== ULAA_expected_prev[17] )
		&& ((ULAA_expected_prev[17] !== last_ULAA_exp[17]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[17] = ULAA_expected_prev[17];
	end
	if (
		( ULAA_expected_prev[18] !== 1'bx ) && ( ULAA_prev[18] !== ULAA_expected_prev[18] )
		&& ((ULAA_expected_prev[18] !== last_ULAA_exp[18]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[18] = ULAA_expected_prev[18];
	end
	if (
		( ULAA_expected_prev[19] !== 1'bx ) && ( ULAA_prev[19] !== ULAA_expected_prev[19] )
		&& ((ULAA_expected_prev[19] !== last_ULAA_exp[19]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[19] = ULAA_expected_prev[19];
	end
	if (
		( ULAA_expected_prev[20] !== 1'bx ) && ( ULAA_prev[20] !== ULAA_expected_prev[20] )
		&& ((ULAA_expected_prev[20] !== last_ULAA_exp[20]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[20] = ULAA_expected_prev[20];
	end
	if (
		( ULAA_expected_prev[21] !== 1'bx ) && ( ULAA_prev[21] !== ULAA_expected_prev[21] )
		&& ((ULAA_expected_prev[21] !== last_ULAA_exp[21]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[21] = ULAA_expected_prev[21];
	end
	if (
		( ULAA_expected_prev[22] !== 1'bx ) && ( ULAA_prev[22] !== ULAA_expected_prev[22] )
		&& ((ULAA_expected_prev[22] !== last_ULAA_exp[22]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[22] = ULAA_expected_prev[22];
	end
	if (
		( ULAA_expected_prev[23] !== 1'bx ) && ( ULAA_prev[23] !== ULAA_expected_prev[23] )
		&& ((ULAA_expected_prev[23] !== last_ULAA_exp[23]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[23] = ULAA_expected_prev[23];
	end
	if (
		( ULAA_expected_prev[24] !== 1'bx ) && ( ULAA_prev[24] !== ULAA_expected_prev[24] )
		&& ((ULAA_expected_prev[24] !== last_ULAA_exp[24]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[24] = ULAA_expected_prev[24];
	end
	if (
		( ULAA_expected_prev[25] !== 1'bx ) && ( ULAA_prev[25] !== ULAA_expected_prev[25] )
		&& ((ULAA_expected_prev[25] !== last_ULAA_exp[25]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[25] = ULAA_expected_prev[25];
	end
	if (
		( ULAA_expected_prev[26] !== 1'bx ) && ( ULAA_prev[26] !== ULAA_expected_prev[26] )
		&& ((ULAA_expected_prev[26] !== last_ULAA_exp[26]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[26] = ULAA_expected_prev[26];
	end
	if (
		( ULAA_expected_prev[27] !== 1'bx ) && ( ULAA_prev[27] !== ULAA_expected_prev[27] )
		&& ((ULAA_expected_prev[27] !== last_ULAA_exp[27]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[27] = ULAA_expected_prev[27];
	end
	if (
		( ULAA_expected_prev[28] !== 1'bx ) && ( ULAA_prev[28] !== ULAA_expected_prev[28] )
		&& ((ULAA_expected_prev[28] !== last_ULAA_exp[28]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[28] = ULAA_expected_prev[28];
	end
	if (
		( ULAA_expected_prev[29] !== 1'bx ) && ( ULAA_prev[29] !== ULAA_expected_prev[29] )
		&& ((ULAA_expected_prev[29] !== last_ULAA_exp[29]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[29] = ULAA_expected_prev[29];
	end
	if (
		( ULAA_expected_prev[30] !== 1'bx ) && ( ULAA_prev[30] !== ULAA_expected_prev[30] )
		&& ((ULAA_expected_prev[30] !== last_ULAA_exp[30]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[30] = ULAA_expected_prev[30];
	end
	if (
		( ULAA_expected_prev[31] !== 1'bx ) && ( ULAA_prev[31] !== ULAA_expected_prev[31] )
		&& ((ULAA_expected_prev[31] !== last_ULAA_exp[31]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAA[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAA_expected_prev);
		$display ("     Real value = %b", ULAA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ULAA_exp[31] = ULAA_expected_prev[31];
	end
	if (
		( ULAB_expected_prev[0] !== 1'bx ) && ( ULAB_prev[0] !== ULAB_expected_prev[0] )
		&& ((ULAB_expected_prev[0] !== last_ULAB_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[0] = ULAB_expected_prev[0];
	end
	if (
		( ULAB_expected_prev[1] !== 1'bx ) && ( ULAB_prev[1] !== ULAB_expected_prev[1] )
		&& ((ULAB_expected_prev[1] !== last_ULAB_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[1] = ULAB_expected_prev[1];
	end
	if (
		( ULAB_expected_prev[2] !== 1'bx ) && ( ULAB_prev[2] !== ULAB_expected_prev[2] )
		&& ((ULAB_expected_prev[2] !== last_ULAB_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[2] = ULAB_expected_prev[2];
	end
	if (
		( ULAB_expected_prev[3] !== 1'bx ) && ( ULAB_prev[3] !== ULAB_expected_prev[3] )
		&& ((ULAB_expected_prev[3] !== last_ULAB_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[3] = ULAB_expected_prev[3];
	end
	if (
		( ULAB_expected_prev[4] !== 1'bx ) && ( ULAB_prev[4] !== ULAB_expected_prev[4] )
		&& ((ULAB_expected_prev[4] !== last_ULAB_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[4] = ULAB_expected_prev[4];
	end
	if (
		( ULAB_expected_prev[5] !== 1'bx ) && ( ULAB_prev[5] !== ULAB_expected_prev[5] )
		&& ((ULAB_expected_prev[5] !== last_ULAB_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[5] = ULAB_expected_prev[5];
	end
	if (
		( ULAB_expected_prev[6] !== 1'bx ) && ( ULAB_prev[6] !== ULAB_expected_prev[6] )
		&& ((ULAB_expected_prev[6] !== last_ULAB_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[6] = ULAB_expected_prev[6];
	end
	if (
		( ULAB_expected_prev[7] !== 1'bx ) && ( ULAB_prev[7] !== ULAB_expected_prev[7] )
		&& ((ULAB_expected_prev[7] !== last_ULAB_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[7] = ULAB_expected_prev[7];
	end
	if (
		( ULAB_expected_prev[8] !== 1'bx ) && ( ULAB_prev[8] !== ULAB_expected_prev[8] )
		&& ((ULAB_expected_prev[8] !== last_ULAB_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[8] = ULAB_expected_prev[8];
	end
	if (
		( ULAB_expected_prev[9] !== 1'bx ) && ( ULAB_prev[9] !== ULAB_expected_prev[9] )
		&& ((ULAB_expected_prev[9] !== last_ULAB_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[9] = ULAB_expected_prev[9];
	end
	if (
		( ULAB_expected_prev[10] !== 1'bx ) && ( ULAB_prev[10] !== ULAB_expected_prev[10] )
		&& ((ULAB_expected_prev[10] !== last_ULAB_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[10] = ULAB_expected_prev[10];
	end
	if (
		( ULAB_expected_prev[11] !== 1'bx ) && ( ULAB_prev[11] !== ULAB_expected_prev[11] )
		&& ((ULAB_expected_prev[11] !== last_ULAB_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[11] = ULAB_expected_prev[11];
	end
	if (
		( ULAB_expected_prev[12] !== 1'bx ) && ( ULAB_prev[12] !== ULAB_expected_prev[12] )
		&& ((ULAB_expected_prev[12] !== last_ULAB_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[12] = ULAB_expected_prev[12];
	end
	if (
		( ULAB_expected_prev[13] !== 1'bx ) && ( ULAB_prev[13] !== ULAB_expected_prev[13] )
		&& ((ULAB_expected_prev[13] !== last_ULAB_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[13] = ULAB_expected_prev[13];
	end
	if (
		( ULAB_expected_prev[14] !== 1'bx ) && ( ULAB_prev[14] !== ULAB_expected_prev[14] )
		&& ((ULAB_expected_prev[14] !== last_ULAB_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[14] = ULAB_expected_prev[14];
	end
	if (
		( ULAB_expected_prev[15] !== 1'bx ) && ( ULAB_prev[15] !== ULAB_expected_prev[15] )
		&& ((ULAB_expected_prev[15] !== last_ULAB_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[15] = ULAB_expected_prev[15];
	end
	if (
		( ULAB_expected_prev[16] !== 1'bx ) && ( ULAB_prev[16] !== ULAB_expected_prev[16] )
		&& ((ULAB_expected_prev[16] !== last_ULAB_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[16] = ULAB_expected_prev[16];
	end
	if (
		( ULAB_expected_prev[17] !== 1'bx ) && ( ULAB_prev[17] !== ULAB_expected_prev[17] )
		&& ((ULAB_expected_prev[17] !== last_ULAB_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[17] = ULAB_expected_prev[17];
	end
	if (
		( ULAB_expected_prev[18] !== 1'bx ) && ( ULAB_prev[18] !== ULAB_expected_prev[18] )
		&& ((ULAB_expected_prev[18] !== last_ULAB_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[18] = ULAB_expected_prev[18];
	end
	if (
		( ULAB_expected_prev[19] !== 1'bx ) && ( ULAB_prev[19] !== ULAB_expected_prev[19] )
		&& ((ULAB_expected_prev[19] !== last_ULAB_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[19] = ULAB_expected_prev[19];
	end
	if (
		( ULAB_expected_prev[20] !== 1'bx ) && ( ULAB_prev[20] !== ULAB_expected_prev[20] )
		&& ((ULAB_expected_prev[20] !== last_ULAB_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[20] = ULAB_expected_prev[20];
	end
	if (
		( ULAB_expected_prev[21] !== 1'bx ) && ( ULAB_prev[21] !== ULAB_expected_prev[21] )
		&& ((ULAB_expected_prev[21] !== last_ULAB_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[21] = ULAB_expected_prev[21];
	end
	if (
		( ULAB_expected_prev[22] !== 1'bx ) && ( ULAB_prev[22] !== ULAB_expected_prev[22] )
		&& ((ULAB_expected_prev[22] !== last_ULAB_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[22] = ULAB_expected_prev[22];
	end
	if (
		( ULAB_expected_prev[23] !== 1'bx ) && ( ULAB_prev[23] !== ULAB_expected_prev[23] )
		&& ((ULAB_expected_prev[23] !== last_ULAB_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[23] = ULAB_expected_prev[23];
	end
	if (
		( ULAB_expected_prev[24] !== 1'bx ) && ( ULAB_prev[24] !== ULAB_expected_prev[24] )
		&& ((ULAB_expected_prev[24] !== last_ULAB_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[24] = ULAB_expected_prev[24];
	end
	if (
		( ULAB_expected_prev[25] !== 1'bx ) && ( ULAB_prev[25] !== ULAB_expected_prev[25] )
		&& ((ULAB_expected_prev[25] !== last_ULAB_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[25] = ULAB_expected_prev[25];
	end
	if (
		( ULAB_expected_prev[26] !== 1'bx ) && ( ULAB_prev[26] !== ULAB_expected_prev[26] )
		&& ((ULAB_expected_prev[26] !== last_ULAB_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[26] = ULAB_expected_prev[26];
	end
	if (
		( ULAB_expected_prev[27] !== 1'bx ) && ( ULAB_prev[27] !== ULAB_expected_prev[27] )
		&& ((ULAB_expected_prev[27] !== last_ULAB_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[27] = ULAB_expected_prev[27];
	end
	if (
		( ULAB_expected_prev[28] !== 1'bx ) && ( ULAB_prev[28] !== ULAB_expected_prev[28] )
		&& ((ULAB_expected_prev[28] !== last_ULAB_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[28] = ULAB_expected_prev[28];
	end
	if (
		( ULAB_expected_prev[29] !== 1'bx ) && ( ULAB_prev[29] !== ULAB_expected_prev[29] )
		&& ((ULAB_expected_prev[29] !== last_ULAB_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[29] = ULAB_expected_prev[29];
	end
	if (
		( ULAB_expected_prev[30] !== 1'bx ) && ( ULAB_prev[30] !== ULAB_expected_prev[30] )
		&& ((ULAB_expected_prev[30] !== last_ULAB_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[30] = ULAB_expected_prev[30];
	end
	if (
		( ULAB_expected_prev[31] !== 1'bx ) && ( ULAB_prev[31] !== ULAB_expected_prev[31] )
		&& ((ULAB_expected_prev[31] !== last_ULAB_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAB[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAB_expected_prev);
		$display ("     Real value = %b", ULAB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_ULAB_exp[31] = ULAB_expected_prev[31];
	end
	if (
		( ULAOPCODE_expected_prev[0] !== 1'bx ) && ( ULAOPCODE_prev[0] !== ULAOPCODE_expected_prev[0] )
		&& ((ULAOPCODE_expected_prev[0] !== last_ULAOPCODE_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ULAOPCODE_exp[0] = ULAOPCODE_expected_prev[0];
	end
	if (
		( ULAOPCODE_expected_prev[1] !== 1'bx ) && ( ULAOPCODE_prev[1] !== ULAOPCODE_expected_prev[1] )
		&& ((ULAOPCODE_expected_prev[1] !== last_ULAOPCODE_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ULAOPCODE_exp[1] = ULAOPCODE_expected_prev[1];
	end
	if (
		( ULAOPCODE_expected_prev[2] !== 1'bx ) && ( ULAOPCODE_prev[2] !== ULAOPCODE_expected_prev[2] )
		&& ((ULAOPCODE_expected_prev[2] !== last_ULAOPCODE_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ULAOPCODE_exp[2] = ULAOPCODE_expected_prev[2];
	end
	if (
		( ULAOPCODE_expected_prev[3] !== 1'bx ) && ( ULAOPCODE_prev[3] !== ULAOPCODE_expected_prev[3] )
		&& ((ULAOPCODE_expected_prev[3] !== last_ULAOPCODE_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAOPCODE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAOPCODE_expected_prev);
		$display ("     Real value = %b", ULAOPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ULAOPCODE_exp[3] = ULAOPCODE_expected_prev[3];
	end
	if (
		( ULAR_expected_prev[0] !== 1'bx ) && ( ULAR_prev[0] !== ULAR_expected_prev[0] )
		&& ((ULAR_expected_prev[0] !== last_ULAR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[0] = ULAR_expected_prev[0];
	end
	if (
		( ULAR_expected_prev[1] !== 1'bx ) && ( ULAR_prev[1] !== ULAR_expected_prev[1] )
		&& ((ULAR_expected_prev[1] !== last_ULAR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[1] = ULAR_expected_prev[1];
	end
	if (
		( ULAR_expected_prev[2] !== 1'bx ) && ( ULAR_prev[2] !== ULAR_expected_prev[2] )
		&& ((ULAR_expected_prev[2] !== last_ULAR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[2] = ULAR_expected_prev[2];
	end
	if (
		( ULAR_expected_prev[3] !== 1'bx ) && ( ULAR_prev[3] !== ULAR_expected_prev[3] )
		&& ((ULAR_expected_prev[3] !== last_ULAR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[3] = ULAR_expected_prev[3];
	end
	if (
		( ULAR_expected_prev[4] !== 1'bx ) && ( ULAR_prev[4] !== ULAR_expected_prev[4] )
		&& ((ULAR_expected_prev[4] !== last_ULAR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[4] = ULAR_expected_prev[4];
	end
	if (
		( ULAR_expected_prev[5] !== 1'bx ) && ( ULAR_prev[5] !== ULAR_expected_prev[5] )
		&& ((ULAR_expected_prev[5] !== last_ULAR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[5] = ULAR_expected_prev[5];
	end
	if (
		( ULAR_expected_prev[6] !== 1'bx ) && ( ULAR_prev[6] !== ULAR_expected_prev[6] )
		&& ((ULAR_expected_prev[6] !== last_ULAR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[6] = ULAR_expected_prev[6];
	end
	if (
		( ULAR_expected_prev[7] !== 1'bx ) && ( ULAR_prev[7] !== ULAR_expected_prev[7] )
		&& ((ULAR_expected_prev[7] !== last_ULAR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[7] = ULAR_expected_prev[7];
	end
	if (
		( ULAR_expected_prev[8] !== 1'bx ) && ( ULAR_prev[8] !== ULAR_expected_prev[8] )
		&& ((ULAR_expected_prev[8] !== last_ULAR_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[8] = ULAR_expected_prev[8];
	end
	if (
		( ULAR_expected_prev[9] !== 1'bx ) && ( ULAR_prev[9] !== ULAR_expected_prev[9] )
		&& ((ULAR_expected_prev[9] !== last_ULAR_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[9] = ULAR_expected_prev[9];
	end
	if (
		( ULAR_expected_prev[10] !== 1'bx ) && ( ULAR_prev[10] !== ULAR_expected_prev[10] )
		&& ((ULAR_expected_prev[10] !== last_ULAR_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[10] = ULAR_expected_prev[10];
	end
	if (
		( ULAR_expected_prev[11] !== 1'bx ) && ( ULAR_prev[11] !== ULAR_expected_prev[11] )
		&& ((ULAR_expected_prev[11] !== last_ULAR_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[11] = ULAR_expected_prev[11];
	end
	if (
		( ULAR_expected_prev[12] !== 1'bx ) && ( ULAR_prev[12] !== ULAR_expected_prev[12] )
		&& ((ULAR_expected_prev[12] !== last_ULAR_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[12] = ULAR_expected_prev[12];
	end
	if (
		( ULAR_expected_prev[13] !== 1'bx ) && ( ULAR_prev[13] !== ULAR_expected_prev[13] )
		&& ((ULAR_expected_prev[13] !== last_ULAR_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[13] = ULAR_expected_prev[13];
	end
	if (
		( ULAR_expected_prev[14] !== 1'bx ) && ( ULAR_prev[14] !== ULAR_expected_prev[14] )
		&& ((ULAR_expected_prev[14] !== last_ULAR_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[14] = ULAR_expected_prev[14];
	end
	if (
		( ULAR_expected_prev[15] !== 1'bx ) && ( ULAR_prev[15] !== ULAR_expected_prev[15] )
		&& ((ULAR_expected_prev[15] !== last_ULAR_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[15] = ULAR_expected_prev[15];
	end
	if (
		( ULAR_expected_prev[16] !== 1'bx ) && ( ULAR_prev[16] !== ULAR_expected_prev[16] )
		&& ((ULAR_expected_prev[16] !== last_ULAR_exp[16]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[16] = ULAR_expected_prev[16];
	end
	if (
		( ULAR_expected_prev[17] !== 1'bx ) && ( ULAR_prev[17] !== ULAR_expected_prev[17] )
		&& ((ULAR_expected_prev[17] !== last_ULAR_exp[17]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[17] = ULAR_expected_prev[17];
	end
	if (
		( ULAR_expected_prev[18] !== 1'bx ) && ( ULAR_prev[18] !== ULAR_expected_prev[18] )
		&& ((ULAR_expected_prev[18] !== last_ULAR_exp[18]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[18] = ULAR_expected_prev[18];
	end
	if (
		( ULAR_expected_prev[19] !== 1'bx ) && ( ULAR_prev[19] !== ULAR_expected_prev[19] )
		&& ((ULAR_expected_prev[19] !== last_ULAR_exp[19]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[19] = ULAR_expected_prev[19];
	end
	if (
		( ULAR_expected_prev[20] !== 1'bx ) && ( ULAR_prev[20] !== ULAR_expected_prev[20] )
		&& ((ULAR_expected_prev[20] !== last_ULAR_exp[20]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[20] = ULAR_expected_prev[20];
	end
	if (
		( ULAR_expected_prev[21] !== 1'bx ) && ( ULAR_prev[21] !== ULAR_expected_prev[21] )
		&& ((ULAR_expected_prev[21] !== last_ULAR_exp[21]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[21] = ULAR_expected_prev[21];
	end
	if (
		( ULAR_expected_prev[22] !== 1'bx ) && ( ULAR_prev[22] !== ULAR_expected_prev[22] )
		&& ((ULAR_expected_prev[22] !== last_ULAR_exp[22]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[22] = ULAR_expected_prev[22];
	end
	if (
		( ULAR_expected_prev[23] !== 1'bx ) && ( ULAR_prev[23] !== ULAR_expected_prev[23] )
		&& ((ULAR_expected_prev[23] !== last_ULAR_exp[23]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[23] = ULAR_expected_prev[23];
	end
	if (
		( ULAR_expected_prev[24] !== 1'bx ) && ( ULAR_prev[24] !== ULAR_expected_prev[24] )
		&& ((ULAR_expected_prev[24] !== last_ULAR_exp[24]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[24] = ULAR_expected_prev[24];
	end
	if (
		( ULAR_expected_prev[25] !== 1'bx ) && ( ULAR_prev[25] !== ULAR_expected_prev[25] )
		&& ((ULAR_expected_prev[25] !== last_ULAR_exp[25]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[25] = ULAR_expected_prev[25];
	end
	if (
		( ULAR_expected_prev[26] !== 1'bx ) && ( ULAR_prev[26] !== ULAR_expected_prev[26] )
		&& ((ULAR_expected_prev[26] !== last_ULAR_exp[26]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[26] = ULAR_expected_prev[26];
	end
	if (
		( ULAR_expected_prev[27] !== 1'bx ) && ( ULAR_prev[27] !== ULAR_expected_prev[27] )
		&& ((ULAR_expected_prev[27] !== last_ULAR_exp[27]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[27] = ULAR_expected_prev[27];
	end
	if (
		( ULAR_expected_prev[28] !== 1'bx ) && ( ULAR_prev[28] !== ULAR_expected_prev[28] )
		&& ((ULAR_expected_prev[28] !== last_ULAR_exp[28]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[28] = ULAR_expected_prev[28];
	end
	if (
		( ULAR_expected_prev[29] !== 1'bx ) && ( ULAR_prev[29] !== ULAR_expected_prev[29] )
		&& ((ULAR_expected_prev[29] !== last_ULAR_exp[29]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[29] = ULAR_expected_prev[29];
	end
	if (
		( ULAR_expected_prev[30] !== 1'bx ) && ( ULAR_prev[30] !== ULAR_expected_prev[30] )
		&& ((ULAR_expected_prev[30] !== last_ULAR_exp[30]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[30] = ULAR_expected_prev[30];
	end
	if (
		( ULAR_expected_prev[31] !== 1'bx ) && ( ULAR_prev[31] !== ULAR_expected_prev[31] )
		&& ((ULAR_expected_prev[31] !== last_ULAR_exp[31]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ULAR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ULAR_expected_prev);
		$display ("     Real value = %b", ULAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ULAR_exp[31] = ULAR_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
// wires                                               
wire EscreveREG;
wire [31:0] INSTRUCAO;
wire [31:0] IROUTPUT;
wire [31:0] PC;
wire [31:0] ULAA;
wire [31:0] ULAB;
wire [3:0] ULAOPCODE;
wire [31:0] ULAR;

wire sampler;                             

// assign statements (if any)                          
test i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.EscreveREG(EscreveREG),
	.INSTRUCAO(INSTRUCAO),
	.IROUTPUT(IROUTPUT),
	.PC(PC),
	.ULAA(ULAA),
	.ULAB(ULAB),
	.ULAOPCODE(ULAOPCODE),
	.ULAR(ULAR)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

test_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.sampler_tx(sampler)
);

test_vlg_check_tst tb_out(
	.EscreveREG(EscreveREG),
	.INSTRUCAO(INSTRUCAO),
	.IROUTPUT(IROUTPUT),
	.PC(PC),
	.ULAA(ULAA),
	.ULAB(ULAB),
	.ULAOPCODE(ULAOPCODE),
	.ULAR(ULAR),
	.sampler_rx(sampler)
);
endmodule

